/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IOracleProviderRegistry {
  export type OracleProviderPropertiesStruct = {
    minTakeProfitBPS: PromiseOrValue<BigNumberish>;
    maxTakeProfitBPS: PromiseOrValue<BigNumberish>;
    leverageLevel: PromiseOrValue<BigNumberish>;
  };

  export type OracleProviderPropertiesStructOutput = [
    number,
    number,
    number
  ] & {
    minTakeProfitBPS: number;
    maxTakeProfitBPS: number;
    leverageLevel: number;
  };
}

export declare namespace InterestRate {
  export type RecordStruct = {
    annualRateBPS: PromiseOrValue<BigNumberish>;
    beginTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type RecordStructOutput = [BigNumber, BigNumber] & {
    annualRateBPS: BigNumber;
    beginTimestamp: BigNumber;
  };
}

export interface ChromaticMarketFactoryInterface extends utils.Interface {
  functions: {
    "appendInterestRateRecord(address,uint256,uint256)": FunctionFragment;
    "calculateInterest(address,uint256,uint256,uint256)": FunctionFragment;
    "createMarket(address,address)": FunctionFragment;
    "currentInterestRate(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "getEarningDistributionThreshold(address)": FunctionFragment;
    "getFlashLoanFeeRate(address)": FunctionFragment;
    "getInterestRateRecords(address)": FunctionFragment;
    "getMarket(address,address)": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "getMarketsBySettlmentToken(address)": FunctionFragment;
    "getMinimumMargin(address)": FunctionFragment;
    "getOracleProviderProperties(address)": FunctionFragment;
    "getUniswapFeeTier(address)": FunctionFragment;
    "isRegisteredMarket(address)": FunctionFragment;
    "isRegisteredOracleProvider(address)": FunctionFragment;
    "isRegisteredSettlementToken(address)": FunctionFragment;
    "keeperFeePayer()": FunctionFragment;
    "liquidator()": FunctionFragment;
    "parameters()": FunctionFragment;
    "registerOracleProvider(address,(uint32,uint32,uint8))": FunctionFragment;
    "registerSettlementToken(address,uint256,uint256,uint256,uint256,uint24)": FunctionFragment;
    "registeredOracleProviders()": FunctionFragment;
    "registeredSettlementTokens()": FunctionFragment;
    "removeLastInterestRateRecord(address)": FunctionFragment;
    "setEarningDistributionThreshold(address,uint256)": FunctionFragment;
    "setFlashLoanFeeRate(address,uint256)": FunctionFragment;
    "setKeeperFeePayer(address)": FunctionFragment;
    "setLiquidator(address)": FunctionFragment;
    "setMinimumMargin(address,uint256)": FunctionFragment;
    "setUniswapFeeTier(address,uint24)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unregisterOracleProvider(address)": FunctionFragment;
    "updateDao(address)": FunctionFragment;
    "updateLeverageLevel(address,uint8)": FunctionFragment;
    "updateTakeProfitBPSRange(address,uint32,uint32)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "appendInterestRateRecord"
      | "calculateInterest"
      | "createMarket"
      | "currentInterestRate"
      | "dao"
      | "getEarningDistributionThreshold"
      | "getFlashLoanFeeRate"
      | "getInterestRateRecords"
      | "getMarket"
      | "getMarkets"
      | "getMarketsBySettlmentToken"
      | "getMinimumMargin"
      | "getOracleProviderProperties"
      | "getUniswapFeeTier"
      | "isRegisteredMarket"
      | "isRegisteredOracleProvider"
      | "isRegisteredSettlementToken"
      | "keeperFeePayer"
      | "liquidator"
      | "parameters"
      | "registerOracleProvider"
      | "registerSettlementToken"
      | "registeredOracleProviders"
      | "registeredSettlementTokens"
      | "removeLastInterestRateRecord"
      | "setEarningDistributionThreshold"
      | "setFlashLoanFeeRate"
      | "setKeeperFeePayer"
      | "setLiquidator"
      | "setMinimumMargin"
      | "setUniswapFeeTier"
      | "setVault"
      | "treasury"
      | "unregisterOracleProvider"
      | "updateDao"
      | "updateLeverageLevel"
      | "updateTakeProfitBPSRange"
      | "updateTreasury"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "appendInterestRateRecord",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentInterestRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEarningDistributionThreshold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFeeRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRateRecords",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsBySettlmentToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumMargin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleProviderProperties",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapFeeTier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredSettlementToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperFeePayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOracleProvider",
    values: [
      PromiseOrValue<string>,
      IOracleProviderRegistry.OracleProviderPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSettlementToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredOracleProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredSettlementTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLastInterestRateRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarningDistributionThreshold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFeeRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperFeePayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumMargin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapFeeTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDao",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLeverageLevel",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTakeProfitBPSRange",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "appendInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsBySettlmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleProviderProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredOracleProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredSettlementTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLastInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateLeverageLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTakeProfitBPSRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "InterestRateRecordAppended(address,uint256,uint256)": EventFragment;
    "LastInterestRateRecordRemoved(address,uint256,uint256)": EventFragment;
    "MarketCreated(address,address,address)": EventFragment;
    "OracleProviderRegistered(address,tuple)": EventFragment;
    "OracleProviderUnregistered(address)": EventFragment;
    "SetEarningDistributionThreshold(address,uint256)": EventFragment;
    "SetFlashLoanFeeRate(address,uint256)": EventFragment;
    "SetKeeperFeePayer(address)": EventFragment;
    "SetLiquidator(address)": EventFragment;
    "SetMinimumMargin(address,uint256)": EventFragment;
    "SetUniswapFeeTier(address,uint24)": EventFragment;
    "SetVault(address)": EventFragment;
    "SettlementTokenRegistered(address,uint256,uint256,uint256,uint256,uint24)": EventFragment;
    "UpdateDao(address)": EventFragment;
    "UpdateLeverageLevel(address,uint8)": EventFragment;
    "UpdateTakeProfitBPSRange(address,uint32,uint32)": EventFragment;
    "UpdateTreasury(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InterestRateRecordAppended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LastInterestRateRecordRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleProviderRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleProviderUnregistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetEarningDistributionThreshold"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFlashLoanFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeperFeePayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinimumMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUniswapFeeTier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLeverageLevel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTakeProfitBPSRange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasury"): EventFragment;
}

export interface InterestRateRecordAppendedEventObject {
  token: string;
  annualRateBPS: BigNumber;
  beginTimestamp: BigNumber;
}
export type InterestRateRecordAppendedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InterestRateRecordAppendedEventObject
>;

export type InterestRateRecordAppendedEventFilter =
  TypedEventFilter<InterestRateRecordAppendedEvent>;

export interface LastInterestRateRecordRemovedEventObject {
  token: string;
  annualRateBPS: BigNumber;
  beginTimestamp: BigNumber;
}
export type LastInterestRateRecordRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LastInterestRateRecordRemovedEventObject
>;

export type LastInterestRateRecordRemovedEventFilter =
  TypedEventFilter<LastInterestRateRecordRemovedEvent>;

export interface MarketCreatedEventObject {
  oracleProvider: string;
  settlementToken: string;
  market: string;
}
export type MarketCreatedEvent = TypedEvent<
  [string, string, string],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface OracleProviderRegisteredEventObject {
  oracleProvider: string;
  properties: IOracleProviderRegistry.OracleProviderPropertiesStructOutput;
}
export type OracleProviderRegisteredEvent = TypedEvent<
  [string, IOracleProviderRegistry.OracleProviderPropertiesStructOutput],
  OracleProviderRegisteredEventObject
>;

export type OracleProviderRegisteredEventFilter =
  TypedEventFilter<OracleProviderRegisteredEvent>;

export interface OracleProviderUnregisteredEventObject {
  oracleProvider: string;
}
export type OracleProviderUnregisteredEvent = TypedEvent<
  [string],
  OracleProviderUnregisteredEventObject
>;

export type OracleProviderUnregisteredEventFilter =
  TypedEventFilter<OracleProviderUnregisteredEvent>;

export interface SetEarningDistributionThresholdEventObject {
  token: string;
  earningDistributionThreshold: BigNumber;
}
export type SetEarningDistributionThresholdEvent = TypedEvent<
  [string, BigNumber],
  SetEarningDistributionThresholdEventObject
>;

export type SetEarningDistributionThresholdEventFilter =
  TypedEventFilter<SetEarningDistributionThresholdEvent>;

export interface SetFlashLoanFeeRateEventObject {
  token: string;
  flashLoanFeeRate: BigNumber;
}
export type SetFlashLoanFeeRateEvent = TypedEvent<
  [string, BigNumber],
  SetFlashLoanFeeRateEventObject
>;

export type SetFlashLoanFeeRateEventFilter =
  TypedEventFilter<SetFlashLoanFeeRateEvent>;

export interface SetKeeperFeePayerEventObject {
  keeperFeePayer: string;
}
export type SetKeeperFeePayerEvent = TypedEvent<
  [string],
  SetKeeperFeePayerEventObject
>;

export type SetKeeperFeePayerEventFilter =
  TypedEventFilter<SetKeeperFeePayerEvent>;

export interface SetLiquidatorEventObject {
  liquidator: string;
}
export type SetLiquidatorEvent = TypedEvent<[string], SetLiquidatorEventObject>;

export type SetLiquidatorEventFilter = TypedEventFilter<SetLiquidatorEvent>;

export interface SetMinimumMarginEventObject {
  token: string;
  minimumMargin: BigNumber;
}
export type SetMinimumMarginEvent = TypedEvent<
  [string, BigNumber],
  SetMinimumMarginEventObject
>;

export type SetMinimumMarginEventFilter =
  TypedEventFilter<SetMinimumMarginEvent>;

export interface SetUniswapFeeTierEventObject {
  token: string;
  uniswapFeeTier: number;
}
export type SetUniswapFeeTierEvent = TypedEvent<
  [string, number],
  SetUniswapFeeTierEventObject
>;

export type SetUniswapFeeTierEventFilter =
  TypedEventFilter<SetUniswapFeeTierEvent>;

export interface SetVaultEventObject {
  vault: string;
}
export type SetVaultEvent = TypedEvent<[string], SetVaultEventObject>;

export type SetVaultEventFilter = TypedEventFilter<SetVaultEvent>;

export interface SettlementTokenRegisteredEventObject {
  token: string;
  minimumMargin: BigNumber;
  interestRate: BigNumber;
  flashLoanFeeRate: BigNumber;
  earningDistributionThreshold: BigNumber;
  uniswapFeeTier: number;
}
export type SettlementTokenRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  SettlementTokenRegisteredEventObject
>;

export type SettlementTokenRegisteredEventFilter =
  TypedEventFilter<SettlementTokenRegisteredEvent>;

export interface UpdateDaoEventObject {
  dao: string;
}
export type UpdateDaoEvent = TypedEvent<[string], UpdateDaoEventObject>;

export type UpdateDaoEventFilter = TypedEventFilter<UpdateDaoEvent>;

export interface UpdateLeverageLevelEventObject {
  oracleProvider: string;
  level: number;
}
export type UpdateLeverageLevelEvent = TypedEvent<
  [string, number],
  UpdateLeverageLevelEventObject
>;

export type UpdateLeverageLevelEventFilter =
  TypedEventFilter<UpdateLeverageLevelEvent>;

export interface UpdateTakeProfitBPSRangeEventObject {
  oracleProvider: string;
  minTakeProfitBPS: number;
  maxTakeProfitBPS: number;
}
export type UpdateTakeProfitBPSRangeEvent = TypedEvent<
  [string, number, number],
  UpdateTakeProfitBPSRangeEventObject
>;

export type UpdateTakeProfitBPSRangeEventFilter =
  TypedEventFilter<UpdateTakeProfitBPSRangeEvent>;

export interface UpdateTreasuryEventObject {
  treasury: string;
}
export type UpdateTreasuryEvent = TypedEvent<
  [string],
  UpdateTreasuryEventObject
>;

export type UpdateTreasuryEventFilter = TypedEventFilter<UpdateTreasuryEvent>;

export interface ChromaticMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * This function can only be called by the DAO address.
     * Appends an interest rate record for a settlement token.
     * @param annualRateBPS The annual interest rate in basis points (BPS).
     * @param beginTimestamp The timestamp when the interest rate record begins.
     * @param token The address of the settlement token.
     */
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Calculates the interest accrued for a given token and amount within a specified time range.
     * @param amount The amount of the token.
     * @param from The starting timestamp (inclusive) of the time range.
     * @param to The ending timestamp (exclusive) of the time range.
     * @param token The address of the token.
     */
    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
     * Creates a new market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the current interest rate for a settlement token.
     * @param token The address of the settlement token.
     */
    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { annualRateBPS: BigNumber }>;

    /**
     * Returns the address of the DAO.
     */
    dao(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the earning distribution threshold for a settlement token.
     * @param token The address of the settlement token.
     */
    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets the flash loan fee rate for a settlement token.
     * @param token The address of the settlement token.
     */
    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets all the interest rate records for a settlement token.
     * @param token The address of the settlement token.
     */
    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[InterestRate.RecordStructOutput[]]>;

    /**
     * Returns the address of a market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns an array of all market addresses.
     */
    getMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Returns an array of market addresses associated with a settlement token.
     * @param settlementToken The address of the settlement token.
     */
    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    /**
     * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
     * Gets the minimum margin for a settlement token.
     * @param token The address of the settlement token.
     */
    getMinimumMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Retrieves the properties of an oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderProperties(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IOracleProviderRegistry.OracleProviderPropertiesStructOutput]>;

    /**
     * Gets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     */
    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Checks if a market is registered.
     * @param market The address of the market.
     */
    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks if a settlement token is registered.
     * @param token The address of the settlement token to check.
     */
    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns the address of the keeper fee payer.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the address of the liquidator.
     */
    liquidator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { oracleProvider: string; settlementToken: string }
    >;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Registers a new settlement token.
     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
     * @param interestRate The interest rate for the settlement token.
     * @param minimumMargin The minimum margin for the settlement token.
     * @param token The address of the settlement token to register.
     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
     */
    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * Gets the list of registered settlement tokens.
     */
    registeredSettlementTokens(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * This function can only be called by the DAO address.
     * Removes the last interest rate record for a settlement token.
     * @param token The address of the settlement token.
     */
    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the earning distribution threshold for a settlement token.
     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
     * @param token The address of the settlement token.
     */
    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the flash loan fee rate for a settlement token.
     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
     * @param token The address of the settlement token.
     */
    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetKeeperFeePayer` error if the keeper fee payer address has already been set.
     * Sets the keeper fee payer address.
     * @param keeperFeePayer The keeper fee payer address.
     */
    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetLiquidator` error if the liquidator address has already been set.
     * Sets the liquidator address.
     * @param liquidator The liquidator address.
     */
    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the minimum margin for a settlement token.
     * @param minimumMargin The new minimum margin for the settlement token.
     * @param token The address of the settlement token.
     */
    setMinimumMargin(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
     */
    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
     * Sets the vault address.
     * @param vault The vault address.
     */
    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the DAO treasury.
     */
    treasury(overrides?: CallOverrides): Promise<[string]>;

    /**
     * This function can only be called by the DAO address.
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO address.
     * @param dao The new DAO address.
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the leverage level of an oracle provider in the registry.
     * @param level The new leverage level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    updateLeverageLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the take-profit basis points range of an oracle provider.
     * @param maxTakeProfitBPS The new maximum take-profit basis points.
     * @param minTakeProfitBPS The new minimum take-profit basis points.
     * @param oracleProvider The address of the oracle provider.
     */
    updateTakeProfitBPSRange(
      oracleProvider: PromiseOrValue<string>,
      minTakeProfitBPS: PromiseOrValue<BigNumberish>,
      maxTakeProfitBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO treasury address.
     * @param treasury The new DAO treasury address.
     */
    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the vault.
     */
    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * This function can only be called by the DAO address.
   * Appends an interest rate record for a settlement token.
   * @param annualRateBPS The annual interest rate in basis points (BPS).
   * @param beginTimestamp The timestamp when the interest rate record begins.
   * @param token The address of the settlement token.
   */
  appendInterestRateRecord(
    token: PromiseOrValue<string>,
    annualRateBPS: PromiseOrValue<BigNumberish>,
    beginTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Calculates the interest accrued for a given token and amount within a specified time range.
   * @param amount The amount of the token.
   * @param from The starting timestamp (inclusive) of the time range.
   * @param to The ending timestamp (exclusive) of the time range.
   * @param token The address of the token.
   */
  calculateInterest(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
   * Creates a new market associated with an oracle provider and settlement token.
   * @param oracleProvider The address of the oracle provider.
   * @param settlementToken The address of the settlement token.
   */
  createMarket(
    oracleProvider: PromiseOrValue<string>,
    settlementToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the current interest rate for a settlement token.
   * @param token The address of the settlement token.
   */
  currentInterestRate(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the address of the DAO.
   */
  dao(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the earning distribution threshold for a settlement token.
   * @param token The address of the settlement token.
   */
  getEarningDistributionThreshold(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the flash loan fee rate for a settlement token.
   * @param token The address of the settlement token.
   */
  getFlashLoanFeeRate(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets all the interest rate records for a settlement token.
   * @param token The address of the settlement token.
   */
  getInterestRateRecords(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<InterestRate.RecordStructOutput[]>;

  /**
   * Returns the address of a market associated with an oracle provider and settlement token.
   * @param oracleProvider The address of the oracle provider.
   * @param settlementToken The address of the settlement token.
   */
  getMarket(
    oracleProvider: PromiseOrValue<string>,
    settlementToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns an array of all market addresses.
   */
  getMarkets(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Returns an array of market addresses associated with a settlement token.
   * @param settlementToken The address of the settlement token.
   */
  getMarketsBySettlmentToken(
    settlementToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  /**
   * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
   * Gets the minimum margin for a settlement token.
   * @param token The address of the settlement token.
   */
  getMinimumMargin(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieves the properties of an oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  getOracleProviderProperties(
    oracleProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IOracleProviderRegistry.OracleProviderPropertiesStructOutput>;

  /**
   * Gets the Uniswap fee tier for a settlement token.
   * @param token The address of the settlement token.
   */
  getUniswapFeeTier(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * Checks if a market is registered.
   * @param market The address of the market.
   */
  isRegisteredMarket(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks if an oracle provider is registered.
   * @param oracleProvider The address of the oracle provider to check.
   */
  isRegisteredOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks if a settlement token is registered.
   * @param token The address of the settlement token to check.
   */
  isRegisteredSettlementToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns the address of the keeper fee payer.
   */
  keeperFeePayer(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the liquidator.
   */
  liquidator(overrides?: CallOverrides): Promise<string>;

  /**
   * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
   * Get the parameters to be used in constructing the market, set transiently during market creation.
   */
  parameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { oracleProvider: string; settlementToken: string }
  >;

  registerOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    properties: IOracleProviderRegistry.OracleProviderPropertiesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Registers a new settlement token.
   * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
   * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
   * @param interestRate The interest rate for the settlement token.
   * @param minimumMargin The minimum margin for the settlement token.
   * @param token The address of the settlement token to register.
   * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
   */
  registerSettlementToken(
    token: PromiseOrValue<string>,
    minimumMargin: PromiseOrValue<BigNumberish>,
    interestRate: PromiseOrValue<BigNumberish>,
    flashLoanFeeRate: PromiseOrValue<BigNumberish>,
    earningDistributionThreshold: PromiseOrValue<BigNumberish>,
    uniswapFeeTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the registered oracle providers.
   */
  registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the list of registered settlement tokens.
   */
  registeredSettlementTokens(overrides?: CallOverrides): Promise<string[]>;

  /**
   * This function can only be called by the DAO address.
   * Removes the last interest rate record for a settlement token.
   * @param token The address of the settlement token.
   */
  removeLastInterestRateRecord(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Sets the earning distribution threshold for a settlement token.
   * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
   * @param token The address of the settlement token.
   */
  setEarningDistributionThreshold(
    token: PromiseOrValue<string>,
    earningDistributionThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Sets the flash loan fee rate for a settlement token.
   * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
   * @param token The address of the settlement token.
   */
  setFlashLoanFeeRate(
    token: PromiseOrValue<string>,
    flashLoanFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.      Throws an `AlreadySetKeeperFeePayer` error if the keeper fee payer address has already been set.
   * Sets the keeper fee payer address.
   * @param keeperFeePayer The keeper fee payer address.
   */
  setKeeperFeePayer(
    _keeperFeePayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.      Throws an `AlreadySetLiquidator` error if the liquidator address has already been set.
   * Sets the liquidator address.
   * @param liquidator The liquidator address.
   */
  setLiquidator(
    _liquidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Sets the minimum margin for a settlement token.
   * @param minimumMargin The new minimum margin for the settlement token.
   * @param token The address of the settlement token.
   */
  setMinimumMargin(
    token: PromiseOrValue<string>,
    minimumMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Sets the Uniswap fee tier for a settlement token.
   * @param token The address of the settlement token.
   * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
   */
  setUniswapFeeTier(
    token: PromiseOrValue<string>,
    uniswapFeeTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
   * Sets the vault address.
   * @param vault The vault address.
   */
  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the DAO treasury.
   */
  treasury(overrides?: CallOverrides): Promise<string>;

  /**
   * This function can only be called by the DAO address.
   * Unregisters an oracle provider.
   * @param oracleProvider The address of the oracle provider to unregister.
   */
  unregisterOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Updates the DAO address.
   * @param dao The new DAO address.
   */
  updateDao(
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO and registered oracle providers.
   * Updates the leverage level of an oracle provider in the registry.
   * @param level The new leverage level to be set for the oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  updateLeverageLevel(
    oracleProvider: PromiseOrValue<string>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO and registered oracle providers.
   * Updates the take-profit basis points range of an oracle provider.
   * @param maxTakeProfitBPS The new maximum take-profit basis points.
   * @param minTakeProfitBPS The new minimum take-profit basis points.
   * @param oracleProvider The address of the oracle provider.
   */
  updateTakeProfitBPSRange(
    oracleProvider: PromiseOrValue<string>,
    minTakeProfitBPS: PromiseOrValue<BigNumberish>,
    maxTakeProfitBPS: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by the DAO address.
   * Updates the DAO treasury address.
   * @param treasury The new DAO treasury address.
   */
  updateTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the vault.
   */
  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * This function can only be called by the DAO address.
     * Appends an interest rate record for a settlement token.
     * @param annualRateBPS The annual interest rate in basis points (BPS).
     * @param beginTimestamp The timestamp when the interest rate record begins.
     * @param token The address of the settlement token.
     */
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Calculates the interest accrued for a given token and amount within a specified time range.
     * @param amount The amount of the token.
     * @param from The starting timestamp (inclusive) of the time range.
     * @param to The ending timestamp (exclusive) of the time range.
     * @param token The address of the token.
     */
    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
     * Creates a new market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the current interest rate for a settlement token.
     * @param token The address of the settlement token.
     */
    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the DAO.
     */
    dao(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the earning distribution threshold for a settlement token.
     * @param token The address of the settlement token.
     */
    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the flash loan fee rate for a settlement token.
     * @param token The address of the settlement token.
     */
    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all the interest rate records for a settlement token.
     * @param token The address of the settlement token.
     */
    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<InterestRate.RecordStructOutput[]>;

    /**
     * Returns the address of a market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns an array of all market addresses.
     */
    getMarkets(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Returns an array of market addresses associated with a settlement token.
     * @param settlementToken The address of the settlement token.
     */
    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    /**
     * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
     * Gets the minimum margin for a settlement token.
     * @param token The address of the settlement token.
     */
    getMinimumMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the properties of an oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderProperties(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IOracleProviderRegistry.OracleProviderPropertiesStructOutput>;

    /**
     * Gets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     */
    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Checks if a market is registered.
     * @param market The address of the market.
     */
    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks if a settlement token is registered.
     * @param token The address of the settlement token to check.
     */
    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns the address of the keeper fee payer.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the liquidator.
     */
    liquidator(overrides?: CallOverrides): Promise<string>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { oracleProvider: string; settlementToken: string }
    >;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Registers a new settlement token.
     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
     * @param interestRate The interest rate for the settlement token.
     * @param minimumMargin The minimum margin for the settlement token.
     * @param token The address of the settlement token to register.
     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
     */
    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the list of registered settlement tokens.
     */
    registeredSettlementTokens(overrides?: CallOverrides): Promise<string[]>;

    /**
     * This function can only be called by the DAO address.
     * Removes the last interest rate record for a settlement token.
     * @param token The address of the settlement token.
     */
    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Sets the earning distribution threshold for a settlement token.
     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
     * @param token The address of the settlement token.
     */
    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Sets the flash loan fee rate for a settlement token.
     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
     * @param token The address of the settlement token.
     */
    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetKeeperFeePayer` error if the keeper fee payer address has already been set.
     * Sets the keeper fee payer address.
     * @param keeperFeePayer The keeper fee payer address.
     */
    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetLiquidator` error if the liquidator address has already been set.
     * Sets the liquidator address.
     * @param liquidator The liquidator address.
     */
    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Sets the minimum margin for a settlement token.
     * @param minimumMargin The new minimum margin for the settlement token.
     * @param token The address of the settlement token.
     */
    setMinimumMargin(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Sets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
     */
    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
     * Sets the vault address.
     * @param vault The vault address.
     */
    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the address of the DAO treasury.
     */
    treasury(overrides?: CallOverrides): Promise<string>;

    /**
     * This function can only be called by the DAO address.
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO address.
     * @param dao The new DAO address.
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the leverage level of an oracle provider in the registry.
     * @param level The new leverage level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    updateLeverageLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the take-profit basis points range of an oracle provider.
     * @param maxTakeProfitBPS The new maximum take-profit basis points.
     * @param minTakeProfitBPS The new minimum take-profit basis points.
     * @param oracleProvider The address of the oracle provider.
     */
    updateTakeProfitBPSRange(
      oracleProvider: PromiseOrValue<string>,
      minTakeProfitBPS: PromiseOrValue<BigNumberish>,
      maxTakeProfitBPS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO treasury address.
     * @param treasury The new DAO treasury address.
     */
    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the address of the vault.
     */
    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InterestRateRecordAppended(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): InterestRateRecordAppendedEventFilter;
    InterestRateRecordAppended(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): InterestRateRecordAppendedEventFilter;

    "LastInterestRateRecordRemoved(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): LastInterestRateRecordRemovedEventFilter;
    LastInterestRateRecordRemoved(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): LastInterestRateRecordRemovedEventFilter;

    "MarketCreated(address,address,address)"(
      oracleProvider?: PromiseOrValue<string> | null,
      settlementToken?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null
    ): MarketCreatedEventFilter;
    MarketCreated(
      oracleProvider?: PromiseOrValue<string> | null,
      settlementToken?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null
    ): MarketCreatedEventFilter;

    "OracleProviderRegistered(address,tuple)"(
      oracleProvider?: PromiseOrValue<string> | null,
      properties?: null
    ): OracleProviderRegisteredEventFilter;
    OracleProviderRegistered(
      oracleProvider?: PromiseOrValue<string> | null,
      properties?: null
    ): OracleProviderRegisteredEventFilter;

    "OracleProviderUnregistered(address)"(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;
    OracleProviderUnregistered(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;

    "SetEarningDistributionThreshold(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      earningDistributionThreshold?: PromiseOrValue<BigNumberish> | null
    ): SetEarningDistributionThresholdEventFilter;
    SetEarningDistributionThreshold(
      token?: PromiseOrValue<string> | null,
      earningDistributionThreshold?: PromiseOrValue<BigNumberish> | null
    ): SetEarningDistributionThresholdEventFilter;

    "SetFlashLoanFeeRate(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      flashLoanFeeRate?: PromiseOrValue<BigNumberish> | null
    ): SetFlashLoanFeeRateEventFilter;
    SetFlashLoanFeeRate(
      token?: PromiseOrValue<string> | null,
      flashLoanFeeRate?: PromiseOrValue<BigNumberish> | null
    ): SetFlashLoanFeeRateEventFilter;

    "SetKeeperFeePayer(address)"(
      keeperFeePayer?: PromiseOrValue<string> | null
    ): SetKeeperFeePayerEventFilter;
    SetKeeperFeePayer(
      keeperFeePayer?: PromiseOrValue<string> | null
    ): SetKeeperFeePayerEventFilter;

    "SetLiquidator(address)"(
      liquidator?: PromiseOrValue<string> | null
    ): SetLiquidatorEventFilter;
    SetLiquidator(
      liquidator?: PromiseOrValue<string> | null
    ): SetLiquidatorEventFilter;

    "SetMinimumMargin(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      minimumMargin?: PromiseOrValue<BigNumberish> | null
    ): SetMinimumMarginEventFilter;
    SetMinimumMargin(
      token?: PromiseOrValue<string> | null,
      minimumMargin?: PromiseOrValue<BigNumberish> | null
    ): SetMinimumMarginEventFilter;

    "SetUniswapFeeTier(address,uint24)"(
      token?: PromiseOrValue<string> | null,
      uniswapFeeTier?: PromiseOrValue<BigNumberish> | null
    ): SetUniswapFeeTierEventFilter;
    SetUniswapFeeTier(
      token?: PromiseOrValue<string> | null,
      uniswapFeeTier?: PromiseOrValue<BigNumberish> | null
    ): SetUniswapFeeTierEventFilter;

    "SetVault(address)"(
      vault?: PromiseOrValue<string> | null
    ): SetVaultEventFilter;
    SetVault(vault?: PromiseOrValue<string> | null): SetVaultEventFilter;

    "SettlementTokenRegistered(address,uint256,uint256,uint256,uint256,uint24)"(
      token?: PromiseOrValue<string> | null,
      minimumMargin?: PromiseOrValue<BigNumberish> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null,
      flashLoanFeeRate?: null,
      earningDistributionThreshold?: null,
      uniswapFeeTier?: null
    ): SettlementTokenRegisteredEventFilter;
    SettlementTokenRegistered(
      token?: PromiseOrValue<string> | null,
      minimumMargin?: PromiseOrValue<BigNumberish> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null,
      flashLoanFeeRate?: null,
      earningDistributionThreshold?: null,
      uniswapFeeTier?: null
    ): SettlementTokenRegisteredEventFilter;

    "UpdateDao(address)"(
      dao?: PromiseOrValue<string> | null
    ): UpdateDaoEventFilter;
    UpdateDao(dao?: PromiseOrValue<string> | null): UpdateDaoEventFilter;

    "UpdateLeverageLevel(address,uint8)"(
      oracleProvider?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null
    ): UpdateLeverageLevelEventFilter;
    UpdateLeverageLevel(
      oracleProvider?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null
    ): UpdateLeverageLevelEventFilter;

    "UpdateTakeProfitBPSRange(address,uint32,uint32)"(
      oracleProvider?: PromiseOrValue<string> | null,
      minTakeProfitBPS?: PromiseOrValue<BigNumberish> | null,
      maxTakeProfitBPS?: PromiseOrValue<BigNumberish> | null
    ): UpdateTakeProfitBPSRangeEventFilter;
    UpdateTakeProfitBPSRange(
      oracleProvider?: PromiseOrValue<string> | null,
      minTakeProfitBPS?: PromiseOrValue<BigNumberish> | null,
      maxTakeProfitBPS?: PromiseOrValue<BigNumberish> | null
    ): UpdateTakeProfitBPSRangeEventFilter;

    "UpdateTreasury(address)"(
      treasury?: PromiseOrValue<string> | null
    ): UpdateTreasuryEventFilter;
    UpdateTreasury(
      treasury?: PromiseOrValue<string> | null
    ): UpdateTreasuryEventFilter;
  };

  estimateGas: {
    /**
     * This function can only be called by the DAO address.
     * Appends an interest rate record for a settlement token.
     * @param annualRateBPS The annual interest rate in basis points (BPS).
     * @param beginTimestamp The timestamp when the interest rate record begins.
     * @param token The address of the settlement token.
     */
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Calculates the interest accrued for a given token and amount within a specified time range.
     * @param amount The amount of the token.
     * @param from The starting timestamp (inclusive) of the time range.
     * @param to The ending timestamp (exclusive) of the time range.
     * @param token The address of the token.
     */
    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
     * Creates a new market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the current interest rate for a settlement token.
     * @param token The address of the settlement token.
     */
    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the DAO.
     */
    dao(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the earning distribution threshold for a settlement token.
     * @param token The address of the settlement token.
     */
    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the flash loan fee rate for a settlement token.
     * @param token The address of the settlement token.
     */
    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets all the interest rate records for a settlement token.
     * @param token The address of the settlement token.
     */
    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of a market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an array of all market addresses.
     */
    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns an array of market addresses associated with a settlement token.
     * @param settlementToken The address of the settlement token.
     */
    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
     * Gets the minimum margin for a settlement token.
     * @param token The address of the settlement token.
     */
    getMinimumMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the properties of an oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderProperties(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     */
    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if a market is registered.
     * @param market The address of the market.
     */
    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if a settlement token is registered.
     * @param token The address of the settlement token to check.
     */
    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the keeper fee payer.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the liquidator.
     */
    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Registers a new settlement token.
     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
     * @param interestRate The interest rate for the settlement token.
     * @param minimumMargin The minimum margin for the settlement token.
     * @param token The address of the settlement token to register.
     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
     */
    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the list of registered settlement tokens.
     */
    registeredSettlementTokens(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Removes the last interest rate record for a settlement token.
     * @param token The address of the settlement token.
     */
    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Sets the earning distribution threshold for a settlement token.
     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
     * @param token The address of the settlement token.
     */
    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Sets the flash loan fee rate for a settlement token.
     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
     * @param token The address of the settlement token.
     */
    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetKeeperFeePayer` error if the keeper fee payer address has already been set.
     * Sets the keeper fee payer address.
     * @param keeperFeePayer The keeper fee payer address.
     */
    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetLiquidator` error if the liquidator address has already been set.
     * Sets the liquidator address.
     * @param liquidator The liquidator address.
     */
    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Sets the minimum margin for a settlement token.
     * @param minimumMargin The new minimum margin for the settlement token.
     * @param token The address of the settlement token.
     */
    setMinimumMargin(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Sets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
     */
    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
     * Sets the vault address.
     * @param vault The vault address.
     */
    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the DAO treasury.
     */
    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO address.
     * @param dao The new DAO address.
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the leverage level of an oracle provider in the registry.
     * @param level The new leverage level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    updateLeverageLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the take-profit basis points range of an oracle provider.
     * @param maxTakeProfitBPS The new maximum take-profit basis points.
     * @param minTakeProfitBPS The new minimum take-profit basis points.
     * @param oracleProvider The address of the oracle provider.
     */
    updateTakeProfitBPSRange(
      oracleProvider: PromiseOrValue<string>,
      minTakeProfitBPS: PromiseOrValue<BigNumberish>,
      maxTakeProfitBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO treasury address.
     * @param treasury The new DAO treasury address.
     */
    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the vault.
     */
    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * This function can only be called by the DAO address.
     * Appends an interest rate record for a settlement token.
     * @param annualRateBPS The annual interest rate in basis points (BPS).
     * @param beginTimestamp The timestamp when the interest rate record begins.
     * @param token The address of the settlement token.
     */
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Calculates the interest accrued for a given token and amount within a specified time range.
     * @param amount The amount of the token.
     * @param from The starting timestamp (inclusive) of the time range.
     * @param to The ending timestamp (exclusive) of the time range.
     * @param token The address of the token.
     */
    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
     * Creates a new market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the current interest rate for a settlement token.
     * @param token The address of the settlement token.
     */
    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the DAO.
     */
    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the earning distribution threshold for a settlement token.
     * @param token The address of the settlement token.
     */
    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the flash loan fee rate for a settlement token.
     * @param token The address of the settlement token.
     */
    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all the interest rate records for a settlement token.
     * @param token The address of the settlement token.
     */
    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of a market associated with an oracle provider and settlement token.
     * @param oracleProvider The address of the oracle provider.
     * @param settlementToken The address of the settlement token.
     */
    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns an array of all market addresses.
     */
    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns an array of market addresses associated with a settlement token.
     * @param settlementToken The address of the settlement token.
     */
    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
     * Gets the minimum margin for a settlement token.
     * @param token The address of the settlement token.
     */
    getMinimumMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the properties of an oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderProperties(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     */
    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a market is registered.
     * @param market The address of the market.
     */
    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a settlement token is registered.
     * @param token The address of the settlement token to check.
     */
    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the keeper fee payer.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the liquidator.
     */
    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Registers a new settlement token.
     * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
     * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
     * @param interestRate The interest rate for the settlement token.
     * @param minimumMargin The minimum margin for the settlement token.
     * @param token The address of the settlement token to register.
     * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
     */
    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the list of registered settlement tokens.
     */
    registeredSettlementTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Removes the last interest rate record for a settlement token.
     * @param token The address of the settlement token.
     */
    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the earning distribution threshold for a settlement token.
     * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
     * @param token The address of the settlement token.
     */
    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the flash loan fee rate for a settlement token.
     * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
     * @param token The address of the settlement token.
     */
    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetKeeperFeePayer` error if the keeper fee payer address has already been set.
     * Sets the keeper fee payer address.
     * @param keeperFeePayer The keeper fee payer address.
     */
    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetLiquidator` error if the liquidator address has already been set.
     * Sets the liquidator address.
     * @param liquidator The liquidator address.
     */
    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the minimum margin for a settlement token.
     * @param minimumMargin The new minimum margin for the settlement token.
     * @param token The address of the settlement token.
     */
    setMinimumMargin(
      token: PromiseOrValue<string>,
      minimumMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Sets the Uniswap fee tier for a settlement token.
     * @param token The address of the settlement token.
     * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
     */
    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
     * Sets the vault address.
     * @param vault The vault address.
     */
    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the DAO treasury.
     */
    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO address.
     * @param dao The new DAO address.
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the leverage level of an oracle provider in the registry.
     * @param level The new leverage level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    updateLeverageLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO and registered oracle providers.
     * Updates the take-profit basis points range of an oracle provider.
     * @param maxTakeProfitBPS The new maximum take-profit basis points.
     * @param minTakeProfitBPS The new minimum take-profit basis points.
     * @param oracleProvider The address of the oracle provider.
     */
    updateTakeProfitBPSRange(
      oracleProvider: PromiseOrValue<string>,
      minTakeProfitBPS: PromiseOrValue<BigNumberish>,
      maxTakeProfitBPS: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by the DAO address.
     * Updates the DAO treasury address.
     * @param treasury The new DAO treasury address.
     */
    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the vault.
     */
    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
