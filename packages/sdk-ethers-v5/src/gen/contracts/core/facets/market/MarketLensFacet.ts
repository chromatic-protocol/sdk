/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type ClaimableLiquidityStruct = {
  mintingTokenAmountRequested: BigNumberish;
  mintingCLBTokenAmount: BigNumberish;
  burningCLBTokenAmountRequested: BigNumberish;
  burningCLBTokenAmount: BigNumberish;
  burningTokenAmount: BigNumberish;
};

export type ClaimableLiquidityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  mintingTokenAmountRequested: BigNumber;
  mintingCLBTokenAmount: BigNumber;
  burningCLBTokenAmountRequested: BigNumber;
  burningCLBTokenAmount: BigNumber;
  burningTokenAmount: BigNumber;
};

export type ClosingPositionStruct = {
  closeVersion: BigNumberish;
  totalQty: BigNumberish;
  totalEntryAmount: BigNumberish;
  totalMakerMargin: BigNumberish;
  totalTakerMargin: BigNumberish;
};

export type ClosingPositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  closeVersion: BigNumber;
  totalQty: BigNumber;
  totalEntryAmount: BigNumber;
  totalMakerMargin: BigNumber;
  totalTakerMargin: BigNumber;
};

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: string;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export type BinMarginStruct = {
  tradingFeeRate: BigNumberish;
  amount: BigNumberish;
};

export type BinMarginStructOutput = [number, BigNumber] & {
  tradingFeeRate: number;
  amount: BigNumber;
};

export type PositionStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  closeVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  closeTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  owner: string;
  liquidator: string;
  _binMargins: BinMarginStruct[];
  _feeProtocol: BigNumberish;
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  BinMarginStructOutput[],
  number
] & {
  id: BigNumber;
  openVersion: BigNumber;
  closeVersion: BigNumber;
  qty: BigNumber;
  openTimestamp: BigNumber;
  closeTimestamp: BigNumber;
  takerMargin: BigNumber;
  owner: string;
  liquidator: string;
  _binMargins: BinMarginStructOutput[];
  _feeProtocol: number;
};

export type LiquidityBinStatusStruct = {
  liquidity: BigNumberish;
  freeLiquidity: BigNumberish;
  binValue: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LiquidityBinStatusStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number
] & {
  liquidity: BigNumber;
  freeLiquidity: BigNumber;
  binValue: BigNumber;
  tradingFeeRate: number;
};

export type PendingLiquidityStruct = {
  oracleVersion: BigNumberish;
  mintingTokenAmountRequested: BigNumberish;
  burningCLBTokenAmountRequested: BigNumberish;
};

export type PendingLiquidityStructOutput = [BigNumber, BigNumber, BigNumber] & {
  oracleVersion: BigNumber;
  mintingTokenAmountRequested: BigNumber;
  burningCLBTokenAmountRequested: BigNumber;
};

export type PendingPositionStruct = {
  openVersion: BigNumberish;
  totalQty: BigNumberish;
  totalMakerMargin: BigNumberish;
  totalTakerMargin: BigNumberish;
};

export type PendingPositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  openVersion: BigNumber;
  totalQty: BigNumber;
  totalMakerMargin: BigNumber;
  totalTakerMargin: BigNumber;
};

export interface MarketLensFacetInterface extends utils.Interface {
  functions: {
    "claimableLiquidity(int16,uint256)": FunctionFragment;
    "claimableLiquidityBatch(int16[],uint256)": FunctionFragment;
    "closingPosition(int16)": FunctionFragment;
    "closingPositionBatch(int16[])": FunctionFragment;
    "getBinFreeLiquidity(int16)": FunctionFragment;
    "getBinLiquidity(int16)": FunctionFragment;
    "getBinValues(int16[])": FunctionFragment;
    "getLpReceipt(uint256)": FunctionFragment;
    "getLpReceipts(uint256[])": FunctionFragment;
    "getPosition(uint256)": FunctionFragment;
    "getPositions(uint256[])": FunctionFragment;
    "liquidityBinStatuses()": FunctionFragment;
    "pendingLiquidity(int16)": FunctionFragment;
    "pendingLiquidityBatch(int16[])": FunctionFragment;
    "pendingPosition(int16)": FunctionFragment;
    "pendingPositionBatch(int16[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimableLiquidity"
      | "claimableLiquidityBatch"
      | "closingPosition"
      | "closingPositionBatch"
      | "getBinFreeLiquidity"
      | "getBinLiquidity"
      | "getBinValues"
      | "getLpReceipt"
      | "getLpReceipts"
      | "getPosition"
      | "getPositions"
      | "liquidityBinStatuses"
      | "pendingLiquidity"
      | "pendingLiquidityBatch"
      | "pendingPosition"
      | "pendingPositionBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimableLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableLiquidityBatch",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closingPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closingPositionBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinFreeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinValues",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceipts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBinStatuses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLiquidityBatch",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingPositionBatch",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closingPositionBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinFreeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBinStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingPositionBatch",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketLensFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketLensFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ClaimableLiquidityStructOutput] & {
        liquidity: ClaimableLiquidityStructOutput;
      }
    >;

    /**
     * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
     */
    claimableLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ClaimableLiquidityStructOutput[]] & {
        liquidities: ClaimableLiquidityStructOutput[];
      }
    >;

    /**
     * Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.
     */
    closingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [ClosingPositionStructOutput] & { position: ClosingPositionStructOutput }
    >;

    /**
     * Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.
     */
    closingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [ClosingPositionStructOutput[]] & {
        positions: ClosingPositionStructOutput[];
      }
    >;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LpReceiptStructOutput] & { receipt: LpReceiptStructOutput }>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptIds The ID list of the liquidity receipt to retrieve.
     */
    getLpReceipts(
      receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [LpReceiptStructOutput[]] & { receipts: LpReceiptStructOutput[] }
    >;

    /**
     * Throws a `NotExistPosition` error if the position does not exist.
     * @param positionId The ID of the position to retrieve.
     */
    getPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[PositionStructOutput] & { position: PositionStructOutput }>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput[]] & { positions: PositionStructOutput[] }
    >;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<
      [LiquidityBinStatusStructOutput[]] & {
        statuses: LiquidityBinStatusStructOutput[];
      }
    >;

    /**
     * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
     */
    pendingLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [PendingLiquidityStructOutput] & {
        liquidity: PendingLiquidityStructOutput;
      }
    >;

    /**
     * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
     */
    pendingLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [PendingLiquidityStructOutput[]] & {
        liquidities: PendingLiquidityStructOutput[];
      }
    >;

    /**
     * Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.
     */
    pendingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [PendingPositionStructOutput] & { position: PendingPositionStructOutput }
    >;

    /**
     * Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.
     */
    pendingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [PendingPositionStructOutput[]] & {
        positions: PendingPositionStructOutput[];
      }
    >;
  };

  /**
   * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
   * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
   */
  claimableLiquidity(
    tradingFeeRate: BigNumberish,
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ClaimableLiquidityStructOutput>;

  /**
   * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
   * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
   */
  claimableLiquidityBatch(
    tradingFeeRates: BigNumberish[],
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ClaimableLiquidityStructOutput[]>;

  /**
   * Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.
   */
  closingPosition(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<ClosingPositionStructOutput>;

  /**
   * Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.
   */
  closingPositionBatch(
    tradingFeeRates: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<ClosingPositionStructOutput[]>;

  /**
   * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
   */
  getBinFreeLiquidity(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
   */
  getBinLiquidity(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
   * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
   */
  getBinValues(
    tradingFeeRates: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
   * @param receiptId The ID of the liquidity receipt to retrieve.
   */
  getLpReceipt(
    receiptId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LpReceiptStructOutput>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
   * @param receiptIds The ID list of the liquidity receipt to retrieve.
   */
  getLpReceipts(
    receiptIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<LpReceiptStructOutput[]>;

  /**
   * Throws a `NotExistPosition` error if the position does not exist.
   * @param positionId The ID of the position to retrieve.
   */
  getPosition(
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PositionStructOutput>;

  /**
   * Retrieves multiple positions by their IDs.
   * @param positionIds The IDs of the positions to retrieve.
   */
  getPositions(
    positionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<PositionStructOutput[]>;

  /**
   * Retrieves the liquidity bin statuses for the caller's liquidity pool.
   */
  liquidityBinStatuses(
    overrides?: CallOverrides
  ): Promise<LiquidityBinStatusStructOutput[]>;

  /**
   * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
   */
  pendingLiquidity(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PendingLiquidityStructOutput>;

  /**
   * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
   */
  pendingLiquidityBatch(
    tradingFeeRates: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<PendingLiquidityStructOutput[]>;

  /**
   * Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.
   */
  pendingPosition(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<PendingPositionStructOutput>;

  /**
   * Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.
   */
  pendingPositionBatch(
    tradingFeeRates: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<PendingPositionStructOutput[]>;

  callStatic: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ClaimableLiquidityStructOutput>;

    /**
     * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
     */
    claimableLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ClaimableLiquidityStructOutput[]>;

    /**
     * Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.
     */
    closingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ClosingPositionStructOutput>;

    /**
     * Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.
     */
    closingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<ClosingPositionStructOutput[]>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptIds The ID list of the liquidity receipt to retrieve.
     */
    getLpReceipts(
      receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Throws a `NotExistPosition` error if the position does not exist.
     * @param positionId The ID of the position to retrieve.
     */
    getPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PositionStructOutput[]>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<LiquidityBinStatusStructOutput[]>;

    /**
     * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
     */
    pendingLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PendingLiquidityStructOutput>;

    /**
     * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
     */
    pendingLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PendingLiquidityStructOutput[]>;

    /**
     * Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.
     */
    pendingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PendingPositionStructOutput>;

    /**
     * Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.
     */
    pendingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PendingPositionStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
     */
    claimableLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.
     */
    closingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.
     */
    closingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptIds The ID list of the liquidity receipt to retrieve.
     */
    getLpReceipts(
      receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistPosition` error if the position does not exist.
     * @param positionId The ID of the position to retrieve.
     */
    getPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
     */
    pendingLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
     */
    pendingLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.
     */
    pendingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.
     */
    pendingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
     */
    claimableLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the closing position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the closing position.
     */
    closingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the closing position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the closing position.
     */
    closingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
     * @param receiptIds The ID list of the liquidity receipt to retrieve.
     */
    getLpReceipts(
      receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistPosition` error if the position does not exist.
     * @param positionId The ID of the position to retrieve.
     */
    getPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
     */
    pendingLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
     */
    pendingLiquidityBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the pending position information for a specific trading fee rate from the associated LiquidityPool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the pending position.
     */
    pendingPosition(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the pending position information for multiple trading fee rates from the associated LiquidityPool.
     * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending position.
     */
    pendingPositionBatch(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
