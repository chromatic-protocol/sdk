/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: string;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export interface MarketLiquidityFacetInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,int16,bytes)": FunctionFragment;
    "addLiquidityBatch(address,int16[],uint256[],bytes)": FunctionFragment;
    "claimLiquidity(uint256,bytes)": FunctionFragment;
    "claimLiquidityBatch(uint256[],bytes)": FunctionFragment;
    "distributeEarningToBins(uint256,uint256)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "removeLiquidity(address,int16,bytes)": FunctionFragment;
    "removeLiquidityBatch(address,int16[],uint256[],bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "withdrawLiquidity(uint256,bytes)": FunctionFragment;
    "withdrawLiquidityBatch(uint256[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidityBatch"
      | "claimLiquidity"
      | "claimLiquidityBatch"
      | "distributeEarningToBins"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "removeLiquidity"
      | "removeLiquidityBatch"
      | "supportsInterface"
      | "withdrawLiquidity"
      | "withdrawLiquidityBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidity",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatch",
    values: [BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeEarningToBins",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatch",
    values: [BigNumberish[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeEarningToBins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatch",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)": EventFragment;
    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])": EventFragment;
    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)": EventFragment;
    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidityBatch"): EventFragment;
}

export interface AddLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type AddLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface AddLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type AddLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  AddLiquidityBatchEventObject
>;

export type AddLiquidityBatchEventFilter =
  TypedEventFilter<AddLiquidityBatchEvent>;

export interface ClaimLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  clbTokenAmount: BigNumber;
}
export type ClaimLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber],
  ClaimLiquidityEventObject
>;

export type ClaimLiquidityEventFilter = TypedEventFilter<ClaimLiquidityEvent>;

export interface ClaimLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  clbTokenAmounts: BigNumber[];
}
export type ClaimLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[]],
  ClaimLiquidityBatchEventObject
>;

export type ClaimLiquidityBatchEventFilter =
  TypedEventFilter<ClaimLiquidityBatchEvent>;

export interface RemoveLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type RemoveLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type RemoveLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  RemoveLiquidityBatchEventObject
>;

export type RemoveLiquidityBatchEventFilter =
  TypedEventFilter<RemoveLiquidityBatchEvent>;

export interface WithdrawLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  amount: BigNumber;
  burnedCLBTokenAmount: BigNumber;
}
export type WithdrawLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber, BigNumber],
  WithdrawLiquidityEventObject
>;

export type WithdrawLiquidityEventFilter =
  TypedEventFilter<WithdrawLiquidityEvent>;

export interface WithdrawLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  amounts: BigNumber[];
  burnedCLBTokenAmounts: BigNumber[];
}
export type WithdrawLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[], BigNumber[]],
  WithdrawLiquidityBatchEventObject
>;

export type WithdrawLiquidityBatchEventFilter =
  TypedEventFilter<WithdrawLiquidityBatchEvent>;

export interface MarketLiquidityFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketLiquidityFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred amount does not match the sum of amounts param.
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     */
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param value The amount of tokens being transferred
     */
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * This function is called by the liquidity provider to remove their liquidity from the market.      The liquidity provider must have previously added liquidity to the market.      Throws a `TooSmallAmount` error if the CLB tokne amount of liquidity to be removed is zero.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred CLB token amount does not match the expected amount (clbTokenAmounts param).
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds liquidity to the market.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the liquidity tokens.
   * @param tradingFeeRate The trading fee rate for the liquidity.
   */
  addLiquidity(
    recipient: string,
    tradingFeeRate: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws an `InvalidTransferredTokenAmount` error if the transferred amount does not match the sum of amounts param.
   * Adds liquidity to multiple liquidity bins of the market in a batch.
   * @param amounts An array of amounts to add as liquidity for each bin.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address of the recipient for each liquidity bin.
   * @param tradingFeeRates An array of fee rates for each liquidity bin.
   */
  addLiquidityBatch(
    recipient: string,
    tradingFeeRates: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
   * @param data Additional data for the liquidity callback.
   * @param receiptId The ID of the liquidity receipt.
   */
  claimLiquidity(
    receiptId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
   * @param data Additional data for the liquidity callback.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  claimLiquidityBatch(
    receiptIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Distributes earning to the liquidity bins.
   * @param earning The amount of earning to distribute.
   * @param marketBalance The balance of the market.
   */
  distributeEarningToBins(
    earning: BigNumberish,
    marketBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param ids An array containing ids of each token being transferred (order and length must match values array)
   * @param operator The address which initiated the batch transfer (i.e. msg.sender)
   * @param values An array containing amounts of each token being transferred (order and length must match ids array)
   */
  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
   * @param data Additional data with no specified format
   * @param from The address which previously owned the token
   * @param id The ID of the token being transferred
   * @param operator The address which initiated the transfer (i.e. msg.sender)
   * @param value The amount of tokens being transferred
   */
  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * This function is called by the liquidity provider to remove their liquidity from the market.      The liquidity provider must have previously added liquidity to the market.      Throws a `TooSmallAmount` error if the CLB tokne amount of liquidity to be removed is zero.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the removed liquidity.
   * @param tradingFeeRate The trading fee rate for the liquidity.
   */
  removeLiquidity(
    recipient: string,
    tradingFeeRate: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws an `InvalidTransferredTokenAmount` error if the transferred CLB token amount does not match the expected amount (clbTokenAmounts param).
   * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the removed liquidity.
   * @param tradingFeeRates An array of fee rates for each liquidity bin.
   */
  removeLiquidityBatch(
    recipient: string,
    tradingFeeRates: BigNumberish[],
    clbTokenAmounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
   */
  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
   * @param data Additional data for the liquidity callback.
   * @param receiptId The ID of the liquidity receipt.
   */
  withdrawLiquidity(
    receiptId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
   * @param data Additional data for the liquidity callback.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  withdrawLiquidityBatch(
    receiptIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred amount does not match the sum of amounts param.
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     */
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param value The amount of tokens being transferred
     */
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * This function is called by the liquidity provider to remove their liquidity from the market.      The liquidity provider must have previously added liquidity to the market.      Throws a `TooSmallAmount` error if the CLB tokne amount of liquidity to be removed is zero.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred CLB token amount does not match the expected amount (clbTokenAmounts param).
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(receipt?: null): AddLiquidityEventFilter;

    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): AddLiquidityBatchEventFilter;
    AddLiquidityBatch(receipts?: null): AddLiquidityBatchEventFilter;

    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)"(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;
    ClaimLiquidity(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;

    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])"(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;
    ClaimLiquidityBatch(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;

    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(receipt?: null): RemoveLiquidityEventFilter;

    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): RemoveLiquidityBatchEventFilter;
    RemoveLiquidityBatch(receipts?: null): RemoveLiquidityBatchEventFilter;

    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)"(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;
    WithdrawLiquidity(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;

    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])"(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
    WithdrawLiquidityBatch(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
  };

  estimateGas: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred amount does not match the sum of amounts param.
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     */
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param value The amount of tokens being transferred
     */
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function is called by the liquidity provider to remove their liquidity from the market.      The liquidity provider must have previously added liquidity to the market.      Throws a `TooSmallAmount` error if the CLB tokne amount of liquidity to be removed is zero.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred CLB token amount does not match the expected amount (clbTokenAmounts param).
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred amount does not match the sum of amounts param.
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `ADD_LIQUIDITY`.      Throws a `NotClaimableLpReceipt` error if the liquidity receipt is not claimable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the receipt of a multiple ERC1155 token types. This function is called at the end of a `safeBatchTransferFrom` after the balances have been updated. NOTE: To accept the transfer(s), this must return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param ids An array containing ids of each token being transferred (order and length must match values array)
     * @param operator The address which initiated the batch transfer (i.e. msg.sender)
     * @param values An array containing amounts of each token being transferred (order and length must match ids array)
     */
    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the receipt of a single ERC1155 token type. This function is called at the end of a `safeTransferFrom` after the balance has been updated. NOTE: To accept the transfer, this must return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61, or its own function selector).
     * @param data Additional data with no specified format
     * @param from The address which previously owned the token
     * @param id The ID of the token being transferred
     * @param operator The address which initiated the transfer (i.e. msg.sender)
     * @param value The amount of tokens being transferred
     */
    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called by the liquidity provider to remove their liquidity from the market.      The liquidity provider must have previously added liquidity to the market.      Throws a `TooSmallAmount` error if the CLB tokne amount of liquidity to be removed is zero.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws an `InvalidTransferredTokenAmount` error if the transferred CLB token amount does not match the expected amount (clbTokenAmounts param).
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.
     */
    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.      Throws an `InvalidLpReceiptAction` error if the action of liquidity receipt is not `REMOVE_LIQUIDITY`.      Throws a `NotWithdrawableLpReceipt` error if the liquidity receipt is not withdrawable in the current oracle version.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
