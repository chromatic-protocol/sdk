/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface MarketStateFacetInterface extends utils.Interface {
  functions: {
    "clbToken()": FunctionFragment;
    "factory()": FunctionFragment;
    "oracleProvider()": FunctionFragment;
    "protocolFeeRate()": FunctionFragment;
    "setProtocolFeeRate(uint16)": FunctionFragment;
    "settlementToken()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clbToken"
      | "factory"
      | "oracleProvider"
      | "protocolFeeRate"
      | "setProtocolFeeRate"
      | "settlementToken"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "clbToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "clbToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "ProtocolFeeRateSet(uint16,uint16)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProtocolFeeRateSet"): EventFragment;
}

export interface ProtocolFeeRateSetEventObject {
  protocolFeeRateOld: number;
  protocolFeeRateNew: number;
}
export type ProtocolFeeRateSetEvent = TypedEvent<
  [number, number],
  ProtocolFeeRateSetEventObject
>;

export type ProtocolFeeRateSetEventFilter =
  TypedEventFilter<ProtocolFeeRateSetEvent>;

export interface MarketStateFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketStateFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<[string] & { _token: string }>;

    /**
     * Returns the factory contract for the market.
     */
    factory(
      overrides?: CallOverrides
    ): Promise<[string] & { _factory: string }>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { _provider: string }>;

    /**
     * Returns the protocol fee rate
     */
    protocolFeeRate(
      overrides?: CallOverrides
    ): Promise<[number] & { _protocolFeeRate: number }>;

    /**
     * Set the new protocol fee rate
     * @param _protocolFeeRate new protocol fee rate for the market
     */
    setProtocolFeeRate(
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(
      overrides?: CallOverrides
    ): Promise<[string] & { _token: string }>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<[string] & { _vault: string }>;
  };

  /**
   * Returns the CLB token contract for the market.
   */
  clbToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the factory contract for the market.
   */
  factory(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the oracle provider contract for the market.
   */
  oracleProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the protocol fee rate
   */
  protocolFeeRate(overrides?: CallOverrides): Promise<number>;

  /**
   * Set the new protocol fee rate
   * @param _protocolFeeRate new protocol fee rate for the market
   */
  setProtocolFeeRate(
    _protocolFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the settlement token of the market.
   */
  settlementToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the vault contract for the market.
   */
  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the protocol fee rate
     */
    protocolFeeRate(overrides?: CallOverrides): Promise<number>;

    /**
     * Set the new protocol fee rate
     * @param _protocolFeeRate new protocol fee rate for the market
     */
    setProtocolFeeRate(
      _protocolFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ProtocolFeeRateSet(uint16,uint16)"(
      protocolFeeRateOld?: null,
      protocolFeeRateNew?: null
    ): ProtocolFeeRateSetEventFilter;
    ProtocolFeeRateSet(
      protocolFeeRateOld?: null,
      protocolFeeRateNew?: null
    ): ProtocolFeeRateSetEventFilter;
  };

  estimateGas: {
    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the protocol fee rate
     */
    protocolFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Set the new protocol fee rate
     * @param _protocolFeeRate new protocol fee rate for the market
     */
    setProtocolFeeRate(
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the protocol fee rate
     */
    protocolFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Set the new protocol fee rate
     * @param _protocolFeeRate new protocol fee rate for the market
     */
    setProtocolFeeRate(
      _protocolFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
