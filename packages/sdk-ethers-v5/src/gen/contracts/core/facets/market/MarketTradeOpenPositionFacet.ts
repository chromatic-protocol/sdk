/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: string;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export type BinMarginStruct = {
  tradingFeeRate: BigNumberish;
  amount: BigNumberish;
};

export type BinMarginStructOutput = [number, BigNumber] & {
  tradingFeeRate: number;
  amount: BigNumber;
};

export type PositionStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  closeVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  closeTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  owner: string;
  liquidator: string;
  _protocolFeeRate: BigNumberish;
  _binMargins: BinMarginStruct[];
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string,
  number,
  BinMarginStructOutput[]
] & {
  id: BigNumber;
  openVersion: BigNumber;
  closeVersion: BigNumber;
  qty: BigNumber;
  openTimestamp: BigNumber;
  closeTimestamp: BigNumber;
  takerMargin: BigNumber;
  owner: string;
  liquidator: string;
  _protocolFeeRate: number;
  _binMargins: BinMarginStructOutput[];
};

export type OpenPositionInfoStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  makerMargin: BigNumberish;
  tradingFee: BigNumberish;
};

export type OpenPositionInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  openVersion: BigNumber;
  qty: BigNumber;
  openTimestamp: BigNumber;
  takerMargin: BigNumber;
  makerMargin: BigNumber;
  tradingFee: BigNumber;
};

export interface MarketTradeOpenPositionFacetInterface extends utils.Interface {
  functions: {
    "openPosition(int256,uint256,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "openPosition"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "openPosition",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)": EventFragment;
    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])": EventFragment;
    "ClaimPosition(address,int256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))": EventFragment;
    "ClaimPositionByKeeper(address,int256,uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))": EventFragment;
    "ClosePosition(address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))": EventFragment;
    "DisplayModeUpdated(uint8,uint8)": EventFragment;
    "Liquidate(address,int256,uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))": EventFragment;
    "LiquidityModeUpdated(uint8,uint8)": EventFragment;
    "OpenPosition(address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))": EventFragment;
    "PositionModeUpdated(uint8,uint8)": EventFragment;
    "ProtocolFeeRateUpdated(uint16,uint16)": EventFragment;
    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)": EventFragment;
    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPositionByKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisplayModeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityModeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionModeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidityBatch"): EventFragment;
}

export interface AddLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type AddLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface AddLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type AddLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  AddLiquidityBatchEventObject
>;

export type AddLiquidityBatchEventFilter =
  TypedEventFilter<AddLiquidityBatchEvent>;

export interface ClaimLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  clbTokenAmount: BigNumber;
}
export type ClaimLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber],
  ClaimLiquidityEventObject
>;

export type ClaimLiquidityEventFilter = TypedEventFilter<ClaimLiquidityEvent>;

export interface ClaimLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  clbTokenAmounts: BigNumber[];
}
export type ClaimLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[]],
  ClaimLiquidityBatchEventObject
>;

export type ClaimLiquidityBatchEventFilter =
  TypedEventFilter<ClaimLiquidityBatchEvent>;

export interface ClaimPositionEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  position: PositionStructOutput;
}
export type ClaimPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, PositionStructOutput],
  ClaimPositionEventObject
>;

export type ClaimPositionEventFilter = TypedEventFilter<ClaimPositionEvent>;

export interface ClaimPositionByKeeperEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  usedKeeperFee: BigNumber;
  position: PositionStructOutput;
}
export type ClaimPositionByKeeperEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, PositionStructOutput],
  ClaimPositionByKeeperEventObject
>;

export type ClaimPositionByKeeperEventFilter =
  TypedEventFilter<ClaimPositionByKeeperEvent>;

export interface ClosePositionEventObject {
  account: string;
  position: PositionStructOutput;
}
export type ClosePositionEvent = TypedEvent<
  [string, PositionStructOutput],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface DisplayModeUpdatedEventObject {
  displayModeOld: number;
  displayModeNew: number;
}
export type DisplayModeUpdatedEvent = TypedEvent<
  [number, number],
  DisplayModeUpdatedEventObject
>;

export type DisplayModeUpdatedEventFilter =
  TypedEventFilter<DisplayModeUpdatedEvent>;

export interface LiquidateEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  usedKeeperFee: BigNumber;
  position: PositionStructOutput;
}
export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, PositionStructOutput],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface LiquidityModeUpdatedEventObject {
  liquidityModeOld: number;
  liquidityModeNew: number;
}
export type LiquidityModeUpdatedEvent = TypedEvent<
  [number, number],
  LiquidityModeUpdatedEventObject
>;

export type LiquidityModeUpdatedEventFilter =
  TypedEventFilter<LiquidityModeUpdatedEvent>;

export interface OpenPositionEventObject {
  account: string;
  position: PositionStructOutput;
}
export type OpenPositionEvent = TypedEvent<
  [string, PositionStructOutput],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface PositionModeUpdatedEventObject {
  positionModeOld: number;
  positionModeNew: number;
}
export type PositionModeUpdatedEvent = TypedEvent<
  [number, number],
  PositionModeUpdatedEventObject
>;

export type PositionModeUpdatedEventFilter =
  TypedEventFilter<PositionModeUpdatedEvent>;

export interface ProtocolFeeRateUpdatedEventObject {
  protocolFeeRateOld: number;
  protocolFeeRateNew: number;
}
export type ProtocolFeeRateUpdatedEvent = TypedEvent<
  [number, number],
  ProtocolFeeRateUpdatedEventObject
>;

export type ProtocolFeeRateUpdatedEventFilter =
  TypedEventFilter<ProtocolFeeRateUpdatedEvent>;

export interface RemoveLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type RemoveLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type RemoveLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  RemoveLiquidityBatchEventObject
>;

export type RemoveLiquidityBatchEventFilter =
  TypedEventFilter<RemoveLiquidityBatchEvent>;

export interface WithdrawLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  amount: BigNumber;
  burnedCLBTokenAmount: BigNumber;
}
export type WithdrawLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber, BigNumber],
  WithdrawLiquidityEventObject
>;

export type WithdrawLiquidityEventFilter =
  TypedEventFilter<WithdrawLiquidityEvent>;

export interface WithdrawLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  amounts: BigNumber[];
  burnedCLBTokenAmounts: BigNumber[];
}
export type WithdrawLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[], BigNumber[]],
  WithdrawLiquidityBatchEventObject
>;

export type WithdrawLiquidityBatchEventFilter =
  TypedEventFilter<WithdrawLiquidityBatchEvent>;

export interface MarketTradeOpenPositionFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketTradeOpenPositionFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Throws a `TooSmallTakerMargin` error if the `takerMargin` is smaller than the minimum required margin for the settlement token.      Throws an `ExceedMaxAllowableLeverage` if the leverage exceeds the maximum allowable leverage.      Throws a `NotAllowableMakerMargin` if the maker margin is not within the allowable range based on the absolute quantity and min/max take-profit basis points (BPS).      Throws an `ExceedMaxAllowableTradingFee` if the total trading fee (including protocol fee) exceeds the maximum allowable trading fee (`maxAllowableTradingFee`).      Throws a `NotEnoughMarginTransferred` if the margin settlement token balance did not increase by the required margin amount after the callback. Requirements:  - The `takerMargin` must be greater than or equal to the minimum required margin for the settlement token.  - The position parameters must pass the validity check, including leverage limits and allowable margin ranges.  - The position is assigned a new ID and stored in the position storage.  - A keeper task for potential liquidation is created by the liquidator.  - An `OpenPosition` event is emitted with the owner's address and the newly opened position details.
     * @param data Additional data for the position callback.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Throws a `TooSmallTakerMargin` error if the `takerMargin` is smaller than the minimum required margin for the settlement token.      Throws an `ExceedMaxAllowableLeverage` if the leverage exceeds the maximum allowable leverage.      Throws a `NotAllowableMakerMargin` if the maker margin is not within the allowable range based on the absolute quantity and min/max take-profit basis points (BPS).      Throws an `ExceedMaxAllowableTradingFee` if the total trading fee (including protocol fee) exceeds the maximum allowable trading fee (`maxAllowableTradingFee`).      Throws a `NotEnoughMarginTransferred` if the margin settlement token balance did not increase by the required margin amount after the callback. Requirements:  - The `takerMargin` must be greater than or equal to the minimum required margin for the settlement token.  - The position parameters must pass the validity check, including leverage limits and allowable margin ranges.  - The position is assigned a new ID and stored in the position storage.  - A keeper task for potential liquidation is created by the liquidator.  - An `OpenPosition` event is emitted with the owner's address and the newly opened position details.
   * @param data Additional data for the position callback.
   * @param makerMargin The margin amount provided by the maker.
   * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
   * @param qty The quantity of the position.
   * @param takerMargin The margin amount provided by the taker.
   */
  openPosition(
    qty: BigNumberish,
    takerMargin: BigNumberish,
    makerMargin: BigNumberish,
    maxAllowableTradingFee: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Throws a `TooSmallTakerMargin` error if the `takerMargin` is smaller than the minimum required margin for the settlement token.      Throws an `ExceedMaxAllowableLeverage` if the leverage exceeds the maximum allowable leverage.      Throws a `NotAllowableMakerMargin` if the maker margin is not within the allowable range based on the absolute quantity and min/max take-profit basis points (BPS).      Throws an `ExceedMaxAllowableTradingFee` if the total trading fee (including protocol fee) exceeds the maximum allowable trading fee (`maxAllowableTradingFee`).      Throws a `NotEnoughMarginTransferred` if the margin settlement token balance did not increase by the required margin amount after the callback. Requirements:  - The `takerMargin` must be greater than or equal to the minimum required margin for the settlement token.  - The position parameters must pass the validity check, including leverage limits and allowable margin ranges.  - The position is assigned a new ID and stored in the position storage.  - A keeper task for potential liquidation is created by the liquidator.  - An `OpenPosition` event is emitted with the owner's address and the newly opened position details.
     * @param data Additional data for the position callback.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<OpenPositionInfoStructOutput>;
  };

  filters: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(receipt?: null): AddLiquidityEventFilter;

    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): AddLiquidityBatchEventFilter;
    AddLiquidityBatch(receipts?: null): AddLiquidityBatchEventFilter;

    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)"(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;
    ClaimLiquidity(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;

    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])"(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;
    ClaimLiquidityBatch(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;

    "ClaimPosition(address,int256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      position?: null
    ): ClaimPositionEventFilter;
    ClaimPosition(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      position?: null
    ): ClaimPositionEventFilter;

    "ClaimPositionByKeeper(address,int256,uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): ClaimPositionByKeeperEventFilter;
    ClaimPositionByKeeper(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): ClaimPositionByKeeperEventFilter;

    "ClosePosition(address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))"(
      account?: string | null,
      position?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: string | null,
      position?: null
    ): ClosePositionEventFilter;

    "DisplayModeUpdated(uint8,uint8)"(
      displayModeOld?: null,
      displayModeNew?: null
    ): DisplayModeUpdatedEventFilter;
    DisplayModeUpdated(
      displayModeOld?: null,
      displayModeNew?: null
    ): DisplayModeUpdatedEventFilter;

    "Liquidate(address,int256,uint256,uint256,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): LiquidateEventFilter;
    Liquidate(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): LiquidateEventFilter;

    "LiquidityModeUpdated(uint8,uint8)"(
      liquidityModeOld?: null,
      liquidityModeNew?: null
    ): LiquidityModeUpdatedEventFilter;
    LiquidityModeUpdated(
      liquidityModeOld?: null,
      liquidityModeNew?: null
    ): LiquidityModeUpdatedEventFilter;

    "OpenPosition(address,(uint256,uint256,uint256,int256,uint256,uint256,uint256,address,address,uint16,(uint16,uint256)[]))"(
      account?: string | null,
      position?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      account?: string | null,
      position?: null
    ): OpenPositionEventFilter;

    "PositionModeUpdated(uint8,uint8)"(
      positionModeOld?: null,
      positionModeNew?: null
    ): PositionModeUpdatedEventFilter;
    PositionModeUpdated(
      positionModeOld?: null,
      positionModeNew?: null
    ): PositionModeUpdatedEventFilter;

    "ProtocolFeeRateUpdated(uint16,uint16)"(
      protocolFeeRateOld?: null,
      protocolFeeRateNew?: null
    ): ProtocolFeeRateUpdatedEventFilter;
    ProtocolFeeRateUpdated(
      protocolFeeRateOld?: null,
      protocolFeeRateNew?: null
    ): ProtocolFeeRateUpdatedEventFilter;

    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(receipt?: null): RemoveLiquidityEventFilter;

    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): RemoveLiquidityBatchEventFilter;
    RemoveLiquidityBatch(receipts?: null): RemoveLiquidityBatchEventFilter;

    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)"(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;
    WithdrawLiquidity(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;

    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])"(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
    WithdrawLiquidityBatch(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
  };

  estimateGas: {
    /**
     * Throws a `TooSmallTakerMargin` error if the `takerMargin` is smaller than the minimum required margin for the settlement token.      Throws an `ExceedMaxAllowableLeverage` if the leverage exceeds the maximum allowable leverage.      Throws a `NotAllowableMakerMargin` if the maker margin is not within the allowable range based on the absolute quantity and min/max take-profit basis points (BPS).      Throws an `ExceedMaxAllowableTradingFee` if the total trading fee (including protocol fee) exceeds the maximum allowable trading fee (`maxAllowableTradingFee`).      Throws a `NotEnoughMarginTransferred` if the margin settlement token balance did not increase by the required margin amount after the callback. Requirements:  - The `takerMargin` must be greater than or equal to the minimum required margin for the settlement token.  - The position parameters must pass the validity check, including leverage limits and allowable margin ranges.  - The position is assigned a new ID and stored in the position storage.  - A keeper task for potential liquidation is created by the liquidator.  - An `OpenPosition` event is emitted with the owner's address and the newly opened position details.
     * @param data Additional data for the position callback.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Throws a `TooSmallTakerMargin` error if the `takerMargin` is smaller than the minimum required margin for the settlement token.      Throws an `ExceedMaxAllowableLeverage` if the leverage exceeds the maximum allowable leverage.      Throws a `NotAllowableMakerMargin` if the maker margin is not within the allowable range based on the absolute quantity and min/max take-profit basis points (BPS).      Throws an `ExceedMaxAllowableTradingFee` if the total trading fee (including protocol fee) exceeds the maximum allowable trading fee (`maxAllowableTradingFee`).      Throws a `NotEnoughMarginTransferred` if the margin settlement token balance did not increase by the required margin amount after the callback. Requirements:  - The `takerMargin` must be greater than or equal to the minimum required margin for the settlement token.  - The position parameters must pass the validity check, including leverage limits and allowable margin ranges.  - The position is assigned a new ID and stored in the position storage.  - A keeper task for potential liquidation is created by the liquidator.  - An `OpenPosition` event is emitted with the owner's address and the newly opened position details.
     * @param data Additional data for the position callback.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
