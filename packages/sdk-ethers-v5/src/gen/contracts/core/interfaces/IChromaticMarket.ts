/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: string;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export type BinMarginStruct = {
  tradingFeeRate: BigNumberish;
  amount: BigNumberish;
};

export type BinMarginStructOutput = [number, BigNumber] & {
  tradingFeeRate: number;
  amount: BigNumber;
};

export type PositionStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  closeVersion: BigNumberish;
  qty: BigNumberish;
  leverage: BigNumberish;
  openTimestamp: BigNumberish;
  closeTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  owner: string;
  _binMargins: BinMarginStruct[];
  _feeProtocol: BigNumberish;
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BinMarginStructOutput[],
  number
] & {
  id: BigNumber;
  openVersion: BigNumber;
  closeVersion: BigNumber;
  qty: BigNumber;
  leverage: number;
  openTimestamp: BigNumber;
  closeTimestamp: BigNumber;
  takerMargin: BigNumber;
  owner: string;
  _binMargins: BinMarginStructOutput[];
  _feeProtocol: number;
};

export declare namespace IMarketLiquidity {
  export type ClaimableLiquidityStruct = {
    mintingTokenAmountRequested: BigNumberish;
    mintingCLBTokenAmount: BigNumberish;
    burningCLBTokenAmountRequested: BigNumberish;
    burningCLBTokenAmount: BigNumberish;
    burningTokenAmount: BigNumberish;
  };

  export type ClaimableLiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    mintingTokenAmountRequested: BigNumber;
    mintingCLBTokenAmount: BigNumber;
    burningCLBTokenAmountRequested: BigNumber;
    burningCLBTokenAmount: BigNumber;
    burningTokenAmount: BigNumber;
  };

  export type LiquidityBinStatusStruct = {
    liquidity: BigNumberish;
    freeLiquidity: BigNumberish;
    binValue: BigNumberish;
    tradingFeeRate: BigNumberish;
  };

  export type LiquidityBinStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    liquidity: BigNumber;
    freeLiquidity: BigNumber;
    binValue: BigNumber;
    tradingFeeRate: number;
  };
}

export interface IChromaticMarketInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,int16,bytes)": FunctionFragment;
    "addLiquidityBatch(address,int16[],uint256[],bytes)": FunctionFragment;
    "checkClaimPosition(uint256)": FunctionFragment;
    "checkLiquidation(uint256)": FunctionFragment;
    "claimLiquidity(uint256,bytes)": FunctionFragment;
    "claimLiquidityBatch(uint256[],bytes)": FunctionFragment;
    "claimPosition(uint256,address,bytes)": FunctionFragment;
    "claimPosition(uint256,address,uint256)": FunctionFragment;
    "claimableLiquidity(int16,uint256)": FunctionFragment;
    "clbToken()": FunctionFragment;
    "closePosition(uint256)": FunctionFragment;
    "distributeEarningToBins(uint256,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeProtocol()": FunctionFragment;
    "getBinFreeLiquidity(int16)": FunctionFragment;
    "getBinLiquidity(int16)": FunctionFragment;
    "getBinValues(int16[])": FunctionFragment;
    "getLpReceipt(uint256)": FunctionFragment;
    "getPositions(uint256[])": FunctionFragment;
    "keeperFeePayer()": FunctionFragment;
    "liquidate(uint256,address,uint256)": FunctionFragment;
    "liquidator()": FunctionFragment;
    "liquidityBinStatuses()": FunctionFragment;
    "openPosition(int224,uint32,uint256,uint256,uint256,bytes)": FunctionFragment;
    "oracleProvider()": FunctionFragment;
    "removeLiquidity(address,int16,bytes)": FunctionFragment;
    "removeLiquidityBatch(address,int16[],uint256[],bytes)": FunctionFragment;
    "setFeeProtocol(uint8)": FunctionFragment;
    "settle()": FunctionFragment;
    "settlementToken()": FunctionFragment;
    "vault()": FunctionFragment;
    "withdrawLiquidity(uint256,bytes)": FunctionFragment;
    "withdrawLiquidityBatch(uint256[],bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidityBatch"
      | "checkClaimPosition"
      | "checkLiquidation"
      | "claimLiquidity"
      | "claimLiquidityBatch"
      | "claimPosition(uint256,address,bytes)"
      | "claimPosition(uint256,address,uint256)"
      | "claimableLiquidity"
      | "clbToken"
      | "closePosition"
      | "distributeEarningToBins"
      | "factory"
      | "feeProtocol"
      | "getBinFreeLiquidity"
      | "getBinLiquidity"
      | "getBinValues"
      | "getLpReceipt"
      | "getPositions"
      | "keeperFeePayer"
      | "liquidate"
      | "liquidator"
      | "liquidityBinStatuses"
      | "openPosition"
      | "oracleProvider"
      | "removeLiquidity"
      | "removeLiquidityBatch"
      | "setFeeProtocol"
      | "settle"
      | "settlementToken"
      | "vault"
      | "withdrawLiquidity"
      | "withdrawLiquidityBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkClaimPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiquidation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidity",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatch",
    values: [BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition(uint256,address,bytes)",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition(uint256,address,uint256)",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "clbToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeEarningToBins",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeProtocol",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBinFreeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinValues",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperFeePayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBinStatuses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatch",
    values: [string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeProtocol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settlementToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatch",
    values: [BigNumberish[], BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkClaimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition(uint256,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clbToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeEarningToBins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinFreeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBinStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatch",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)": EventFragment;
    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])": EventFragment;
    "ClaimPosition(address,int256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))": EventFragment;
    "ClaimPositionByKeeper(address,int256,uint256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))": EventFragment;
    "ClosePosition(address,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))": EventFragment;
    "Liquidate(address,int256,uint256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))": EventFragment;
    "OpenPosition(address,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))": EventFragment;
    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))": EventFragment;
    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])": EventFragment;
    "SetFeeProtocol(uint8,uint8)": EventFragment;
    "TransferProtocolFee(uint256,uint256)": EventFragment;
    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)": EventFragment;
    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimPositionByKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClosePosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidityBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeProtocol"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferProtocolFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawLiquidityBatch"): EventFragment;
}

export interface AddLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type AddLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface AddLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type AddLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  AddLiquidityBatchEventObject
>;

export type AddLiquidityBatchEventFilter =
  TypedEventFilter<AddLiquidityBatchEvent>;

export interface ClaimLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  clbTokenAmount: BigNumber;
}
export type ClaimLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber],
  ClaimLiquidityEventObject
>;

export type ClaimLiquidityEventFilter = TypedEventFilter<ClaimLiquidityEvent>;

export interface ClaimLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  clbTokenAmounts: BigNumber[];
}
export type ClaimLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[]],
  ClaimLiquidityBatchEventObject
>;

export type ClaimLiquidityBatchEventFilter =
  TypedEventFilter<ClaimLiquidityBatchEvent>;

export interface ClaimPositionEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  position: PositionStructOutput;
}
export type ClaimPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, PositionStructOutput],
  ClaimPositionEventObject
>;

export type ClaimPositionEventFilter = TypedEventFilter<ClaimPositionEvent>;

export interface ClaimPositionByKeeperEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  usedKeeperFee: BigNumber;
  position: PositionStructOutput;
}
export type ClaimPositionByKeeperEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, PositionStructOutput],
  ClaimPositionByKeeperEventObject
>;

export type ClaimPositionByKeeperEventFilter =
  TypedEventFilter<ClaimPositionByKeeperEvent>;

export interface ClosePositionEventObject {
  account: string;
  position: PositionStructOutput;
}
export type ClosePositionEvent = TypedEvent<
  [string, PositionStructOutput],
  ClosePositionEventObject
>;

export type ClosePositionEventFilter = TypedEventFilter<ClosePositionEvent>;

export interface LiquidateEventObject {
  account: string;
  pnl: BigNumber;
  interest: BigNumber;
  usedKeeperFee: BigNumber;
  position: PositionStructOutput;
}
export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, PositionStructOutput],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface OpenPositionEventObject {
  account: string;
  position: PositionStructOutput;
}
export type OpenPositionEvent = TypedEvent<
  [string, PositionStructOutput],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface RemoveLiquidityEventObject {
  receipt: LpReceiptStructOutput;
}
export type RemoveLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface RemoveLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
}
export type RemoveLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[]],
  RemoveLiquidityBatchEventObject
>;

export type RemoveLiquidityBatchEventFilter =
  TypedEventFilter<RemoveLiquidityBatchEvent>;

export interface SetFeeProtocolEventObject {
  feeProtocolOld: number;
  feeProtocolNew: number;
}
export type SetFeeProtocolEvent = TypedEvent<
  [number, number],
  SetFeeProtocolEventObject
>;

export type SetFeeProtocolEventFilter = TypedEventFilter<SetFeeProtocolEvent>;

export interface TransferProtocolFeeEventObject {
  positionId: BigNumber;
  amount: BigNumber;
}
export type TransferProtocolFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  TransferProtocolFeeEventObject
>;

export type TransferProtocolFeeEventFilter =
  TypedEventFilter<TransferProtocolFeeEvent>;

export interface WithdrawLiquidityEventObject {
  receipt: LpReceiptStructOutput;
  amount: BigNumber;
  burnedCLBTokenAmount: BigNumber;
}
export type WithdrawLiquidityEvent = TypedEvent<
  [LpReceiptStructOutput, BigNumber, BigNumber],
  WithdrawLiquidityEventObject
>;

export type WithdrawLiquidityEventFilter =
  TypedEventFilter<WithdrawLiquidityEvent>;

export interface WithdrawLiquidityBatchEventObject {
  receipts: LpReceiptStructOutput[];
  amounts: BigNumber[];
  burnedCLBTokenAmounts: BigNumber[];
}
export type WithdrawLiquidityBatchEvent = TypedEvent<
  [LpReceiptStructOutput[], BigNumber[], BigNumber[]],
  WithdrawLiquidityBatchEventObject
>;

export type WithdrawLiquidityBatchEventFilter =
  TypedEventFilter<WithdrawLiquidityBatchEvent>;

export interface IChromaticMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IChromaticMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Checks if a position is eligible for claim.
     * @param positionId The ID of the position to check.
     */
    checkClaimPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Checks if a position is eligible for liquidation.
     * @param positionId The ID of the position to check.
     */
    checkLiquidation(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claims a closed position in the market.
     * @param data Additional data for the claim callback.
     * @param positionId The ID of the position to claim.
     * @param recipient The address of the recipient of the claimed position.
     */
    "claimPosition(uint256,address,bytes)"(
      positionId: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claims a closed position on behalf of a keeper.
     * @param keeper The address of the keeper claiming the position.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to claim.
     */
    "claimPosition(uint256,address,uint256)"(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IMarketLiquidity.ClaimableLiquidityStructOutput]>;

    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Closes a position in the market.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the denominator of the protocol's % share of the fees
     */
    feeProtocol(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { values: BigNumber[] }>;

    /**
     * Retrieves the liquidity receipt with the given receipt ID.      It throws NotExistLpReceipt if the specified receipt ID does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LpReceiptStructOutput]>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [PositionStructOutput[]] & { positions: PositionStructOutput[] }
    >;

    /**
     * Returns the keeper fee payer contract for the market.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Liquidates a position.
     * @param keeper The address of the keeper performing the liquidation.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to liquidate.
     */
    liquidate(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the liquidator contract for the market.
     */
    liquidator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<[IMarketLiquidity.LiquidityBinStatusStructOutput[]]>;

    /**
     * Opens a new position in the market.
     * @param data Additional data for the position callback.
     * @param leverage The leverage of the position in basis points.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      leverage: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Removes liquidity from the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Removes liquidity from the market.
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Set the denominator of the protocol's % share of the fees
     * @param _feeProtocol new protocol fee for the market
     */
    setFeeProtocol(
      _feeProtocol: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function is called to settle the market.
     * Executes the settlement process for the Chromatic market.
     */
    settle(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds liquidity to the market.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the liquidity tokens.
   * @param tradingFeeRate The trading fee rate for the liquidity.
   */
  addLiquidity(
    recipient: string,
    tradingFeeRate: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Adds liquidity to multiple liquidity bins of the market in a batch.
   * @param amounts An array of amounts to add as liquidity for each bin.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address of the recipient for each liquidity bin.
   * @param tradingFeeRates An array of fee rates for each liquidity bin.
   */
  addLiquidityBatch(
    recipient: string,
    tradingFeeRates: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Checks if a position is eligible for claim.
   * @param positionId The ID of the position to check.
   */
  checkClaimPosition(
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Checks if a position is eligible for liquidation.
   * @param positionId The ID of the position to check.
   */
  checkLiquidation(
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Claims liquidity from a liquidity receipt.
   * @param data Additional data for the liquidity callback.
   * @param receiptId The ID of the liquidity receipt.
   */
  claimLiquidity(
    receiptId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claims liquidity from a liquidity receipt.
   * @param data Additional data for the liquidity callback.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  claimLiquidityBatch(
    receiptIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claims a closed position in the market.
   * @param data Additional data for the claim callback.
   * @param positionId The ID of the position to claim.
   * @param recipient The address of the recipient of the claimed position.
   */
  "claimPosition(uint256,address,bytes)"(
    positionId: BigNumberish,
    recipient: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claims a closed position on behalf of a keeper.
   * @param keeper The address of the keeper claiming the position.
   * @param keeperFee The native token amount of the keeper's fee.
   * @param positionId The ID of the position to claim.
   */
  "claimPosition(uint256,address,uint256)"(
    positionId: BigNumberish,
    keeper: string,
    keeperFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
   * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
   */
  claimableLiquidity(
    tradingFeeRate: BigNumberish,
    oracleVersion: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IMarketLiquidity.ClaimableLiquidityStructOutput>;

  /**
   * Returns the CLB token contract for the market.
   */
  clbToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Closes a position in the market.
   * @param positionId The ID of the position to close.
   */
  closePosition(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Distributes earning to the liquidity bins.
   * @param earning The amount of earning to distribute.
   * @param marketBalance The balance of the market.
   */
  distributeEarningToBins(
    earning: BigNumberish,
    marketBalance: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the factory contract for the market.
   */
  factory(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the denominator of the protocol's % share of the fees
   */
  feeProtocol(overrides?: CallOverrides): Promise<number>;

  /**
   * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
   */
  getBinFreeLiquidity(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
   */
  getBinLiquidity(
    tradingFeeRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
   * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
   */
  getBinValues(
    tradingFeeRates: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Retrieves the liquidity receipt with the given receipt ID.      It throws NotExistLpReceipt if the specified receipt ID does not exist.
   * @param receiptId The ID of the liquidity receipt to retrieve.
   */
  getLpReceipt(
    receiptId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LpReceiptStructOutput>;

  /**
   * Retrieves multiple positions by their IDs.
   * @param positionIds The IDs of the positions to retrieve.
   */
  getPositions(
    positionIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<PositionStructOutput[]>;

  /**
   * Returns the keeper fee payer contract for the market.
   */
  keeperFeePayer(overrides?: CallOverrides): Promise<string>;

  /**
   * Liquidates a position.
   * @param keeper The address of the keeper performing the liquidation.
   * @param keeperFee The native token amount of the keeper's fee.
   * @param positionId The ID of the position to liquidate.
   */
  liquidate(
    positionId: BigNumberish,
    keeper: string,
    keeperFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the liquidator contract for the market.
   */
  liquidator(overrides?: CallOverrides): Promise<string>;

  /**
   * Retrieves the liquidity bin statuses for the caller's liquidity pool.
   */
  liquidityBinStatuses(
    overrides?: CallOverrides
  ): Promise<IMarketLiquidity.LiquidityBinStatusStructOutput[]>;

  /**
   * Opens a new position in the market.
   * @param data Additional data for the position callback.
   * @param leverage The leverage of the position in basis points.
   * @param makerMargin The margin amount provided by the maker.
   * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
   * @param qty The quantity of the position.
   * @param takerMargin The margin amount provided by the taker.
   */
  openPosition(
    qty: BigNumberish,
    leverage: BigNumberish,
    takerMargin: BigNumberish,
    makerMargin: BigNumberish,
    maxAllowableTradingFee: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the oracle provider contract for the market.
   */
  oracleProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * Removes liquidity from the market.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the removed liquidity.
   * @param tradingFeeRate The trading fee rate for the liquidity.
   */
  removeLiquidity(
    recipient: string,
    tradingFeeRate: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Removes liquidity from the market.
   * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
   * @param data Additional data for the liquidity callback.
   * @param recipient The address to receive the removed liquidity.
   * @param tradingFeeRates An array of fee rates for each liquidity bin.
   */
  removeLiquidityBatch(
    recipient: string,
    tradingFeeRates: BigNumberish[],
    clbTokenAmounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Set the denominator of the protocol's % share of the fees
   * @param _feeProtocol new protocol fee for the market
   */
  setFeeProtocol(
    _feeProtocol: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function is called to settle the market.
   * Executes the settlement process for the Chromatic market.
   */
  settle(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the settlement token of the market.
   */
  settlementToken(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the vault contract for the market.
   */
  vault(overrides?: CallOverrides): Promise<string>;

  /**
   * Withdraws liquidity from a liquidity receipt.
   * @param data Additional data for the liquidity callback.
   * @param receiptId The ID of the liquidity receipt.
   */
  withdrawLiquidity(
    receiptId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws liquidity from a liquidity receipt.
   * @param data Additional data for the liquidity callback.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  withdrawLiquidityBatch(
    receiptIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Checks if a position is eligible for claim.
     * @param positionId The ID of the position to check.
     */
    checkClaimPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Checks if a position is eligible for liquidation.
     * @param positionId The ID of the position to check.
     */
    checkLiquidation(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims a closed position in the market.
     * @param data Additional data for the claim callback.
     * @param positionId The ID of the position to claim.
     * @param recipient The address of the recipient of the claimed position.
     */
    "claimPosition(uint256,address,bytes)"(
      positionId: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims a closed position on behalf of a keeper.
     * @param keeper The address of the keeper claiming the position.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to claim.
     */
    "claimPosition(uint256,address,uint256)"(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IMarketLiquidity.ClaimableLiquidityStructOutput>;

    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Closes a position in the market.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the denominator of the protocol's % share of the fees
     */
    feeProtocol(overrides?: CallOverrides): Promise<number>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Retrieves the liquidity receipt with the given receipt ID.      It throws NotExistLpReceipt if the specified receipt ID does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PositionStructOutput[]>;

    /**
     * Returns the keeper fee payer contract for the market.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<string>;

    /**
     * Liquidates a position.
     * @param keeper The address of the keeper performing the liquidation.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to liquidate.
     */
    liquidate(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the liquidator contract for the market.
     */
    liquidator(overrides?: CallOverrides): Promise<string>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<IMarketLiquidity.LiquidityBinStatusStructOutput[]>;

    /**
     * Opens a new position in the market.
     * @param data Additional data for the position callback.
     * @param leverage The leverage of the position in basis points.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      leverage: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<string>;

    /**
     * Removes liquidity from the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Removes liquidity from the market.
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Set the denominator of the protocol's % share of the fees
     * @param _feeProtocol new protocol fee for the market
     */
    setFeeProtocol(
      _feeProtocol: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function is called to settle the market.
     * Executes the settlement process for the Chromatic market.
     */
    settle(overrides?: CallOverrides): Promise<void>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<string>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(receipt?: null): AddLiquidityEventFilter;

    "AddLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): AddLiquidityBatchEventFilter;
    AddLiquidityBatch(receipts?: null): AddLiquidityBatchEventFilter;

    "ClaimLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256)"(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;
    ClaimLiquidity(
      receipt?: null,
      clbTokenAmount?: BigNumberish | null
    ): ClaimLiquidityEventFilter;

    "ClaimLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[])"(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;
    ClaimLiquidityBatch(
      receipts?: null,
      clbTokenAmounts?: null
    ): ClaimLiquidityBatchEventFilter;

    "ClaimPosition(address,int256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      position?: null
    ): ClaimPositionEventFilter;
    ClaimPosition(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      position?: null
    ): ClaimPositionEventFilter;

    "ClaimPositionByKeeper(address,int256,uint256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): ClaimPositionByKeeperEventFilter;
    ClaimPositionByKeeper(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): ClaimPositionByKeeperEventFilter;

    "ClosePosition(address,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))"(
      account?: string | null,
      position?: null
    ): ClosePositionEventFilter;
    ClosePosition(
      account?: string | null,
      position?: null
    ): ClosePositionEventFilter;

    "Liquidate(address,int256,uint256,uint256,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))"(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): LiquidateEventFilter;
    Liquidate(
      account?: string | null,
      pnl?: BigNumberish | null,
      interest?: BigNumberish | null,
      usedKeeperFee?: null,
      position?: null
    ): LiquidateEventFilter;

    "OpenPosition(address,(uint256,uint256,uint256,int224,uint32,uint256,uint256,uint256,address,(uint16,uint256)[],uint8))"(
      account?: string | null,
      position?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      account?: string | null,
      position?: null
    ): OpenPositionEventFilter;

    "RemoveLiquidity((uint256,uint256,uint256,address,uint8,int16))"(
      receipt?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(receipt?: null): RemoveLiquidityEventFilter;

    "RemoveLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[])"(
      receipts?: null
    ): RemoveLiquidityBatchEventFilter;
    RemoveLiquidityBatch(receipts?: null): RemoveLiquidityBatchEventFilter;

    "SetFeeProtocol(uint8,uint8)"(
      feeProtocolOld?: null,
      feeProtocolNew?: null
    ): SetFeeProtocolEventFilter;
    SetFeeProtocol(
      feeProtocolOld?: null,
      feeProtocolNew?: null
    ): SetFeeProtocolEventFilter;

    "TransferProtocolFee(uint256,uint256)"(
      positionId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferProtocolFeeEventFilter;
    TransferProtocolFee(
      positionId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferProtocolFeeEventFilter;

    "WithdrawLiquidity((uint256,uint256,uint256,address,uint8,int16),uint256,uint256)"(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;
    WithdrawLiquidity(
      receipt?: null,
      amount?: BigNumberish | null,
      burnedCLBTokenAmount?: BigNumberish | null
    ): WithdrawLiquidityEventFilter;

    "WithdrawLiquidityBatch((uint256,uint256,uint256,address,uint8,int16)[],uint256[],uint256[])"(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
    WithdrawLiquidityBatch(
      receipts?: null,
      amounts?: null,
      burnedCLBTokenAmounts?: null
    ): WithdrawLiquidityBatchEventFilter;
  };

  estimateGas: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Checks if a position is eligible for claim.
     * @param positionId The ID of the position to check.
     */
    checkClaimPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if a position is eligible for liquidation.
     * @param positionId The ID of the position to check.
     */
    checkLiquidation(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claims a closed position in the market.
     * @param data Additional data for the claim callback.
     * @param positionId The ID of the position to claim.
     * @param recipient The address of the recipient of the claimed position.
     */
    "claimPosition(uint256,address,bytes)"(
      positionId: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claims a closed position on behalf of a keeper.
     * @param keeper The address of the keeper claiming the position.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to claim.
     */
    "claimPosition(uint256,address,uint256)"(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Closes a position in the market.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the denominator of the protocol's % share of the fees
     */
    feeProtocol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the liquidity receipt with the given receipt ID.      It throws NotExistLpReceipt if the specified receipt ID does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the keeper fee payer contract for the market.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Liquidates a position.
     * @param keeper The address of the keeper performing the liquidation.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to liquidate.
     */
    liquidate(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the liquidator contract for the market.
     */
    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Opens a new position in the market.
     * @param data Additional data for the position callback.
     * @param leverage The leverage of the position in basis points.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      leverage: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Removes liquidity from the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Removes liquidity from the market.
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Set the denominator of the protocol's % share of the fees
     * @param _feeProtocol new protocol fee for the market
     */
    setFeeProtocol(
      _feeProtocol: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function is called to settle the market.
     * Executes the settlement process for the Chromatic market.
     */
    settle(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds liquidity to the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the liquidity tokens.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    addLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of the market in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address of the recipient for each liquidity bin.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    addLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a position is eligible for claim.
     * @param positionId The ID of the position to check.
     */
    checkClaimPosition(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a position is eligible for liquidation.
     * @param positionId The ID of the position to check.
     */
    checkLiquidation(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    claimLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims a closed position in the market.
     * @param data Additional data for the claim callback.
     * @param positionId The ID of the position to claim.
     * @param recipient The address of the recipient of the claimed position.
     */
    "claimPosition(uint256,address,bytes)"(
      positionId: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims a closed position on behalf of a keeper.
     * @param keeper The address of the keeper claiming the position.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to claim.
     */
    "claimPosition(uint256,address,uint256)"(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
     * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      tradingFeeRate: BigNumberish,
      oracleVersion: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the CLB token contract for the market.
     */
    clbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Closes a position in the market.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes earning to the liquidity bins.
     * @param earning The amount of earning to distribute.
     * @param marketBalance The balance of the market.
     */
    distributeEarningToBins(
      earning: BigNumberish,
      marketBalance: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the factory contract for the market.
     */
    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the denominator of the protocol's % share of the fees
     */
    feeProtocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
     */
    getBinFreeLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
     * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
     */
    getBinLiquidity(
      tradingFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
     * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
     */
    getBinValues(
      tradingFeeRates: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the liquidity receipt with the given receipt ID.      It throws NotExistLpReceipt if the specified receipt ID does not exist.
     * @param receiptId The ID of the liquidity receipt to retrieve.
     */
    getLpReceipt(
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves multiple positions by their IDs.
     * @param positionIds The IDs of the positions to retrieve.
     */
    getPositions(
      positionIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the keeper fee payer contract for the market.
     */
    keeperFeePayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Liquidates a position.
     * @param keeper The address of the keeper performing the liquidation.
     * @param keeperFee The native token amount of the keeper's fee.
     * @param positionId The ID of the position to liquidate.
     */
    liquidate(
      positionId: BigNumberish,
      keeper: string,
      keeperFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the liquidator contract for the market.
     */
    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Retrieves the liquidity bin statuses for the caller's liquidity pool.
     */
    liquidityBinStatuses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Opens a new position in the market.
     * @param data Additional data for the position callback.
     * @param leverage The leverage of the position in basis points.
     * @param makerMargin The margin amount provided by the maker.
     * @param maxAllowableTradingFee The maximum allowable trading fee for the position.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount provided by the taker.
     */
    openPosition(
      qty: BigNumberish,
      leverage: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the oracle provider contract for the market.
     */
    oracleProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from the market.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRate The trading fee rate for the liquidity.
     */
    removeLiquidity(
      recipient: string,
      tradingFeeRate: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from the market.
     * @param clbTokenAmounts An array of clb token amounts to remove as liquidity for each bin.
     * @param data Additional data for the liquidity callback.
     * @param recipient The address to receive the removed liquidity.
     * @param tradingFeeRates An array of fee rates for each liquidity bin.
     */
    removeLiquidityBatch(
      recipient: string,
      tradingFeeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Set the denominator of the protocol's % share of the fees
     * @param _feeProtocol new protocol fee for the market
     */
    setFeeProtocol(
      _feeProtocol: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called to settle the market.
     * Executes the settlement process for the Chromatic market.
     */
    settle(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the settlement token of the market.
     */
    settlementToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the vault contract for the market.
     */
    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptId The ID of the liquidity receipt.
     */
    withdrawLiquidity(
      receiptId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws liquidity from a liquidity receipt.
     * @param data Additional data for the liquidity callback.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatch(
      receiptIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
