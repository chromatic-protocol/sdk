/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IOracleProviderRegistryInterface extends utils.Interface {
  functions: {
    "getOracleProviderLevel(address)": FunctionFragment;
    "isRegisteredOracleProvider(address)": FunctionFragment;
    "registerOracleProvider(address)": FunctionFragment;
    "registeredOracleProviders()": FunctionFragment;
    "setOracleProviderLevel(address,uint8)": FunctionFragment;
    "unregisterOracleProvider(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOracleProviderLevel"
      | "isRegisteredOracleProvider"
      | "registerOracleProvider"
      | "registeredOracleProviders"
      | "setOracleProviderLevel"
      | "unregisterOracleProvider"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getOracleProviderLevel",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredOracleProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleProviderLevel",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOracleProviderLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredOracleProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleProviderLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOracleProvider",
    data: BytesLike
  ): Result;

  events: {
    "OracleProviderRegistered(address)": EventFragment;
    "OracleProviderUnregistered(address)": EventFragment;
    "SetOracleProviderLevel(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OracleProviderRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleProviderUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleProviderLevel"): EventFragment;
}

export interface OracleProviderRegisteredEventObject {
  oracleProvider: string;
}
export type OracleProviderRegisteredEvent = TypedEvent<
  [string],
  OracleProviderRegisteredEventObject
>;

export type OracleProviderRegisteredEventFilter =
  TypedEventFilter<OracleProviderRegisteredEvent>;

export interface OracleProviderUnregisteredEventObject {
  oracleProvider: string;
}
export type OracleProviderUnregisteredEvent = TypedEvent<
  [string],
  OracleProviderUnregisteredEventObject
>;

export type OracleProviderUnregisteredEventFilter =
  TypedEventFilter<OracleProviderUnregisteredEvent>;

export interface SetOracleProviderLevelEventObject {
  oracleProvider: string;
  level: number;
}
export type SetOracleProviderLevelEvent = TypedEvent<
  [string, number],
  SetOracleProviderLevelEventObject
>;

export type SetOracleProviderLevelEventFilter =
  TypedEventFilter<SetOracleProviderLevelEvent>;

export interface IOracleProviderRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOracleProviderRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Retrieves the level of an oracle provider in the registry.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Registers an oracle provider.
     * @param oracleProvider The address of the oracle provider to register.
     */
    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<[string[]]>;

    /**
     * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
     * Sets the level of an oracle provider in the registry.
     * @param level The new level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    setOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Retrieves the level of an oracle provider in the registry.
   * @param oracleProvider The address of the oracle provider.
   */
  getOracleProviderLevel(
    oracleProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  /**
   * Checks if an oracle provider is registered.
   * @param oracleProvider The address of the oracle provider to check.
   */
  isRegisteredOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Registers an oracle provider.
   * @param oracleProvider The address of the oracle provider to register.
   */
  registerOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the registered oracle providers.
   */
  registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

  /**
   * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
   * Sets the level of an oracle provider in the registry.
   * @param level The new level to be set for the oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  setOracleProviderLevel(
    oracleProvider: PromiseOrValue<string>,
    level: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Unregisters an oracle provider.
   * @param oracleProvider The address of the oracle provider to unregister.
   */
  unregisterOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Retrieves the level of an oracle provider in the registry.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Registers an oracle provider.
     * @param oracleProvider The address of the oracle provider to register.
     */
    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

    /**
     * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
     * Sets the level of an oracle provider in the registry.
     * @param level The new level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    setOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OracleProviderRegistered(address)"(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderRegisteredEventFilter;
    OracleProviderRegistered(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderRegisteredEventFilter;

    "OracleProviderUnregistered(address)"(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;
    OracleProviderUnregistered(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;

    "SetOracleProviderLevel(address,uint8)"(
      oracleProvider?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null
    ): SetOracleProviderLevelEventFilter;
    SetOracleProviderLevel(
      oracleProvider?: PromiseOrValue<string> | null,
      level?: PromiseOrValue<BigNumberish> | null
    ): SetOracleProviderLevelEventFilter;
  };

  estimateGas: {
    /**
     * Retrieves the level of an oracle provider in the registry.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Registers an oracle provider.
     * @param oracleProvider The address of the oracle provider to register.
     */
    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
     * Sets the level of an oracle provider in the registry.
     * @param level The new level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    setOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Retrieves the level of an oracle provider in the registry.
     * @param oracleProvider The address of the oracle provider.
     */
    getOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an oracle provider is registered.
     * @param oracleProvider The address of the oracle provider to check.
     */
    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Registers an oracle provider.
     * @param oracleProvider The address of the oracle provider to register.
     */
    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the registered oracle providers.
     */
    registeredOracleProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
     * Sets the level of an oracle provider in the registry.
     * @param level The new level to be set for the oracle provider.
     * @param oracleProvider The address of the oracle provider.
     */
    setOracleProviderLevel(
      oracleProvider: PromiseOrValue<string>,
      level: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Unregisters an oracle provider.
     * @param oracleProvider The address of the oracle provider to unregister.
     */
    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
