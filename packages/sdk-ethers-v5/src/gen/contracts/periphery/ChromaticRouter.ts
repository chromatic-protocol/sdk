/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type LpReceiptStruct = {
  id: PromiseOrValue<BigNumberish>;
  oracleVersion: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  action: PromiseOrValue<BigNumberish>;
  tradingFeeRate: PromiseOrValue<BigNumberish>;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export type BinMarginStruct = {
  tradingFeeRate: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
};

export type BinMarginStructOutput = [number, BigNumber] & {
  tradingFeeRate: number;
  amount: BigNumber;
};

export type PositionStruct = {
  id: PromiseOrValue<BigNumberish>;
  openVersion: PromiseOrValue<BigNumberish>;
  closeVersion: PromiseOrValue<BigNumberish>;
  qty: PromiseOrValue<BigNumberish>;
  leverage: PromiseOrValue<BigNumberish>;
  openTimestamp: PromiseOrValue<BigNumberish>;
  closeTimestamp: PromiseOrValue<BigNumberish>;
  takerMargin: PromiseOrValue<BigNumberish>;
  owner: PromiseOrValue<string>;
  _binMargins: BinMarginStruct[];
  _feeProtocol: PromiseOrValue<BigNumberish>;
};

export type PositionStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BinMarginStructOutput[],
  number
] & {
  id: BigNumber;
  openVersion: BigNumber;
  closeVersion: BigNumber;
  qty: BigNumber;
  leverage: number;
  openTimestamp: BigNumber;
  closeTimestamp: BigNumber;
  takerMargin: BigNumber;
  owner: string;
  _binMargins: BinMarginStructOutput[];
  _feeProtocol: number;
};

export interface ChromaticRouterInterface extends utils.Interface {
  functions: {
    "addLiquidity(address,int16,uint256,address)": FunctionFragment;
    "addLiquidityBatch(address,address,int16[],uint256[])": FunctionFragment;
    "addLiquidityBatchCallback(address,address,bytes)": FunctionFragment;
    "addLiquidityCallback(address,address,bytes)": FunctionFragment;
    "claimLiquidity(address,uint256)": FunctionFragment;
    "claimLiquidityBatch(address,uint256[])": FunctionFragment;
    "claimLiquidityBatchCallback(uint256[],bytes)": FunctionFragment;
    "claimLiquidityCallback(uint256,bytes)": FunctionFragment;
    "claimPosition(address,uint256)": FunctionFragment;
    "closePosition(address,uint256)": FunctionFragment;
    "createAccount()": FunctionFragment;
    "getAccount()": FunctionFragment;
    "getLpReceiptIds(address,address)": FunctionFragment;
    "getLpReceiptIds(address)": FunctionFragment;
    "openPosition(address,int224,uint32,uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeLiquidity(address,int16,uint256,address)": FunctionFragment;
    "removeLiquidityBatch(address,address,int16[],uint256[])": FunctionFragment;
    "removeLiquidityBatchCallback(address,uint256[],bytes)": FunctionFragment;
    "removeLiquidityCallback(address,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLiquidity(address,uint256)": FunctionFragment;
    "withdrawLiquidityBatch(address,uint256[])": FunctionFragment;
    "withdrawLiquidityBatchCallback(uint256[],bytes)": FunctionFragment;
    "withdrawLiquidityCallback(uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "addLiquidityBatch"
      | "addLiquidityBatchCallback"
      | "addLiquidityCallback"
      | "claimLiquidity"
      | "claimLiquidityBatch"
      | "claimLiquidityBatchCallback"
      | "claimLiquidityCallback"
      | "claimPosition"
      | "closePosition"
      | "createAccount"
      | "getAccount"
      | "getLpReceiptIds(address,address)"
      | "getLpReceiptIds(address)"
      | "openPosition"
      | "owner"
      | "removeLiquidity"
      | "removeLiquidityBatch"
      | "removeLiquidityBatchCallback"
      | "removeLiquidityCallback"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdrawLiquidity"
      | "withdrawLiquidityBatch"
      | "withdrawLiquidityBatchCallback"
      | "withdrawLiquidityCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatchCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatchCallback",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityCallback",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceiptIds(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceiptIds(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatch",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatchCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityCallback",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatch",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatchCallback",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityCallback",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceiptIds(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceiptIds(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityCallback",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AccountCreatedEventObject {
  account: string;
  owner: string;
}
export type AccountCreatedEvent = TypedEvent<
  [string, string],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ChromaticRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param leverage The leverage of the position.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: PromiseOrValue<string>,
      qty: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      takerMargin: PromiseOrValue<BigNumberish>,
      makerMargin: PromiseOrValue<BigNumberish>,
      maxAllowableTradingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      clbTokenAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      clbTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     */
    withdrawLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds liquidity to a ChromaticMarket contract.
   * @param amount The amount to add as liquidity.
   * @param feeRate The fee rate of the liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The recipient address.
   */
  addLiquidity(
    market: PromiseOrValue<string>,
    feeRate: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
   * @param amounts An array of amounts to add as liquidity for each bin.
   * @param feeRates An array of fee rates for each liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The address of the recipient for each liquidity bin.
   */
  addLiquidityBatch(
    market: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    feeRates: PromiseOrValue<BigNumberish>[],
    amounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after adding liquidity to the Chromatic protocol.
   * @param data Additional data associated with the liquidity addition.
   * @param settlementToken The address of the settlement token used for adding liquidity.
   * @param vault The address of the vault where the liquidity is added.
   */
  addLiquidityBatchCallback(
    settlementToken: PromiseOrValue<string>,
    vault: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after adding liquidity to the Chromatic protocol.
   * @param data Additional data associated with the liquidity addition.
   * @param settlementToken The address of the settlement token used for adding liquidity.
   * @param vault The address of the vault where the liquidity is added.
   */
  addLiquidityCallback(
    settlementToken: PromiseOrValue<string>,
    vault: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
   * Claims liquidity from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptId The ID of the LP receipt.
   */
  claimLiquidity(
    market: PromiseOrValue<string>,
    receiptId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claims liquidity from multiple ChromaticMarket contracts in a batch.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptIds An array of LP receipt IDs to claim liquidity from.
   */
  claimLiquidityBatch(
    market: PromiseOrValue<string>,
    _receiptIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after claiming liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity claim.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  claimLiquidityBatchCallback(
    _receiptIds: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after claiming liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity claim.
   * @param receiptId The ID of the liquidity claim receipt.
   */
  claimLiquidityCallback(
    receiptId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Claims a position from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param positionId The ID of the position to claim.
   */
  claimPosition(
    market: PromiseOrValue<string>,
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Closes a position in a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param positionId The ID of the position to close.
   */
  closePosition(
    market: PromiseOrValue<string>,
    positionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
   * Creates a new user account.
   */
  createAccount(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Retrieves the account of the caller.
   */
  getAccount(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the LP receipt IDs associated with a specific market and owner.
   * @param market The address of the ChromaticMarket contract.
   * @param owner The address of the owner.
   */
  "getLpReceiptIds(address,address)"(
    market: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Retrieves the LP receipt IDs of the caller for the specified market.
   * @param market The address of the ChromaticMarket contract.
   */
  "getLpReceiptIds(address)"(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Opens a new position in a ChromaticMarket contract.
   * @param leverage The leverage of the position.
   * @param makerMargin The margin amount for the maker.
   * @param market The address of the ChromaticMarket contract.
   * @param maxAllowableTradingFee The maximum allowable trading fee.
   * @param qty The quantity of the position.
   * @param takerMargin The margin amount for the taker.
   */
  openPosition(
    market: PromiseOrValue<string>,
    qty: PromiseOrValue<BigNumberish>,
    leverage: PromiseOrValue<BigNumberish>,
    takerMargin: PromiseOrValue<BigNumberish>,
    makerMargin: PromiseOrValue<BigNumberish>,
    maxAllowableTradingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Removes liquidity from a ChromaticMarket contract.
   * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
   * @param feeRate The fee rate of the liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The recipient address.
   */
  removeLiquidity(
    market: PromiseOrValue<string>,
    feeRate: PromiseOrValue<BigNumberish>,
    clbTokenAmount: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Removes liquidity from multiple ChromaticMarket contracts in a batch.
   * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
   * @param feeRates An array of fee rates for each liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The address of the recipient for each liquidity bin.
   */
  removeLiquidityBatch(
    market: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    feeRates: PromiseOrValue<BigNumberish>[],
    clbTokenAmounts: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after removing liquidity from the Chromatic protocol.
   * @param clbToken The address of the Chromatic liquidity token.
   * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
   * @param data Additional data associated with the liquidity removal.
   */
  removeLiquidityBatchCallback(
    clbToken: PromiseOrValue<string>,
    clbTokenIds: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after removing liquidity from the Chromatic protocol.
   * @param clbToken The address of the Chromatic liquidity token.
   * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
   * @param data Additional data associated with the liquidity removal.
   */
  removeLiquidityCallback(
    clbToken: PromiseOrValue<string>,
    clbTokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
   * Withdraws liquidity from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptId The ID of the LP receipt.
   */
  withdrawLiquidity(
    market: PromiseOrValue<string>,
    receiptId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
   */
  withdrawLiquidityBatch(
    market: PromiseOrValue<string>,
    _receiptIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after withdrawing liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity withdrawal.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  withdrawLiquidityBatchCallback(
    _receiptIds: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after withdrawing liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity withdrawal.
   * @param receiptId The ID of the liquidity withdrawal receipt.
   */
  withdrawLiquidityCallback(
    receiptId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(overrides?: CallOverrides): Promise<void>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param leverage The leverage of the position.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: PromiseOrValue<string>,
      qty: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      takerMargin: PromiseOrValue<BigNumberish>,
      makerMargin: PromiseOrValue<BigNumberish>,
      maxAllowableTradingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PositionStructOutput>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      clbTokenAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      clbTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     */
    withdrawLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountCreated(address,address)"(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): AccountCreatedEventFilter;
    AccountCreated(
      account?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): AccountCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param leverage The leverage of the position.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: PromiseOrValue<string>,
      qty: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      takerMargin: PromiseOrValue<BigNumberish>,
      makerMargin: PromiseOrValue<BigNumberish>,
      maxAllowableTradingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      clbTokenAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      clbTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     */
    withdrawLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      amounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: PromiseOrValue<string>,
      vault: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: PromiseOrValue<string>,
      positionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param leverage The leverage of the position.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: PromiseOrValue<string>,
      qty: PromiseOrValue<BigNumberish>,
      leverage: PromiseOrValue<BigNumberish>,
      takerMargin: PromiseOrValue<BigNumberish>,
      makerMargin: PromiseOrValue<BigNumberish>,
      maxAllowableTradingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: PromiseOrValue<string>,
      feeRate: PromiseOrValue<BigNumberish>,
      clbTokenAmount: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      feeRates: PromiseOrValue<BigNumberish>[],
      clbTokenAmounts: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: PromiseOrValue<string>,
      clbTokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.      Throws a `NotExistLpReceipt` error if the specified receipt ID does not exist for the liquidity provider in the given market.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: PromiseOrValue<string>,
      receiptId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: PromiseOrValue<string>,
      _receiptIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     */
    withdrawLiquidityCallback(
      receiptId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
