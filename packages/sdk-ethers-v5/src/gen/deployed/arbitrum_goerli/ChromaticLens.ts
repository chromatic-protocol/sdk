/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type LpReceiptStruct = {
  id: PromiseOrValue<BigNumberish>;
  oracleVersion: PromiseOrValue<BigNumberish>;
  amount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
  action: PromiseOrValue<BigNumberish>;
  tradingFeeRate: PromiseOrValue<BigNumberish>;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export declare namespace IMarketLiquidity {
  export type ClaimableLiquidityStruct = {
    mintingTokenAmountRequested: PromiseOrValue<BigNumberish>;
    mintingCLBTokenAmount: PromiseOrValue<BigNumberish>;
    burningCLBTokenAmountRequested: PromiseOrValue<BigNumberish>;
    burningCLBTokenAmount: PromiseOrValue<BigNumberish>;
    burningTokenAmount: PromiseOrValue<BigNumberish>;
  };

  export type ClaimableLiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    mintingTokenAmountRequested: BigNumber;
    mintingCLBTokenAmount: BigNumber;
    burningCLBTokenAmountRequested: BigNumber;
    burningCLBTokenAmount: BigNumber;
    burningTokenAmount: BigNumber;
  };

  export type LiquidityBinStatusStruct = {
    liquidity: PromiseOrValue<BigNumberish>;
    freeLiquidity: PromiseOrValue<BigNumberish>;
    binValue: PromiseOrValue<BigNumberish>;
    tradingFeeRate: PromiseOrValue<BigNumberish>;
  };

  export type LiquidityBinStatusStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number
  ] & {
    liquidity: BigNumber;
    freeLiquidity: BigNumber;
    binValue: BigNumber;
    tradingFeeRate: number;
  };
}

export declare namespace ChromaticLens {
  export type CLBBalanceStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    binValue: PromiseOrValue<BigNumberish>;
  };

  export type CLBBalanceStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    balance: BigNumber;
    totalSupply: BigNumber;
    binValue: BigNumber;
  };
}

export declare namespace IOracleProvider {
  export type OracleVersionStruct = {
    version: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
  };

  export type OracleVersionStructOutput = [BigNumber, BigNumber, BigNumber] & {
    version: BigNumber;
    timestamp: BigNumber;
    price: BigNumber;
  };
}

export interface ChromaticLensInterface extends utils.Interface {
  functions: {
    "claimableLiquidity(address,int16,uint256)": FunctionFragment;
    "clbBalanceOf(address,address)": FunctionFragment;
    "liquidityBinStatuses(address)": FunctionFragment;
    "lpReceipts(address,address)": FunctionFragment;
    "oracleVersion(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimableLiquidity"
      | "clbBalanceOf"
      | "liquidityBinStatuses"
      | "lpReceipts"
      | "oracleVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimableLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "clbBalanceOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBinStatuses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lpReceipts",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleVersion",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clbBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBinStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpReceipts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleVersion",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ChromaticLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      market: PromiseOrValue<string>,
      tradingFeeRate: PromiseOrValue<BigNumberish>,
      _oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarketLiquidity.ClaimableLiquidityStructOutput]>;

    /**
     * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the CLB token owner.
     */
    clbBalanceOf(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ChromaticLens.CLBBalanceStructOutput[]]>;

    /**
     * Retrieves the liquidity bin statuses for the specified Chromatic Market.
     * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
     */
    liquidityBinStatuses(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMarketLiquidity.LiquidityBinStatusStructOutput[]]>;

    /**
     * Retrieves the LP receipts for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the LP token owner.
     */
    lpReceipts(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[LpReceiptStructOutput[]] & { result: LpReceiptStructOutput[] }>;

    /**
     * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param version An oracle versions.
     */
    oracleVersion(
      market: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IOracleProvider.OracleVersionStructOutput]>;
  };

  /**
   * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
   * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
   * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
   */
  claimableLiquidity(
    market: PromiseOrValue<string>,
    tradingFeeRate: PromiseOrValue<BigNumberish>,
    _oracleVersion: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketLiquidity.ClaimableLiquidityStructOutput>;

  /**
   * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param owner The address of the CLB token owner.
   */
  clbBalanceOf(
    market: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ChromaticLens.CLBBalanceStructOutput[]>;

  /**
   * Retrieves the liquidity bin statuses for the specified Chromatic Market.
   * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
   */
  liquidityBinStatuses(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketLiquidity.LiquidityBinStatusStructOutput[]>;

  /**
   * Retrieves the LP receipts for the specified owner in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param owner The address of the LP token owner.
   */
  lpReceipts(
    market: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<LpReceiptStructOutput[]>;

  /**
   * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param version An oracle versions.
   */
  oracleVersion(
    market: PromiseOrValue<string>,
    version: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IOracleProvider.OracleVersionStructOutput>;

  callStatic: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      market: PromiseOrValue<string>,
      tradingFeeRate: PromiseOrValue<BigNumberish>,
      _oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketLiquidity.ClaimableLiquidityStructOutput>;

    /**
     * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the CLB token owner.
     */
    clbBalanceOf(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ChromaticLens.CLBBalanceStructOutput[]>;

    /**
     * Retrieves the liquidity bin statuses for the specified Chromatic Market.
     * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
     */
    liquidityBinStatuses(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketLiquidity.LiquidityBinStatusStructOutput[]>;

    /**
     * Retrieves the LP receipts for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the LP token owner.
     */
    lpReceipts(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param version An oracle versions.
     */
    oracleVersion(
      market: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IOracleProvider.OracleVersionStructOutput>;
  };

  filters: {};

  estimateGas: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      market: PromiseOrValue<string>,
      tradingFeeRate: PromiseOrValue<BigNumberish>,
      _oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the CLB token owner.
     */
    clbBalanceOf(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the liquidity bin statuses for the specified Chromatic Market.
     * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
     */
    liquidityBinStatuses(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the LP receipts for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the LP token owner.
     */
    lpReceipts(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param version An oracle versions.
     */
    oracleVersion(
      market: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
     * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
     * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
     * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
     */
    claimableLiquidity(
      market: PromiseOrValue<string>,
      tradingFeeRate: PromiseOrValue<BigNumberish>,
      _oracleVersion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the CLB token owner.
     */
    clbBalanceOf(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the liquidity bin statuses for the specified Chromatic Market.
     * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
     */
    liquidityBinStatuses(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the LP receipts for the specified owner in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param owner The address of the LP token owner.
     */
    lpReceipts(
      market: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
     * @param market The address of the Chromatic market contract.
     * @param version An oracle versions.
     */
    oracleVersion(
      market: PromiseOrValue<string>,
      version: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
