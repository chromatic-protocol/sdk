/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ChromaticLiquidatorInterface extends utils.Interface {
  functions: {
    "automate()": FunctionFragment;
    "cancelClaimPositionTask(uint256)": FunctionFragment;
    "cancelLiquidationTask(uint256)": FunctionFragment;
    "claimInterval()": FunctionFragment;
    "claimPosition(address,uint256)": FunctionFragment;
    "createClaimPositionTask(uint256)": FunctionFragment;
    "createLiquidationTask(uint256)": FunctionFragment;
    "dedicatedMsgSender()": FunctionFragment;
    "liquidate(address,uint256)": FunctionFragment;
    "liquidationInterval()": FunctionFragment;
    "resolveClaimPosition(address,uint256)": FunctionFragment;
    "resolveLiquidation(address,uint256)": FunctionFragment;
    "updateClaimInterval(uint256)": FunctionFragment;
    "updateLiquidationInterval(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "automate"
      | "cancelClaimPositionTask"
      | "cancelLiquidationTask"
      | "claimInterval"
      | "claimPosition"
      | "createClaimPositionTask"
      | "createLiquidationTask"
      | "dedicatedMsgSender"
      | "liquidate"
      | "liquidationInterval"
      | "resolveClaimPosition"
      | "resolveLiquidation"
      | "updateClaimInterval"
      | "updateLiquidationInterval"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "automate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelClaimPositionTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLiquidationTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaimPositionTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidationTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dedicatedMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveClaimPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveLiquidation",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationInterval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "automate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelClaimPositionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLiquidationTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaimPositionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidationTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dedicatedMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveClaimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationInterval",
    data: BytesLike
  ): Result;

  events: {
    "UpdateClaimInterval(uint256)": EventFragment;
    "UpdateLiquidationInterval(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateClaimInterval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLiquidationInterval"): EventFragment;
}

export interface UpdateClaimIntervalEventObject {
  interval: BigNumber;
}
export type UpdateClaimIntervalEvent = TypedEvent<
  [BigNumber],
  UpdateClaimIntervalEventObject
>;

export type UpdateClaimIntervalEventFilter =
  TypedEventFilter<UpdateClaimIntervalEvent>;

export interface UpdateLiquidationIntervalEventObject {
  interval: BigNumber;
}
export type UpdateLiquidationIntervalEvent = TypedEvent<
  [BigNumber],
  UpdateLiquidationIntervalEventObject
>;

export type UpdateLiquidationIntervalEventFilter =
  TypedEventFilter<UpdateLiquidationIntervalEvent>;

export interface ChromaticLiquidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticLiquidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    automate(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Can only be called by a registered market.
     * Cancels a claim position task for a given position.
     * @param positionId The ID of the position for which to cancel the claim position task.
     */
    cancelClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by a registered market.
     * Cancels a liquidation task for a given position.
     * @param positionId The ID of the position for which to cancel the liquidation task.
     */
    cancelLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Claims a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by a registered market.
     * Creates a claim position task for a given position.
     * @param positionId The ID of the position to be claimed.
     */
    createClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by a registered market.
     * Creates a liquidation task for a given position.
     * @param positionId The ID of the position to be liquidated.
     */
    createLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Liquidates a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    liquidate(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidationInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the claim of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    resolveClaimPosition(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the liquidation of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    resolveLiquidation(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    /**
     * Can only be called by the DAO
     * Updates the claim task interval.
     * @param interval The new claim task interval.
     */
    updateClaimInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Can only be called by the DAO
     * Updates the liquidation task interval.
     * @param interval The new liquidation task interval.
     */
    updateLiquidationInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  automate(overrides?: CallOverrides): Promise<string>;

  /**
   * Can only be called by a registered market.
   * Cancels a claim position task for a given position.
   * @param positionId The ID of the position for which to cancel the claim position task.
   */
  cancelClaimPositionTask(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by a registered market.
   * Cancels a liquidation task for a given position.
   * @param positionId The ID of the position for which to cancel the liquidation task.
   */
  cancelLiquidationTask(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Claims a position in a market.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be claimed.
   */
  claimPosition(
    market: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by a registered market.
   * Creates a claim position task for a given position.
   * @param positionId The ID of the position to be claimed.
   */
  createClaimPositionTask(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by a registered market.
   * Creates a liquidation task for a given position.
   * @param positionId The ID of the position to be liquidated.
   */
  createLiquidationTask(
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

  /**
   * Liquidates a position in a market.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be liquidated.
   */
  liquidate(
    market: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidationInterval(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * This function is called by the Gelato automation system.
   * Resolves the claim of a position.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be claimed.
   */
  resolveClaimPosition(
    _market: string,
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  /**
   * This function is called by the Gelato automation system.
   * Resolves the liquidation of a position.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be liquidated.
   */
  resolveLiquidation(
    _market: string,
    positionId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  /**
   * Can only be called by the DAO
   * Updates the claim task interval.
   * @param interval The new claim task interval.
   */
  updateClaimInterval(
    interval: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Can only be called by the DAO
   * Updates the liquidation task interval.
   * @param interval The new liquidation task interval.
   */
  updateLiquidationInterval(
    interval: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    automate(overrides?: CallOverrides): Promise<string>;

    /**
     * Can only be called by a registered market.
     * Cancels a claim position task for a given position.
     * @param positionId The ID of the position for which to cancel the claim position task.
     */
    cancelClaimPositionTask(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by a registered market.
     * Cancels a liquidation task for a given position.
     * @param positionId The ID of the position for which to cancel the liquidation task.
     */
    cancelLiquidationTask(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Claims a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by a registered market.
     * Creates a claim position task for a given position.
     * @param positionId The ID of the position to be claimed.
     */
    createClaimPositionTask(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by a registered market.
     * Creates a liquidation task for a given position.
     * @param positionId The ID of the position to be liquidated.
     */
    createLiquidationTask(
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<string>;

    /**
     * Liquidates a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    liquidate(
      market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the claim of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    resolveClaimPosition(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the liquidation of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    resolveLiquidation(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    /**
     * Can only be called by the DAO
     * Updates the claim task interval.
     * @param interval The new claim task interval.
     */
    updateClaimInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Can only be called by the DAO
     * Updates the liquidation task interval.
     * @param interval The new liquidation task interval.
     */
    updateLiquidationInterval(
      interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "UpdateClaimInterval(uint256)"(
      interval?: BigNumberish | null
    ): UpdateClaimIntervalEventFilter;
    UpdateClaimInterval(
      interval?: BigNumberish | null
    ): UpdateClaimIntervalEventFilter;

    "UpdateLiquidationInterval(uint256)"(
      interval?: BigNumberish | null
    ): UpdateLiquidationIntervalEventFilter;
    UpdateLiquidationInterval(
      interval?: BigNumberish | null
    ): UpdateLiquidationIntervalEventFilter;
  };

  estimateGas: {
    automate(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Can only be called by a registered market.
     * Cancels a claim position task for a given position.
     * @param positionId The ID of the position for which to cancel the claim position task.
     */
    cancelClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by a registered market.
     * Cancels a liquidation task for a given position.
     * @param positionId The ID of the position for which to cancel the liquidation task.
     */
    cancelLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Claims a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by a registered market.
     * Creates a claim position task for a given position.
     * @param positionId The ID of the position to be claimed.
     */
    createClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by a registered market.
     * Creates a liquidation task for a given position.
     * @param positionId The ID of the position to be liquidated.
     */
    createLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    dedicatedMsgSender(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Liquidates a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    liquidate(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidationInterval(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the claim of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    resolveClaimPosition(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the liquidation of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    resolveLiquidation(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Can only be called by the DAO
     * Updates the claim task interval.
     * @param interval The new claim task interval.
     */
    updateClaimInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Can only be called by the DAO
     * Updates the liquidation task interval.
     * @param interval The new liquidation task interval.
     */
    updateLiquidationInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    automate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Can only be called by a registered market.
     * Cancels a claim position task for a given position.
     * @param positionId The ID of the position for which to cancel the claim position task.
     */
    cancelClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by a registered market.
     * Cancels a liquidation task for a given position.
     * @param positionId The ID of the position for which to cancel the liquidation task.
     */
    cancelLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Claims a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by a registered market.
     * Creates a claim position task for a given position.
     * @param positionId The ID of the position to be claimed.
     */
    createClaimPositionTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by a registered market.
     * Creates a liquidation task for a given position.
     * @param positionId The ID of the position to be liquidated.
     */
    createLiquidationTask(
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    dedicatedMsgSender(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Liquidates a position in a market.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    liquidate(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidationInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the claim of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be claimed.
     */
    resolveClaimPosition(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function is called by the Gelato automation system.
     * Resolves the liquidation of a position.
     * @param market The address of the market contract.
     * @param positionId The ID of the position to be liquidated.
     */
    resolveLiquidation(
      _market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the DAO
     * Updates the claim task interval.
     * @param interval The new claim task interval.
     */
    updateClaimInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Can only be called by the DAO
     * Updates the liquidation task interval.
     * @param interval The new liquidation task interval.
     */
    updateLiquidationInterval(
      interval: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
