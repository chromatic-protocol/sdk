/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ChromaticVaultInterface extends utils.Interface {
  functions: {
    "cancelMakerEarningDistributionTask(address)": FunctionFragment;
    "cancelMarketEarningDistributionTask(address)": FunctionFragment;
    "createMakerEarningDistributionTask(address)": FunctionFragment;
    "createMarketEarningDistributionTask(address)": FunctionFragment;
    "distributeMakerEarning(address,uint256,address)": FunctionFragment;
    "distributeMarketEarning(address,uint256,address)": FunctionFragment;
    "earningDistributor()": FunctionFragment;
    "factory()": FunctionFragment;
    "flashLoan(address,uint256,address,bytes)": FunctionFragment;
    "getPendingBinShare(address,address,uint256)": FunctionFragment;
    "keeperFeePayer()": FunctionFragment;
    "makerBalances(address)": FunctionFragment;
    "makerMarketBalances(address)": FunctionFragment;
    "onAddLiquidity(address,uint256)": FunctionFragment;
    "onClaimPosition(address,uint256,address,uint256,uint256)": FunctionFragment;
    "onOpenPosition(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "onSettlePendingLiquidity(address,uint256,uint256)": FunctionFragment;
    "onWithdrawLiquidity(address,address,uint256)": FunctionFragment;
    "pendingDeposits(address)": FunctionFragment;
    "pendingMakerEarnings(address)": FunctionFragment;
    "pendingMarketEarnings(address)": FunctionFragment;
    "pendingWithdrawals(address)": FunctionFragment;
    "takerBalances(address)": FunctionFragment;
    "takerMarketBalances(address)": FunctionFragment;
    "transferKeeperFee(address,address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelMakerEarningDistributionTask"
      | "cancelMarketEarningDistributionTask"
      | "createMakerEarningDistributionTask"
      | "createMarketEarningDistributionTask"
      | "distributeMakerEarning"
      | "distributeMarketEarning"
      | "earningDistributor"
      | "factory"
      | "flashLoan"
      | "getPendingBinShare"
      | "keeperFeePayer"
      | "makerBalances"
      | "makerMarketBalances"
      | "onAddLiquidity"
      | "onClaimPosition"
      | "onOpenPosition"
      | "onSettlePendingLiquidity"
      | "onWithdrawLiquidity"
      | "pendingDeposits"
      | "pendingMakerEarnings"
      | "pendingMarketEarnings"
      | "pendingWithdrawals"
      | "takerBalances"
      | "takerMarketBalances"
      | "transferKeeperFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelMakerEarningDistributionTask",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarketEarningDistributionTask",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createMakerEarningDistributionTask",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketEarningDistributionTask",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeMakerEarning",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeMarketEarning",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "earningDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingBinShare",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperFeePayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makerBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "makerMarketBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "onAddLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onClaimPosition",
    values: [string, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onOpenPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onSettlePendingLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onWithdrawLiquidity",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDeposits",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMakerEarnings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingMarketEarnings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "takerBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "takerMarketBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferKeeperFee",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelMakerEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarketEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMakerEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeMakerEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeMarketEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earningDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingBinShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makerMarketBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onClaimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onSettlePendingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onWithdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMakerEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingMarketEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takerMarketBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferKeeperFee",
    data: BytesLike
  ): Result;

  events: {
    "FlashLoan(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "MakerEarningDistributed(address,uint256,uint256)": EventFragment;
    "MarketEarningAccumulated(address,uint256)": EventFragment;
    "MarketEarningDistributed(address,uint256,uint256,uint256)": EventFragment;
    "OnAddLiquidity(address,uint256)": EventFragment;
    "OnClaimPosition(address,uint256,address,uint256,uint256)": EventFragment;
    "OnOpenPosition(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OnSettlePendingLiquidity(address,uint256,uint256)": EventFragment;
    "OnWithdrawLiquidity(address,uint256,address)": EventFragment;
    "TransferKeeperFee(uint256,uint256)": EventFragment;
    "TransferKeeperFee(address,uint256,uint256)": EventFragment;
    "TransferProtocolFee(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerEarningDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEarningAccumulated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEarningDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnAddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnClaimPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnOpenPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSettlePendingLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnWithdrawLiquidity"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferKeeperFee(uint256,uint256)"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TransferKeeperFee(address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferProtocolFee"): EventFragment;
}

export interface FlashLoanEventObject {
  sender: string;
  recipient: string;
  amount: BigNumber;
  paid: BigNumber;
  paidToTakerPool: BigNumber;
  paidToMakerPool: BigNumber;
}
export type FlashLoanEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  FlashLoanEventObject
>;

export type FlashLoanEventFilter = TypedEventFilter<FlashLoanEvent>;

export interface MakerEarningDistributedEventObject {
  token: string;
  earning: BigNumber;
  usedKeeperFee: BigNumber;
}
export type MakerEarningDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MakerEarningDistributedEventObject
>;

export type MakerEarningDistributedEventFilter =
  TypedEventFilter<MakerEarningDistributedEvent>;

export interface MarketEarningAccumulatedEventObject {
  market: string;
  earning: BigNumber;
}
export type MarketEarningAccumulatedEvent = TypedEvent<
  [string, BigNumber],
  MarketEarningAccumulatedEventObject
>;

export type MarketEarningAccumulatedEventFilter =
  TypedEventFilter<MarketEarningAccumulatedEvent>;

export interface MarketEarningDistributedEventObject {
  market: string;
  earning: BigNumber;
  usedKeeperFee: BigNumber;
  marketBalance: BigNumber;
}
export type MarketEarningDistributedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  MarketEarningDistributedEventObject
>;

export type MarketEarningDistributedEventFilter =
  TypedEventFilter<MarketEarningDistributedEvent>;

export interface OnAddLiquidityEventObject {
  market: string;
  amount: BigNumber;
}
export type OnAddLiquidityEvent = TypedEvent<
  [string, BigNumber],
  OnAddLiquidityEventObject
>;

export type OnAddLiquidityEventFilter = TypedEventFilter<OnAddLiquidityEvent>;

export interface OnClaimPositionEventObject {
  market: string;
  positionId: BigNumber;
  recipient: string;
  takerMargin: BigNumber;
  settlementAmount: BigNumber;
}
export type OnClaimPositionEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber],
  OnClaimPositionEventObject
>;

export type OnClaimPositionEventFilter = TypedEventFilter<OnClaimPositionEvent>;

export interface OnOpenPositionEventObject {
  market: string;
  positionId: BigNumber;
  takerMargin: BigNumber;
  tradingFee: BigNumber;
  protocolFee: BigNumber;
}
export type OnOpenPositionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  OnOpenPositionEventObject
>;

export type OnOpenPositionEventFilter = TypedEventFilter<OnOpenPositionEvent>;

export interface OnSettlePendingLiquidityEventObject {
  market: string;
  pendingDeposit: BigNumber;
  pendingWithdrawal: BigNumber;
}
export type OnSettlePendingLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  OnSettlePendingLiquidityEventObject
>;

export type OnSettlePendingLiquidityEventFilter =
  TypedEventFilter<OnSettlePendingLiquidityEvent>;

export interface OnWithdrawLiquidityEventObject {
  market: string;
  amount: BigNumber;
  recipient: string;
}
export type OnWithdrawLiquidityEvent = TypedEvent<
  [string, BigNumber, string],
  OnWithdrawLiquidityEventObject
>;

export type OnWithdrawLiquidityEventFilter =
  TypedEventFilter<OnWithdrawLiquidityEvent>;

export interface TransferKeeperFee_uint256_uint256_EventObject {
  fee: BigNumber;
  amount: BigNumber;
}
export type TransferKeeperFee_uint256_uint256_Event = TypedEvent<
  [BigNumber, BigNumber],
  TransferKeeperFee_uint256_uint256_EventObject
>;

export type TransferKeeperFee_uint256_uint256_EventFilter =
  TypedEventFilter<TransferKeeperFee_uint256_uint256_Event>;

export interface TransferKeeperFee_address_uint256_uint256_EventObject {
  market: string;
  fee: BigNumber;
  amount: BigNumber;
}
export type TransferKeeperFee_address_uint256_uint256_Event = TypedEvent<
  [string, BigNumber, BigNumber],
  TransferKeeperFee_address_uint256_uint256_EventObject
>;

export type TransferKeeperFee_address_uint256_uint256_EventFilter =
  TypedEventFilter<TransferKeeperFee_address_uint256_uint256_Event>;

export interface TransferProtocolFeeEventObject {
  market: string;
  positionId: BigNumber;
  amount: BigNumber;
}
export type TransferProtocolFeeEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TransferProtocolFeeEventObject
>;

export type TransferProtocolFeeEventFilter =
  TypedEventFilter<TransferProtocolFeeEvent>;

export interface ChromaticVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Cancels a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    cancelMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Cancels a market earning distribution task for a market.
     * @param market The address of the market.
     */
    cancelMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Creates a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    createMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Creates a market earning distribution task for a market.
     * @param market The address of the market.
     */
    createMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Distributes the maker earning for a token to the each markets.
     * @param fee The keeper fee amount.
     * @param keeper The keeper address to receive fee.
     * @param token The address of the settlement token.
     */
    distributeMakerEarning(
      token: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Distributes the market earning for a market to the each bins.
     * @param fee The fee amount.
     * @param keeper The keeper address to receive fee.
     * @param market The address of the market.
     */
    distributeMarketEarning(
      market: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    earningDistributor(overrides?: CallOverrides): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.
     * Executes a flash loan.
     * @param amount The amount of the flash loan.
     * @param data Additional data for the flash loan.
     * @param recipient The address to receive the flash loan.
     * @param token The address of the token for the flash loan.
     */
    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.
     * Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.
     * @param binBalance The balance of funds in the bin.
     * @param market The address of the market.
     * @param settlementToken The settlement token address.
     */
    getPendingBinShare(
      market: string,
      settlementToken: string,
      binBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keeperFeePayer(overrides?: CallOverrides): Promise<[string]>;

    makerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is added to the vault by a market contract.
     * @param amount The amount of liquidity being added.
     * @param settlementToken The settlement token address.
     */
    onAddLiquidity(
      settlementToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is claimed by a market contract.
     * @param positionId The ID of the claimed position.
     * @param recipient The address that will receive the settlement amount.
     * @param settlementAmount The amount to be settled for the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     */
    onClaimPosition(
      settlementToken: string,
      positionId: BigNumberish,
      recipient: string,
      takerMargin: BigNumberish,
      settlementAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is opened by a market contract.
     * @param positionId The ID of the opened position.
     * @param protocolFee The protocol fee associated with the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     * @param tradingFee The trading fee associated with the position.
     */
    onOpenPosition(
      settlementToken: string,
      positionId: BigNumberish,
      takerMargin: BigNumberish,
      tradingFee: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when pending liquidity is settled in the vault by a market contract.
     * @param pendingDeposit The amount of pending deposits being settled.
     * @param pendingWithdrawal The amount of pending withdrawals being settled.
     * @param settlementToken The settlement token address.
     */
    onSettlePendingLiquidity(
      settlementToken: string,
      pendingDeposit: BigNumberish,
      pendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is withdrawn from the vault by a market contract.
     * @param amount The amount of liquidity to be withdrawn.
     * @param recipient The address that will receive the withdrawn liquidity.
     * @param settlementToken The settlement token address.
     */
    onWithdrawLiquidity(
      settlementToken: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMakerEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingMarketEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    takerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * This function can only be called by a market contract.
     * Transfers the keeper fee from the market to the specified keeper.
     * @param fee The amount of the fee to transfer as native token.
     * @param keeper The address of the keeper to receive the fee.
     * @param margin The margin amount used for the fee payment.
     * @param settlementToken The settlement token address.
     */
    transferKeeperFee(
      settlementToken: string,
      keeper: string,
      fee: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  /**
   * Cancels a maker earning distribution task for a token.
   * @param token The address of the settlement token.
   */
  cancelMakerEarningDistributionTask(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Cancels a market earning distribution task for a market.
   * @param market The address of the market.
   */
  cancelMarketEarningDistributionTask(
    market: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Creates a maker earning distribution task for a token.
   * @param token The address of the settlement token.
   */
  createMakerEarningDistributionTask(
    token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Creates a market earning distribution task for a market.
   * @param market The address of the market.
   */
  createMarketEarningDistributionTask(
    market: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Distributes the maker earning for a token to the each markets.
   * @param fee The keeper fee amount.
   * @param keeper The keeper address to receive fee.
   * @param token The address of the settlement token.
   */
  distributeMakerEarning(
    token: string,
    fee: BigNumberish,
    keeper: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Distributes the market earning for a market to the each bins.
   * @param fee The fee amount.
   * @param keeper The keeper address to receive fee.
   * @param market The address of the market.
   */
  distributeMarketEarning(
    market: string,
    fee: BigNumberish,
    keeper: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  earningDistributor(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  /**
   * Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.
   * Executes a flash loan.
   * @param amount The amount of the flash loan.
   * @param data Additional data for the flash loan.
   * @param recipient The address to receive the flash loan.
   * @param token The address of the token for the flash loan.
   */
  flashLoan(
    token: string,
    amount: BigNumberish,
    recipient: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.
   * Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.
   * @param binBalance The balance of funds in the bin.
   * @param market The address of the market.
   * @param settlementToken The settlement token address.
   */
  getPendingBinShare(
    market: string,
    settlementToken: string,
    binBalance: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keeperFeePayer(overrides?: CallOverrides): Promise<string>;

  makerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  makerMarketBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function can only be called by a market contract.
   * Called when liquidity is added to the vault by a market contract.
   * @param amount The amount of liquidity being added.
   * @param settlementToken The settlement token address.
   */
  onAddLiquidity(
    settlementToken: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by a market contract.
   * Called when a position is claimed by a market contract.
   * @param positionId The ID of the claimed position.
   * @param recipient The address that will receive the settlement amount.
   * @param settlementAmount The amount to be settled for the position.
   * @param settlementToken The settlement token address.
   * @param takerMargin The margin amount provided by the taker for the position.
   */
  onClaimPosition(
    settlementToken: string,
    positionId: BigNumberish,
    recipient: string,
    takerMargin: BigNumberish,
    settlementAmount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by a market contract.
   * Called when a position is opened by a market contract.
   * @param positionId The ID of the opened position.
   * @param protocolFee The protocol fee associated with the position.
   * @param settlementToken The settlement token address.
   * @param takerMargin The margin amount provided by the taker for the position.
   * @param tradingFee The trading fee associated with the position.
   */
  onOpenPosition(
    settlementToken: string,
    positionId: BigNumberish,
    takerMargin: BigNumberish,
    tradingFee: BigNumberish,
    protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by a market contract.
   * Called when pending liquidity is settled in the vault by a market contract.
   * @param pendingDeposit The amount of pending deposits being settled.
   * @param pendingWithdrawal The amount of pending withdrawals being settled.
   * @param settlementToken The settlement token address.
   */
  onSettlePendingLiquidity(
    settlementToken: string,
    pendingDeposit: BigNumberish,
    pendingWithdrawal: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function can only be called by a market contract.
   * Called when liquidity is withdrawn from the vault by a market contract.
   * @param amount The amount of liquidity to be withdrawn.
   * @param recipient The address that will receive the withdrawn liquidity.
   * @param settlementToken The settlement token address.
   */
  onWithdrawLiquidity(
    settlementToken: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingDeposits(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  pendingMakerEarnings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingMarketEarnings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingWithdrawals(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  takerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  takerMarketBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This function can only be called by a market contract.
   * Transfers the keeper fee from the market to the specified keeper.
   * @param fee The amount of the fee to transfer as native token.
   * @param keeper The address of the keeper to receive the fee.
   * @param margin The margin amount used for the fee payment.
   * @param settlementToken The settlement token address.
   */
  transferKeeperFee(
    settlementToken: string,
    keeper: string,
    fee: BigNumberish,
    margin: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Cancels a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    cancelMakerEarningDistributionTask(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Cancels a market earning distribution task for a market.
     * @param market The address of the market.
     */
    cancelMarketEarningDistributionTask(
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Creates a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    createMakerEarningDistributionTask(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Creates a market earning distribution task for a market.
     * @param market The address of the market.
     */
    createMarketEarningDistributionTask(
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Distributes the maker earning for a token to the each markets.
     * @param fee The keeper fee amount.
     * @param keeper The keeper address to receive fee.
     * @param token The address of the settlement token.
     */
    distributeMakerEarning(
      token: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Distributes the market earning for a market to the each bins.
     * @param fee The fee amount.
     * @param keeper The keeper address to receive fee.
     * @param market The address of the market.
     */
    distributeMarketEarning(
      market: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    earningDistributor(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    /**
     * Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.
     * Executes a flash loan.
     * @param amount The amount of the flash loan.
     * @param data Additional data for the flash loan.
     * @param recipient The address to receive the flash loan.
     * @param token The address of the token for the flash loan.
     */
    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.
     * Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.
     * @param binBalance The balance of funds in the bin.
     * @param market The address of the market.
     * @param settlementToken The settlement token address.
     */
    getPendingBinShare(
      market: string,
      settlementToken: string,
      binBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperFeePayer(overrides?: CallOverrides): Promise<string>;

    makerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    makerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is added to the vault by a market contract.
     * @param amount The amount of liquidity being added.
     * @param settlementToken The settlement token address.
     */
    onAddLiquidity(
      settlementToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is claimed by a market contract.
     * @param positionId The ID of the claimed position.
     * @param recipient The address that will receive the settlement amount.
     * @param settlementAmount The amount to be settled for the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     */
    onClaimPosition(
      settlementToken: string,
      positionId: BigNumberish,
      recipient: string,
      takerMargin: BigNumberish,
      settlementAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is opened by a market contract.
     * @param positionId The ID of the opened position.
     * @param protocolFee The protocol fee associated with the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     * @param tradingFee The trading fee associated with the position.
     */
    onOpenPosition(
      settlementToken: string,
      positionId: BigNumberish,
      takerMargin: BigNumberish,
      tradingFee: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by a market contract.
     * Called when pending liquidity is settled in the vault by a market contract.
     * @param pendingDeposit The amount of pending deposits being settled.
     * @param pendingWithdrawal The amount of pending withdrawals being settled.
     * @param settlementToken The settlement token address.
     */
    onSettlePendingLiquidity(
      settlementToken: string,
      pendingDeposit: BigNumberish,
      pendingWithdrawal: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is withdrawn from the vault by a market contract.
     * @param amount The amount of liquidity to be withdrawn.
     * @param recipient The address that will receive the withdrawn liquidity.
     * @param settlementToken The settlement token address.
     */
    onWithdrawLiquidity(
      settlementToken: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMakerEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    takerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Transfers the keeper fee from the market to the specified keeper.
     * @param fee The amount of the fee to transfer as native token.
     * @param keeper The address of the keeper to receive the fee.
     * @param margin The margin amount used for the fee payment.
     * @param settlementToken The settlement token address.
     */
    transferKeeperFee(
      settlementToken: string,
      keeper: string,
      fee: BigNumberish,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "FlashLoan(address,address,uint256,uint256,uint256,uint256)"(
      sender?: string | null,
      recipient?: string | null,
      amount?: BigNumberish | null,
      paid?: null,
      paidToTakerPool?: null,
      paidToMakerPool?: null
    ): FlashLoanEventFilter;
    FlashLoan(
      sender?: string | null,
      recipient?: string | null,
      amount?: BigNumberish | null,
      paid?: null,
      paidToTakerPool?: null,
      paidToMakerPool?: null
    ): FlashLoanEventFilter;

    "MakerEarningDistributed(address,uint256,uint256)"(
      token?: string | null,
      earning?: BigNumberish | null,
      usedKeeperFee?: BigNumberish | null
    ): MakerEarningDistributedEventFilter;
    MakerEarningDistributed(
      token?: string | null,
      earning?: BigNumberish | null,
      usedKeeperFee?: BigNumberish | null
    ): MakerEarningDistributedEventFilter;

    "MarketEarningAccumulated(address,uint256)"(
      market?: string | null,
      earning?: null
    ): MarketEarningAccumulatedEventFilter;
    MarketEarningAccumulated(
      market?: string | null,
      earning?: null
    ): MarketEarningAccumulatedEventFilter;

    "MarketEarningDistributed(address,uint256,uint256,uint256)"(
      market?: string | null,
      earning?: BigNumberish | null,
      usedKeeperFee?: BigNumberish | null,
      marketBalance?: null
    ): MarketEarningDistributedEventFilter;
    MarketEarningDistributed(
      market?: string | null,
      earning?: BigNumberish | null,
      usedKeeperFee?: BigNumberish | null,
      marketBalance?: null
    ): MarketEarningDistributedEventFilter;

    "OnAddLiquidity(address,uint256)"(
      market?: string | null,
      amount?: BigNumberish | null
    ): OnAddLiquidityEventFilter;
    OnAddLiquidity(
      market?: string | null,
      amount?: BigNumberish | null
    ): OnAddLiquidityEventFilter;

    "OnClaimPosition(address,uint256,address,uint256,uint256)"(
      market?: string | null,
      positionId?: BigNumberish | null,
      recipient?: string | null,
      takerMargin?: null,
      settlementAmount?: null
    ): OnClaimPositionEventFilter;
    OnClaimPosition(
      market?: string | null,
      positionId?: BigNumberish | null,
      recipient?: string | null,
      takerMargin?: null,
      settlementAmount?: null
    ): OnClaimPositionEventFilter;

    "OnOpenPosition(address,uint256,uint256,uint256,uint256)"(
      market?: string | null,
      positionId?: BigNumberish | null,
      takerMargin?: BigNumberish | null,
      tradingFee?: null,
      protocolFee?: null
    ): OnOpenPositionEventFilter;
    OnOpenPosition(
      market?: string | null,
      positionId?: BigNumberish | null,
      takerMargin?: BigNumberish | null,
      tradingFee?: null,
      protocolFee?: null
    ): OnOpenPositionEventFilter;

    "OnSettlePendingLiquidity(address,uint256,uint256)"(
      market?: string | null,
      pendingDeposit?: BigNumberish | null,
      pendingWithdrawal?: BigNumberish | null
    ): OnSettlePendingLiquidityEventFilter;
    OnSettlePendingLiquidity(
      market?: string | null,
      pendingDeposit?: BigNumberish | null,
      pendingWithdrawal?: BigNumberish | null
    ): OnSettlePendingLiquidityEventFilter;

    "OnWithdrawLiquidity(address,uint256,address)"(
      market?: string | null,
      amount?: BigNumberish | null,
      recipient?: string | null
    ): OnWithdrawLiquidityEventFilter;
    OnWithdrawLiquidity(
      market?: string | null,
      amount?: BigNumberish | null,
      recipient?: string | null
    ): OnWithdrawLiquidityEventFilter;

    "TransferKeeperFee(uint256,uint256)"(
      fee?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferKeeperFee_uint256_uint256_EventFilter;
    "TransferKeeperFee(address,uint256,uint256)"(
      market?: string | null,
      fee?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferKeeperFee_address_uint256_uint256_EventFilter;

    "TransferProtocolFee(address,uint256,uint256)"(
      market?: string | null,
      positionId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferProtocolFeeEventFilter;
    TransferProtocolFee(
      market?: string | null,
      positionId?: BigNumberish | null,
      amount?: BigNumberish | null
    ): TransferProtocolFeeEventFilter;
  };

  estimateGas: {
    /**
     * Cancels a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    cancelMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Cancels a market earning distribution task for a market.
     * @param market The address of the market.
     */
    cancelMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Creates a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    createMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Creates a market earning distribution task for a market.
     * @param market The address of the market.
     */
    createMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Distributes the maker earning for a token to the each markets.
     * @param fee The keeper fee amount.
     * @param keeper The keeper address to receive fee.
     * @param token The address of the settlement token.
     */
    distributeMakerEarning(
      token: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Distributes the market earning for a market to the each bins.
     * @param fee The fee amount.
     * @param keeper The keeper address to receive fee.
     * @param market The address of the market.
     */
    distributeMarketEarning(
      market: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    earningDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.
     * Executes a flash loan.
     * @param amount The amount of the flash loan.
     * @param data Additional data for the flash loan.
     * @param recipient The address to receive the flash loan.
     * @param token The address of the token for the flash loan.
     */
    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.
     * Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.
     * @param binBalance The balance of funds in the bin.
     * @param market The address of the market.
     * @param settlementToken The settlement token address.
     */
    getPendingBinShare(
      market: string,
      settlementToken: string,
      binBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperFeePayer(overrides?: CallOverrides): Promise<BigNumber>;

    makerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    makerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is added to the vault by a market contract.
     * @param amount The amount of liquidity being added.
     * @param settlementToken The settlement token address.
     */
    onAddLiquidity(
      settlementToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is claimed by a market contract.
     * @param positionId The ID of the claimed position.
     * @param recipient The address that will receive the settlement amount.
     * @param settlementAmount The amount to be settled for the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     */
    onClaimPosition(
      settlementToken: string,
      positionId: BigNumberish,
      recipient: string,
      takerMargin: BigNumberish,
      settlementAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is opened by a market contract.
     * @param positionId The ID of the opened position.
     * @param protocolFee The protocol fee associated with the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     * @param tradingFee The trading fee associated with the position.
     */
    onOpenPosition(
      settlementToken: string,
      positionId: BigNumberish,
      takerMargin: BigNumberish,
      tradingFee: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when pending liquidity is settled in the vault by a market contract.
     * @param pendingDeposit The amount of pending deposits being settled.
     * @param pendingWithdrawal The amount of pending withdrawals being settled.
     * @param settlementToken The settlement token address.
     */
    onSettlePendingLiquidity(
      settlementToken: string,
      pendingDeposit: BigNumberish,
      pendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is withdrawn from the vault by a market contract.
     * @param amount The amount of liquidity to be withdrawn.
     * @param recipient The address that will receive the withdrawn liquidity.
     * @param settlementToken The settlement token address.
     */
    onWithdrawLiquidity(
      settlementToken: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMakerEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingMarketEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    takerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    takerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This function can only be called by a market contract.
     * Transfers the keeper fee from the market to the specified keeper.
     * @param fee The amount of the fee to transfer as native token.
     * @param keeper The address of the keeper to receive the fee.
     * @param margin The margin amount used for the fee payment.
     * @param settlementToken The settlement token address.
     */
    transferKeeperFee(
      settlementToken: string,
      keeper: string,
      fee: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Cancels a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    cancelMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Cancels a market earning distribution task for a market.
     * @param market The address of the market.
     */
    cancelMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a maker earning distribution task for a token.
     * @param token The address of the settlement token.
     */
    createMakerEarningDistributionTask(
      token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a market earning distribution task for a market.
     * @param market The address of the market.
     */
    createMarketEarningDistributionTask(
      market: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes the maker earning for a token to the each markets.
     * @param fee The keeper fee amount.
     * @param keeper The keeper address to receive fee.
     * @param token The address of the settlement token.
     */
    distributeMakerEarning(
      token: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes the market earning for a market to the each bins.
     * @param fee The fee amount.
     * @param keeper The keeper address to receive fee.
     * @param market The address of the market.
     */
    distributeMarketEarning(
      market: string,
      fee: BigNumberish,
      keeper: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    earningDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Throws a `NotEnoughBalance` error if the loan amount exceeds the available balance.      Throws a `NotEnoughFeePaid` error if the fee has not been paid by the recipient. Requirements: - The loan amount must not exceed the available balance after considering pending deposits and withdrawals. - The fee for the flash loan must be paid by the recipient. - The total amount paid must be distributed between the taker pool and maker pool according to their balances. - The amount paid to the taker pool must be transferred to the DAO treasury address. - The amount paid to the maker pool must be added to the pending maker earnings. Emits a `FlashLoan` event with details of the flash loan execution.
     * Executes a flash loan.
     * @param amount The amount of the flash loan.
     * @param data Additional data for the flash loan.
     * @param recipient The address to receive the flash loan.
     * @param token The address of the token for the flash loan.
     */
    flashLoan(
      token: string,
      amount: BigNumberish,
      recipient: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * The pending share of earnings is calculated based on the bin balance, maker balances, and market balances.
     * Retrieves the pending share of earnings for a specific bin (subset) of funds in a market.
     * @param binBalance The balance of funds in the bin.
     * @param market The address of the market.
     * @param settlementToken The settlement token address.
     */
    getPendingBinShare(
      market: string,
      settlementToken: string,
      binBalance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperFeePayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is added to the vault by a market contract.
     * @param amount The amount of liquidity being added.
     * @param settlementToken The settlement token address.
     */
    onAddLiquidity(
      settlementToken: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is claimed by a market contract.
     * @param positionId The ID of the claimed position.
     * @param recipient The address that will receive the settlement amount.
     * @param settlementAmount The amount to be settled for the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     */
    onClaimPosition(
      settlementToken: string,
      positionId: BigNumberish,
      recipient: string,
      takerMargin: BigNumberish,
      settlementAmount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when a position is opened by a market contract.
     * @param positionId The ID of the opened position.
     * @param protocolFee The protocol fee associated with the position.
     * @param settlementToken The settlement token address.
     * @param takerMargin The margin amount provided by the taker for the position.
     * @param tradingFee The trading fee associated with the position.
     */
    onOpenPosition(
      settlementToken: string,
      positionId: BigNumberish,
      takerMargin: BigNumberish,
      tradingFee: BigNumberish,
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when pending liquidity is settled in the vault by a market contract.
     * @param pendingDeposit The amount of pending deposits being settled.
     * @param pendingWithdrawal The amount of pending withdrawals being settled.
     * @param settlementToken The settlement token address.
     */
    onSettlePendingLiquidity(
      settlementToken: string,
      pendingDeposit: BigNumberish,
      pendingWithdrawal: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Called when liquidity is withdrawn from the vault by a market contract.
     * @param amount The amount of liquidity to be withdrawn.
     * @param recipient The address that will receive the withdrawn liquidity.
     * @param settlementToken The settlement token address.
     */
    onWithdrawLiquidity(
      settlementToken: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingDeposits(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMakerEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingMarketEarnings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    takerMarketBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This function can only be called by a market contract.
     * Transfers the keeper fee from the market to the specified keeper.
     * @param fee The amount of the fee to transfer as native token.
     * @param keeper The address of the keeper to receive the fee.
     * @param margin The margin amount used for the fee payment.
     * @param settlementToken The settlement token address.
     */
    transferKeeperFee(
      settlementToken: string,
      keeper: string,
      fee: BigNumberish,
      margin: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
