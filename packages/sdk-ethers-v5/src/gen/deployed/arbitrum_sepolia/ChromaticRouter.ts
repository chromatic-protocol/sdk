/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: string;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  number,
  number
] & {
  id: BigNumber;
  oracleVersion: BigNumber;
  amount: BigNumber;
  recipient: string;
  action: number;
  tradingFeeRate: number;
};

export type OpenPositionInfoStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  makerMargin: BigNumberish;
  tradingFee: BigNumberish;
};

export type OpenPositionInfoStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  openVersion: BigNumber;
  qty: BigNumber;
  openTimestamp: BigNumber;
  takerMargin: BigNumber;
  makerMargin: BigNumber;
  tradingFee: BigNumber;
};

export interface ChromaticRouterInterface extends utils.Interface {
  functions: {
    "accountBase()": FunctionFragment;
    "addLiquidity(address,int16,uint256,address)": FunctionFragment;
    "addLiquidityBatch(address,address,int16[],uint256[])": FunctionFragment;
    "addLiquidityBatchCallback(address,address,bytes)": FunctionFragment;
    "addLiquidityCallback(address,address,bytes)": FunctionFragment;
    "claimLiquidity(address,uint256)": FunctionFragment;
    "claimLiquidityBatch(address,uint256[])": FunctionFragment;
    "claimLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": FunctionFragment;
    "claimLiquidityCallback(uint256,int16,uint256,uint256,bytes)": FunctionFragment;
    "claimPosition(address,uint256)": FunctionFragment;
    "closePosition(address,uint256)": FunctionFragment;
    "createAccount()": FunctionFragment;
    "getAccount()": FunctionFragment;
    "getLpReceiptIds(address,address)": FunctionFragment;
    "getLpReceiptIds(address)": FunctionFragment;
    "openPosition(address,int256,uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,int16,uint256,address)": FunctionFragment;
    "removeLiquidityBatch(address,address,int16[],uint256[])": FunctionFragment;
    "removeLiquidityBatchCallback(address,uint256[],bytes)": FunctionFragment;
    "removeLiquidityCallback(address,uint256,bytes)": FunctionFragment;
    "withdrawLiquidity(address,uint256)": FunctionFragment;
    "withdrawLiquidityBatch(address,uint256[])": FunctionFragment;
    "withdrawLiquidityBatchCallback(uint256[],int16[],uint256[],uint256[],bytes)": FunctionFragment;
    "withdrawLiquidityCallback(uint256,int16,uint256,uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accountBase"
      | "addLiquidity"
      | "addLiquidityBatch"
      | "addLiquidityBatchCallback"
      | "addLiquidityCallback"
      | "claimLiquidity"
      | "claimLiquidityBatch"
      | "claimLiquidityBatchCallback"
      | "claimLiquidityCallback"
      | "claimPosition"
      | "closePosition"
      | "createAccount"
      | "getAccount"
      | "getLpReceiptIds(address,address)"
      | "getLpReceiptIds(address)"
      | "openPosition"
      | "removeLiquidity"
      | "removeLiquidityBatch"
      | "removeLiquidityBatchCallback"
      | "removeLiquidityCallback"
      | "withdrawLiquidity"
      | "withdrawLiquidityBatch"
      | "withdrawLiquidityBatchCallback"
      | "withdrawLiquidityCallback"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accountBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatch",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityBatchCallback",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityCallback",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatch",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityBatchCallback",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLiquidityCallback",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceiptIds(address,address)",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceiptIds(address)",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatch",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityBatchCallback",
    values: [string, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityCallback",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatch",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityBatchCallback",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidityCallback",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceiptIds(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceiptIds(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityBatchCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidityCallback",
    data: BytesLike
  ): Result;

  events: {
    "AccountCreated(address,address)": EventFragment;
    "OpenPosition(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenPosition"): EventFragment;
}

export interface AccountCreatedEventObject {
  account: string;
  owner: string;
}
export type AccountCreatedEvent = TypedEvent<
  [string, string],
  AccountCreatedEventObject
>;

export type AccountCreatedEventFilter = TypedEventFilter<AccountCreatedEvent>;

export interface OpenPositionEventObject {
  marketAddress: string;
  trader: string;
  account: string;
  tradingFee: BigNumber;
  tradingFeeUSD: BigNumber;
}
export type OpenPositionEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  OpenPositionEventObject
>;

export type OpenPositionEventFilter = TypedEventFilter<OpenPositionEvent>;

export interface ChromaticRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountBase(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: string,
      feeRate: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.
     * @param feeRates The array of trading fee rates associated with each claim in the batch.
     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmount The amount of liquidity deposited.
     * @param feeRate The trading fee rate associated with the liquidity claim.
     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: string,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: string,
      feeRate: BigNumberish,
      clbTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: string,
      clbTokenIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: string,
      clbTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRate The trading fee rate associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     * @param withdrawnAmount The amount of liquidity that has been withdrawn.
     */
    withdrawLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  accountBase(overrides?: CallOverrides): Promise<string>;

  /**
   * Adds liquidity to a ChromaticMarket contract.
   * @param amount The amount to add as liquidity.
   * @param feeRate The fee rate of the liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The recipient address.
   */
  addLiquidity(
    market: string,
    feeRate: BigNumberish,
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
   * @param amounts An array of amounts to add as liquidity for each bin.
   * @param feeRates An array of fee rates for each liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The address of the recipient for each liquidity bin.
   */
  addLiquidityBatch(
    market: string,
    recipient: string,
    feeRates: BigNumberish[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after adding liquidity to the Chromatic protocol.
   * @param data Additional data associated with the liquidity addition.
   * @param settlementToken The address of the settlement token used for adding liquidity.
   * @param vault The address of the vault where the liquidity is added.
   */
  addLiquidityBatchCallback(
    settlementToken: string,
    vault: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after adding liquidity to the Chromatic protocol.
   * @param data Additional data associated with the liquidity addition.
   * @param settlementToken The address of the settlement token used for adding liquidity.
   * @param vault The address of the vault where the liquidity is added.
   */
  addLiquidityCallback(
    settlementToken: string,
    vault: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.
   * Claims liquidity from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptId The ID of the LP receipt.
   */
  claimLiquidity(
    market: string,
    receiptId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claims liquidity from multiple ChromaticMarket contracts in a batch.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptIds An array of LP receipt IDs to claim liquidity from.
   */
  claimLiquidityBatch(
    market: string,
    _receiptIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after claiming liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity claim.
   * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.
   * @param feeRates The array of trading fee rates associated with each claim in the batch.
   * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.
   * @param receiptIds The array of the liquidity receipt IDs.
   */
  claimLiquidityBatchCallback(
    _receiptIds: BigNumberish[],
    arg1: BigNumberish[],
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after claiming liquidity from the Chromatic protocol.
   * @param data Additional data associated with the liquidity claim.
   * @param depositedAmount The amount of liquidity deposited.
   * @param feeRate The trading fee rate associated with the liquidity claim.
   * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.
   * @param receiptId The ID of the liquidity claim receipt.
   */
  claimLiquidityCallback(
    receiptId: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Claims a position from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param positionId The ID of the position to claim.
   */
  claimPosition(
    market: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Closes a position in a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param positionId The ID of the position to close.
   */
  closePosition(
    market: string,
    positionId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
   * Creates a new user account.
   */
  createAccount(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Retrieves the account of the caller.
   */
  getAccount(overrides?: CallOverrides): Promise<string>;

  /**
   * Get the LP receipt IDs associated with a specific market and owner.
   * @param market The address of the ChromaticMarket contract.
   * @param owner The address of the owner.
   */
  "getLpReceiptIds(address,address)"(
    market: string,
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Retrieves the LP receipt IDs of the caller for the specified market.
   * @param market The address of the ChromaticMarket contract.
   */
  "getLpReceiptIds(address)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * Opens a new position in a ChromaticMarket contract.
   * @param makerMargin The margin amount for the maker.
   * @param market The address of the ChromaticMarket contract.
   * @param maxAllowableTradingFee The maximum allowable trading fee.
   * @param qty The quantity of the position.
   * @param takerMargin The margin amount for the taker.
   */
  openPosition(
    market: string,
    qty: BigNumberish,
    takerMargin: BigNumberish,
    makerMargin: BigNumberish,
    maxAllowableTradingFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Removes liquidity from a ChromaticMarket contract.
   * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
   * @param feeRate The fee rate of the liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The recipient address.
   */
  removeLiquidity(
    market: string,
    feeRate: BigNumberish,
    clbTokenAmount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Removes liquidity from multiple ChromaticMarket contracts in a batch.
   * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
   * @param feeRates An array of fee rates for each liquidity bin.
   * @param market The address of the ChromaticMarket contract.
   * @param recipient The address of the recipient for each liquidity bin.
   */
  removeLiquidityBatch(
    market: string,
    recipient: string,
    feeRates: BigNumberish[],
    clbTokenAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after removing liquidity from the Chromatic protocol.
   * @param clbToken The address of the Chromatic liquidity token.
   * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
   * @param data Additional data associated with the liquidity removal.
   */
  removeLiquidityBatchCallback(
    clbToken: string,
    clbTokenIds: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after removing liquidity from the Chromatic protocol.
   * @param clbToken The address of the Chromatic liquidity token.
   * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
   * @param data Additional data associated with the liquidity removal.
   */
  removeLiquidityCallback(
    clbToken: string,
    clbTokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.
   * Withdraws liquidity from a ChromaticMarket contract.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptId The ID of the LP receipt.
   */
  withdrawLiquidity(
    market: string,
    receiptId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
   * @param market The address of the ChromaticMarket contract.
   * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
   */
  withdrawLiquidityBatch(
    market: string,
    _receiptIds: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after withdrawing liquidity from the Chromatic protocol.
   * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.
   * @param data Additional data associated with the liquidity withdrawal.
   * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.
   * @param receiptIds The array of the liquidity receipt IDs.
   * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.
   */
  withdrawLiquidityBatchCallback(
    _receiptIds: BigNumberish[],
    arg1: BigNumberish[],
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Handles the callback after withdrawing liquidity from the Chromatic protocol.
   * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.
   * @param data Additional data associated with the liquidity withdrawal.
   * @param feeRate The trading fee rate associated with the liquidity withdrawal.
   * @param receiptId The ID of the liquidity withdrawal receipt.
   * @param withdrawnAmount The amount of liquidity that has been withdrawn.
   */
  withdrawLiquidityCallback(
    receiptId: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountBase(overrides?: CallOverrides): Promise<string>;

    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: string,
      feeRate: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.
     * @param feeRates The array of trading fee rates associated with each claim in the batch.
     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmount The amount of liquidity deposited.
     * @param feeRate The trading fee rate associated with the liquidity claim.
     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: string,
      positionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(overrides?: CallOverrides): Promise<void>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<string>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: string,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OpenPositionInfoStructOutput>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: string,
      feeRate: BigNumberish,
      clbTokenAmount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<LpReceiptStructOutput[]>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: string,
      clbTokenIds: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: string,
      clbTokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRate The trading fee rate associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     * @param withdrawnAmount The amount of liquidity that has been withdrawn.
     */
    withdrawLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AccountCreated(address,address)"(
      account?: string | null,
      owner?: string | null
    ): AccountCreatedEventFilter;
    AccountCreated(
      account?: string | null,
      owner?: string | null
    ): AccountCreatedEventFilter;

    "OpenPosition(address,address,address,uint256,uint256)"(
      marketAddress?: string | null,
      trader?: string | null,
      account?: string | null,
      tradingFee?: null,
      tradingFeeUSD?: null
    ): OpenPositionEventFilter;
    OpenPosition(
      marketAddress?: string | null,
      trader?: string | null,
      account?: string | null,
      tradingFee?: null,
      tradingFeeUSD?: null
    ): OpenPositionEventFilter;
  };

  estimateGas: {
    accountBase(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: string,
      feeRate: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.
     * @param feeRates The array of trading fee rates associated with each claim in the batch.
     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmount The amount of liquidity deposited.
     * @param feeRate The trading fee rate associated with the liquidity claim.
     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: string,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: string,
      feeRate: BigNumberish,
      clbTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: string,
      clbTokenIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: string,
      clbTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRate The trading fee rate associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     * @param withdrawnAmount The amount of liquidity that has been withdrawn.
     */
    withdrawLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountBase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Adds liquidity to a ChromaticMarket contract.
     * @param amount The amount to add as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    addLiquidity(
      market: string,
      feeRate: BigNumberish,
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Adds liquidity to multiple liquidity bins of ChromaticMarket contract in a batch.
     * @param amounts An array of amounts to add as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    addLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityBatchCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after adding liquidity to the Chromatic protocol.
     * @param data Additional data associated with the liquidity addition.
     * @param settlementToken The address of the settlement token used for adding liquidity.
     * @param vault The address of the vault where the liquidity is added.
     */
    addLiquidityCallback(
      settlementToken: string,
      vault: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function allows the liquidity provider to claim their liquidity by calling the `claimLiquidity` function in the specified market contract.
     * Claims liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    claimLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to claim liquidity from.
     */
    claimLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmounts The array of deposited liquidity amounts for each receipt in the batch.
     * @param feeRates The array of trading fee rates associated with each claim in the batch.
     * @param mintedCLBTokenAmounts The array of CLB token amounts minted for each receipt in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     */
    claimLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after claiming liquidity from the Chromatic protocol.
     * @param data Additional data associated with the liquidity claim.
     * @param depositedAmount The amount of liquidity deposited.
     * @param feeRate The trading fee rate associated with the liquidity claim.
     * @param mintedCLBTokenAmount The amount of CLB tokens minted as liquidity.
     * @param receiptId The ID of the liquidity claim receipt.
     */
    claimLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Claims a position from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to claim.
     */
    claimPosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Closes a position in a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param positionId The ID of the position to close.
     */
    closePosition(
      market: string,
      positionId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Only one account can be created per user.      Emits an `AccountCreated` event upon successful creation.
     * Creates a new user account.
     */
    createAccount(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the account of the caller.
     */
    getAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get the LP receipt IDs associated with a specific market and owner.
     * @param market The address of the ChromaticMarket contract.
     * @param owner The address of the owner.
     */
    "getLpReceiptIds(address,address)"(
      market: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Retrieves the LP receipt IDs of the caller for the specified market.
     * @param market The address of the ChromaticMarket contract.
     */
    "getLpReceiptIds(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Opens a new position in a ChromaticMarket contract.
     * @param makerMargin The margin amount for the maker.
     * @param market The address of the ChromaticMarket contract.
     * @param maxAllowableTradingFee The maximum allowable trading fee.
     * @param qty The quantity of the position.
     * @param takerMargin The margin amount for the taker.
     */
    openPosition(
      market: string,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from a ChromaticMarket contract.
     * @param clbTokenAmount The amount of CLB tokens to remove as liquidity.
     * @param feeRate The fee rate of the liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The recipient address.
     */
    removeLiquidity(
      market: string,
      feeRate: BigNumberish,
      clbTokenAmount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Removes liquidity from multiple ChromaticMarket contracts in a batch.
     * @param clbTokenAmounts An array of CLB token amounts to remove as liquidity for each bin.
     * @param feeRates An array of fee rates for each liquidity bin.
     * @param market The address of the ChromaticMarket contract.
     * @param recipient The address of the recipient for each liquidity bin.
     */
    removeLiquidityBatch(
      market: string,
      recipient: string,
      feeRates: BigNumberish[],
      clbTokenAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenIds The array of the Chromatic liquidity token IDs to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityBatchCallback(
      clbToken: string,
      clbTokenIds: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after removing liquidity from the Chromatic protocol.
     * @param clbToken The address of the Chromatic liquidity token.
     * @param clbTokenId The ID of the Chromatic liquidity token to be removed.
     * @param data Additional data associated with the liquidity removal.
     */
    removeLiquidityCallback(
      clbToken: string,
      clbTokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * This function allows the liquidity provider to withdraw their liquidity by calling the `withdrawLiquidity` function in the specified market contract.
     * Withdraws liquidity from a ChromaticMarket contract.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptId The ID of the LP receipt.
     */
    withdrawLiquidity(
      market: string,
      receiptId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws liquidity from multiple ChromaticMarket contracts in a batch.
     * @param market The address of the ChromaticMarket contract.
     * @param receiptIds An array of LP receipt IDs to withdraw liquidity from.
     */
    withdrawLiquidityBatch(
      market: string,
      _receiptIds: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmounts The array of CLB token amounts burned for each receipt in the batch.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRates The array of trading fee rates associated with each withdrawal in the batch.
     * @param receiptIds The array of the liquidity receipt IDs.
     * @param withdrawnAmounts The array of withdrawn liquidity amounts for each receipt in the batch.
     */
    withdrawLiquidityBatchCallback(
      _receiptIds: BigNumberish[],
      arg1: BigNumberish[],
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Handles the callback after withdrawing liquidity from the Chromatic protocol.
     * @param burnedCLBTokenAmount The amount of CLB tokens burned during the withdrawal.
     * @param data Additional data associated with the liquidity withdrawal.
     * @param feeRate The trading fee rate associated with the liquidity withdrawal.
     * @param receiptId The ID of the liquidity withdrawal receipt.
     * @param withdrawnAmount The amount of liquidity that has been withdrawn.
     */
    withdrawLiquidityCallback(
      receiptId: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
