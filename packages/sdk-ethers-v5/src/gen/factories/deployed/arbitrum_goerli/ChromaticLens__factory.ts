/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChromaticLens,
  ChromaticLensInterface,
} from "../../../deployed/arbitrum_goerli/ChromaticLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IChromaticRouter",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tradingFeeRate",
        type: "int16",
      },
      {
        internalType: "uint256",
        name: "_oracleVersion",
        type: "uint256",
      },
    ],
    name: "claimableLiquidity",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mintingTokenAmountRequested",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mintingCLBTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningCLBTokenAmountRequested",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningCLBTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningTokenAmount",
            type: "uint256",
          },
        ],
        internalType: "struct IMarketLiquidity.ClaimableLiquidity",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "clbBalanceOf",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "binValue",
            type: "uint256",
          },
        ],
        internalType: "struct ChromaticLens.CLBBalance[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
    ],
    name: "liquidityBinStatuses",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "freeLiquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "binValue",
            type: "uint256",
          },
          {
            internalType: "int16",
            name: "tradingFeeRate",
            type: "int16",
          },
        ],
        internalType: "struct IMarketLiquidity.LiquidityBinStatus[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "lpReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oracleVersion",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "enum LpAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "int16",
            name: "tradingFeeRate",
            type: "int16",
          },
        ],
        internalType: "struct LpReceipt[]",
        name: "result",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "oracleVersion",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "Fixed18",
            name: "price",
            type: "int256",
          },
        ],
        internalType: "struct IOracleProvider.OracleVersion",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161191b38038061191b83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611888806100936000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80639b2fa372116100505780639b2fa372146100ca578063ad35f0261461011f578063e1928af01461013f57600080fd5b8063585bc5291461006c578063676c6ce914610095575b600080fd5b61007f61007a366004611041565b61015f565b60405161008c919061107a565b60405180910390f35b6100a86100a33660046110de565b610805565b604080518251815260208084015190820152918101519082015260600161008c565b6100dd6100d8366004611119565b61091a565b60405161008c9190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61013261012d36600461115a565b6109ed565b60405161008c9190611177565b61015261014d366004611041565b610a80565b60405161008c9190611203565b6060600061016b610c67565b90506000815167ffffffffffffffff811115610189576101896112ce565b6040519080825280602002602001820160405280156101b2578160200160208202803683370190505b50905060005b815181101561020157848282815181106101d4576101d46112fd565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016101b8565b5060008573ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561024e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610272919061132c565b73ffffffffffffffffffffffffffffffffffffffff16634e1273f483856040518363ffffffff1660e01b81526004016102ac929190611384565b600060405180830381865afa1580156102c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261030f919081019061148d565b90506000805b825181101561034e57828181518110610330576103306112fd565b6020026020010151600014610346576001909101905b600101610315565b5060008167ffffffffffffffff81111561036a5761036a6112ce565b604051908082528060200260200182016040528015610393578160200160208202803683370190505b50905060008267ffffffffffffffff8111156103b1576103b16112ce565b6040519080825280602002602001820160405280156103da578160200160208202803683370190505b50905060008367ffffffffffffffff8111156103f8576103f86112ce565b604051908082528060200260200182016040528015610421578160200160208202803683370190505b5090506000805b865181101561051457868181518110610443576104436112fd565b602002602001015160001461050c57868181518110610464576104646112fd565b602002602001015185838151811061047e5761047e6112fd565b60200260200101818152505088818151811061049c5761049c6112fd565b60200260200101518483815181106104b6576104b66112fd565b6020026020010181815250506104e48982815181106104d7576104d76112fd565b6020026020010151610d69565b8383815181106104f6576104f66112fd565b600192830b602091820292909201015291909101905b600101610428565b5060008b73ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610561573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610585919061132c565b73ffffffffffffffffffffffffffffffffffffffff166377954ac2856040518263ffffffff1660e01b81526004016105bd9190611523565b600060405180830381865afa1580156105da573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610620919081019061148d565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663faf07bf3856040518263ffffffff1660e01b815260040161065d9190611536565b600060405180830381865afa15801561067a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106c0919081019061148d565b905060008767ffffffffffffffff8111156106dd576106dd6112ce565b60405190808252806020026020018201604052801561073957816020015b6107266040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816106fb5790505b50905060005b888110156107f1576040518060800160405280888381518110610764576107646112fd565b60200260200101518152602001898381518110610783576107836112fd565b602002602001015181526020018583815181106107a2576107a26112fd565b602002602001015181526020018483815181106107c1576107c16112fd565b60200260200101518152508282815181106107de576107de6112fd565b602090810291909101015260010161073f565b509a50505050505050505050505b92915050565b61082960405180606001604052806000815260200160008152602001600081525090565b8273ffffffffffffffffffffffffffffffffffffffff16630aa7d2f96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610874573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610898919061132c565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b81526004016108d291815260200190565b606060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610913919061157d565b9392505050565b61094c6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040517f5cefa9fb000000000000000000000000000000000000000000000000000000008152600184900b60048201526024810183905273ffffffffffffffffffffffffffffffffffffffff851690635cefa9fb9060440160a060405180830381865afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e591906115d9565b949350505050565b60608173ffffffffffffffffffffffffffffffffffffffff166338085c3d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a3a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526107ff9190810190611649565b600080546040517f067681e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260609392169063067681e890604401600060405180830381865afa158015610afb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610b41919081019061148d565b9050805167ffffffffffffffff811115610b5d57610b5d6112ce565b604051908082528060200260200182016040528015610b9657816020015b610b83610fa0565b815260200190600190039081610b7b5790505b50915060005b8151811015610c5f578473ffffffffffffffffffffffffffffffffffffffff1663b79711e1838381518110610bd357610bd36112fd565b60200260200101516040518263ffffffff1660e01b8152600401610bf991815260200190565b60c060405180830381865afa158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a9190611712565b838281518110610c4c57610c4c6112fd565b6020908102919091010152600101610b9c565b505092915050565b60606000610c73610da0565b90506000610c83602460026117d7565b67ffffffffffffffff811115610c9b57610c9b6112ce565b604051908082528060200260200182016040528015610cc4578160200160208202803683370190505b50905060005b6024811015610d6257610cf4838260248110610ce857610ce86112fd565b60200201516001610edc565b828281518110610d0657610d066112fd565b602002602001018181525050610d33838260248110610d2757610d276112fd565b60200201516000610edc565b82610d3f6024846117ee565b81518110610d4f57610d4f6112fd565b6020908102919091010152600101610cca565b5092915050565b60006402540be4008210610d9757610d8e610d896402540be40084611801565b610f04565b6107ff90611814565b6107ff82610f04565b610da8610ffd565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b600081610efb57610ef66402540be40061ffff85166117ee565b610913565b505061ffff1690565b600061ffff821115610f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f3620626974730000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b5090565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006001811115610ff057610ff06111d4565b8152600060209091015290565b6040518061048001604052806024906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461103e57600080fd5b50565b6000806040838503121561105457600080fd5b823561105f8161101c565b9150602083013561106f8161101c565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b828110156110d157815180518552868101518786015285810151868601526060908101519085015260809093019290850190600101611097565b5091979650505050505050565b600080604083850312156110f157600080fd5b82356110fc8161101c565b946020939093013593505050565b8060010b811461103e57600080fd5b60008060006060848603121561112e57600080fd5b83356111398161101c565b925060208401356111498161110a565b929592945050506040919091013590565b60006020828403121561116c57600080fd5b81356109138161101c565b602080825282518282018190526000919060409081850190868401855b828110156110d15781518051855286810151878601528581015186860152606090810151600190810b918601919091526080909401939186019101611194565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156112c0578251805186528781015188870152868101518787015260608082015173ffffffffffffffffffffffffffffffffffffffff16908701526080808201516002811061129a577f4e487b710000000000000000000000000000000000000000000000000000000085526021600452602485fd5b9087015260a090810151600190810b9187019190915260c0909501949287019201611221565b509298975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561133e57600080fd5b81516109138161101c565b600081518084526020808501945080840160005b838110156113795781518752958201959082019060010161135d565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156113d357815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016113a1565b505050838103828501526113e78186611349565b9695505050505050565b6040516080810167ffffffffffffffff81118282101715611414576114146112ce565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611461576114616112ce565b604052919050565b600067ffffffffffffffff821115611483576114836112ce565b5060051b60200190565b600060208083850312156114a057600080fd5b825167ffffffffffffffff8111156114b757600080fd5b8301601f810185136114c857600080fd5b80516114db6114d682611469565b61141a565b81815260059190911b820183019083810190878311156114fa57600080fd5b928401925b82841015611518578351825292840192908401906114ff565b979650505050505050565b6020815260006109136020830184611349565b6020808252825182820181905260009190848201906040850190845b81811015611571578351600190810b8452938501939285019201611552565b50909695505050505050565b60006060828403121561158f57600080fd5b6040516060810181811067ffffffffffffffff821117156115b2576115b26112ce565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060a082840312156115eb57600080fd5b60405160a0810181811067ffffffffffffffff8211171561160e5761160e6112ce565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b6000602080838503121561165c57600080fd5b825167ffffffffffffffff81111561167357600080fd5b8301601f8101851361168457600080fd5b80516116926114d682611469565b81815260079190911b820183019083810190878311156116b157600080fd5b928401925b8284101561151857608084890312156116cf5760008081fd5b6116d76113f1565b845181528585015186820152604080860151908201526060808601516116fc8161110a565b90820152825260809390930192908401906116b6565b600060c0828403121561172457600080fd5b60405160c0810181811067ffffffffffffffff82111715611747576117476112ce565b806040525082518152602083015160208201526040830151604082015260608301516117728161101c565b606082015260808301516002811061178957600080fd5b608082015260a083015161179c8161110a565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176107ff576107ff6117a8565b808201808211156107ff576107ff6117a8565b818103818111156107ff576107ff6117a8565b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80008103611849576118496117a8565b6000039291505056fea26469706673582212209ba7f5e7818e5ae25d3bc82a402edb3dc3a0de19014d5fe68ad101d077f45e6664736f6c63430008130033";

type ChromaticLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChromaticLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChromaticLens__factory extends ContractFactory {
  constructor(...args: ChromaticLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _router: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ChromaticLens> {
    return super.deploy(_router, overrides || {}) as Promise<ChromaticLens>;
  }
  override getDeployTransaction(
    _router: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, overrides || {});
  }
  override attach(address: string): ChromaticLens {
    return super.attach(address) as ChromaticLens;
  }
  override connect(signer: Signer): ChromaticLens__factory {
    return super.connect(signer) as ChromaticLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChromaticLensInterface {
    return new utils.Interface(_abi) as ChromaticLensInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChromaticLens {
    return new Contract(address, _abi, signerOrProvider) as ChromaticLens;
  }
}
