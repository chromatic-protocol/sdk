/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type OracleProviderPropertiesStruct = {
  minTakeProfitBPS: BigNumberish;
  maxTakeProfitBPS: BigNumberish;
  leverageLevel: BigNumberish;
};

export type OracleProviderPropertiesStructOutput = [
  minTakeProfitBPS: bigint,
  maxTakeProfitBPS: bigint,
  leverageLevel: bigint
] & {
  minTakeProfitBPS: bigint;
  maxTakeProfitBPS: bigint;
  leverageLevel: bigint;
};

export declare namespace InterestRate {
  export type RecordStruct = {
    annualRateBPS: BigNumberish;
    beginTimestamp: BigNumberish;
  };

  export type RecordStructOutput = [
    annualRateBPS: bigint,
    beginTimestamp: bigint
  ] & { annualRateBPS: bigint; beginTimestamp: bigint };
}

export interface ChromaticMarketFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "appendInterestRateRecord"
      | "calculateInterest"
      | "createMarket"
      | "currentInterestRate"
      | "dao"
      | "defaultProtocolFeeRate"
      | "getEarningDistributionThreshold"
      | "getFlashLoanFeeRate"
      | "getInterestRateRecords"
      | "getMarket"
      | "getMarkets"
      | "getMarketsBySettlmentToken"
      | "getMinimumMargin"
      | "getOracleProviderProperties"
      | "getSettlementTokenOracleProvider"
      | "getUniswapFeeTier"
      | "isRegisteredMarket"
      | "isRegisteredOracleProvider"
      | "isRegisteredSettlementToken"
      | "keeperFeePayer"
      | "liquidator"
      | "marketSettlement"
      | "parameters"
      | "registerOracleProvider"
      | "registerSettlementToken"
      | "registeredOracleProviders"
      | "registeredSettlementTokens"
      | "removeLastInterestRateRecord"
      | "setEarningDistributionThreshold"
      | "setFlashLoanFeeRate"
      | "setMinimumMargin"
      | "setSettlementTokenOracleProvider"
      | "setUniswapFeeTier"
      | "setVault"
      | "treasury"
      | "unregisterOracleProvider"
      | "updateDao"
      | "updateDefaultProtocolFeeRate"
      | "updateKeeperFeePayer"
      | "updateLeverageLevel"
      | "updateLiquidator"
      | "updateMarketSettlement"
      | "updateTakeProfitBPSRange"
      | "updateTreasury"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DaoUpdated"
      | "DefaultProtocolFeeRateUpdated"
      | "InterestRateRecordAppended"
      | "KeeperFeePayerUpdated"
      | "LastInterestRateRecordRemoved"
      | "LiquidatorUpdated"
      | "MarketCreated"
      | "MarketSettlementUpdated"
      | "OracleProviderRegistered"
      | "OracleProviderUnregistered"
      | "SetEarningDistributionThreshold"
      | "SetFlashLoanFeeRate"
      | "SetMinimumMargin"
      | "SetSettlementTokenOracleProvider"
      | "SetUniswapFeeTier"
      | "SettlementTokenRegistered"
      | "TreasuryUpdated"
      | "UpdateLeverageLevel"
      | "UpdateTakeProfitBPSRange"
      | "VaultSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "appendInterestRateRecord",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentInterestRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultProtocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEarningDistributionThreshold",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFeeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRateRecords",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsBySettlmentToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumMargin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleProviderProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementTokenOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapFeeTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredMarket",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredSettlementToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperFeePayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketSettlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOracleProvider",
    values: [AddressLike, OracleProviderPropertiesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSettlementToken",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredOracleProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredSettlementTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLastInterestRateRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarningDistributionThreshold",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFeeRate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumMargin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSettlementTokenOracleProvider",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapFeeTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDao",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultProtocolFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateKeeperFeePayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLeverageLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketSettlement",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTakeProfitBPSRange",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "appendInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsBySettlmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleProviderProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementTokenOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredOracleProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredSettlementTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLastInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSettlementTokenOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateKeeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLeverageLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTakeProfitBPSRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace DaoUpdatedEvent {
  export type InputTuple = [daoOld: AddressLike, daoNew: AddressLike];
  export type OutputTuple = [daoOld: string, daoNew: string];
  export interface OutputObject {
    daoOld: string;
    daoNew: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultProtocolFeeRateUpdatedEvent {
  export type InputTuple = [
    defaultProtocolFeeRateOld: BigNumberish,
    defaultProtocolFeeRateNew: BigNumberish
  ];
  export type OutputTuple = [
    defaultProtocolFeeRateOld: bigint,
    defaultProtocolFeeRateNew: bigint
  ];
  export interface OutputObject {
    defaultProtocolFeeRateOld: bigint;
    defaultProtocolFeeRateNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InterestRateRecordAppendedEvent {
  export type InputTuple = [
    token: AddressLike,
    annualRateBPS: BigNumberish,
    beginTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    annualRateBPS: bigint,
    beginTimestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    annualRateBPS: bigint;
    beginTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeeperFeePayerUpdatedEvent {
  export type InputTuple = [
    keeperFeePayerOld: AddressLike,
    keeperFeePayerNew: AddressLike
  ];
  export type OutputTuple = [
    keeperFeePayerOld: string,
    keeperFeePayerNew: string
  ];
  export interface OutputObject {
    keeperFeePayerOld: string;
    keeperFeePayerNew: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LastInterestRateRecordRemovedEvent {
  export type InputTuple = [
    token: AddressLike,
    annualRateBPS: BigNumberish,
    beginTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    annualRateBPS: bigint,
    beginTimestamp: bigint
  ];
  export interface OutputObject {
    token: string;
    annualRateBPS: bigint;
    beginTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidatorUpdatedEvent {
  export type InputTuple = [
    liquidatorOld: AddressLike,
    liquidatorNew: AddressLike
  ];
  export type OutputTuple = [liquidatorOld: string, liquidatorNew: string];
  export interface OutputObject {
    liquidatorOld: string;
    liquidatorNew: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketCreatedEvent {
  export type InputTuple = [
    oracleProvider: AddressLike,
    settlementToken: AddressLike,
    market: AddressLike
  ];
  export type OutputTuple = [
    oracleProvider: string,
    settlementToken: string,
    market: string
  ];
  export interface OutputObject {
    oracleProvider: string;
    settlementToken: string;
    market: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketSettlementUpdatedEvent {
  export type InputTuple = [
    marketSettlementOld: AddressLike,
    marketSettlementNew: AddressLike
  ];
  export type OutputTuple = [
    marketSettlementOld: string,
    marketSettlementNew: string
  ];
  export interface OutputObject {
    marketSettlementOld: string;
    marketSettlementNew: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleProviderRegisteredEvent {
  export type InputTuple = [
    oracleProvider: AddressLike,
    properties: OracleProviderPropertiesStruct
  ];
  export type OutputTuple = [
    oracleProvider: string,
    properties: OracleProviderPropertiesStructOutput
  ];
  export interface OutputObject {
    oracleProvider: string;
    properties: OracleProviderPropertiesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleProviderUnregisteredEvent {
  export type InputTuple = [oracleProvider: AddressLike];
  export type OutputTuple = [oracleProvider: string];
  export interface OutputObject {
    oracleProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetEarningDistributionThresholdEvent {
  export type InputTuple = [
    token: AddressLike,
    earningDistributionThreshold: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    earningDistributionThreshold: bigint
  ];
  export interface OutputObject {
    token: string;
    earningDistributionThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFlashLoanFeeRateEvent {
  export type InputTuple = [token: AddressLike, flashLoanFeeRate: BigNumberish];
  export type OutputTuple = [token: string, flashLoanFeeRate: bigint];
  export interface OutputObject {
    token: string;
    flashLoanFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinimumMarginEvent {
  export type InputTuple = [token: AddressLike, minimumMargin: BigNumberish];
  export type OutputTuple = [token: string, minimumMargin: bigint];
  export interface OutputObject {
    token: string;
    minimumMargin: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSettlementTokenOracleProviderEvent {
  export type InputTuple = [token: AddressLike, oracleProvider: AddressLike];
  export type OutputTuple = [token: string, oracleProvider: string];
  export interface OutputObject {
    token: string;
    oracleProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUniswapFeeTierEvent {
  export type InputTuple = [token: AddressLike, uniswapFeeTier: BigNumberish];
  export type OutputTuple = [token: string, uniswapFeeTier: bigint];
  export interface OutputObject {
    token: string;
    uniswapFeeTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementTokenRegisteredEvent {
  export type InputTuple = [
    token: AddressLike,
    oracleProvider: AddressLike,
    minimumMargin: BigNumberish,
    interestRate: BigNumberish,
    flashLoanFeeRate: BigNumberish,
    earningDistributionThreshold: BigNumberish,
    uniswapFeeTier: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    oracleProvider: string,
    minimumMargin: bigint,
    interestRate: bigint,
    flashLoanFeeRate: bigint,
    earningDistributionThreshold: bigint,
    uniswapFeeTier: bigint
  ];
  export interface OutputObject {
    token: string;
    oracleProvider: string;
    minimumMargin: bigint;
    interestRate: bigint;
    flashLoanFeeRate: bigint;
    earningDistributionThreshold: bigint;
    uniswapFeeTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [treasuryOld: AddressLike, treasuryNew: AddressLike];
  export type OutputTuple = [treasuryOld: string, treasuryNew: string];
  export interface OutputObject {
    treasuryOld: string;
    treasuryNew: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLeverageLevelEvent {
  export type InputTuple = [oracleProvider: AddressLike, level: BigNumberish];
  export type OutputTuple = [oracleProvider: string, level: bigint];
  export interface OutputObject {
    oracleProvider: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTakeProfitBPSRangeEvent {
  export type InputTuple = [
    oracleProvider: AddressLike,
    minTakeProfitBPS: BigNumberish,
    maxTakeProfitBPS: BigNumberish
  ];
  export type OutputTuple = [
    oracleProvider: string,
    minTakeProfitBPS: bigint,
    maxTakeProfitBPS: bigint
  ];
  export interface OutputObject {
    oracleProvider: string;
    minTakeProfitBPS: bigint;
    maxTakeProfitBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultSetEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChromaticMarketFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ChromaticMarketFactory;
  waitForDeployment(): Promise<this>;

  interface: ChromaticMarketFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * This function can only be called by the DAO address.
   * Appends an interest rate record for a settlement token.
   * @param annualRateBPS The annual interest rate in basis points (BPS).
   * @param beginTimestamp The timestamp when the interest rate record begins.
   * @param token The address of the settlement token.
   */
  appendInterestRateRecord: TypedContractMethod<
    [
      token: AddressLike,
      annualRateBPS: BigNumberish,
      beginTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Calculates the interest accrued for a given token and amount within a specified time range.
   * @param amount The amount of the token.
   * @param from The starting timestamp (inclusive) of the time range.
   * @param to The ending timestamp (exclusive) of the time range.
   * @param token The address of the token.
   */
  calculateInterest: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      from: BigNumberish,
      to: BigNumberish
    ],
    [bigint],
    "view"
  >;

  /**
   * This function creates a new market using the specified oracle provider and settlement token addresses.      Throws a `NotRegisteredSettlementToken` error if the settlement token is not registered.      Throws an `ExistMarket` error if the market already exists for the given oracle provider and settlement token.
   * Creates a new market associated with an oracle provider and settlement token.
   * @param oracleProvider The address of the oracle provider.
   * @param settlementToken The address of the settlement token.
   */
  createMarket: TypedContractMethod<
    [oracleProvider: AddressLike, settlementToken: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Gets the current interest rate for a settlement token.
   * @param token The address of the settlement token.
   */
  currentInterestRate: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * Returns the address of the DAO.
   */
  dao: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the default protocol fee rate.
   */
  defaultProtocolFeeRate: TypedContractMethod<[], [bigint], "view">;

  /**
   * Gets the earning distribution threshold for a settlement token.
   * @param token The address of the settlement token.
   */
  getEarningDistributionThreshold: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * Gets the flash loan fee rate for a settlement token.
   * @param token The address of the settlement token.
   */
  getFlashLoanFeeRate: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * Gets all the interest rate records for a settlement token.
   * @param token The address of the settlement token.
   */
  getInterestRateRecords: TypedContractMethod<
    [token: AddressLike],
    [InterestRate.RecordStructOutput[]],
    "view"
  >;

  /**
   * Returns the address of a market associated with an oracle provider and settlement token.
   * @param oracleProvider The address of the oracle provider.
   * @param settlementToken The address of the settlement token.
   */
  getMarket: TypedContractMethod<
    [oracleProvider: AddressLike, settlementToken: AddressLike],
    [string],
    "view"
  >;

  /**
   * Returns an array of all market addresses.
   */
  getMarkets: TypedContractMethod<[], [string[]], "view">;

  /**
   * Returns an array of market addresses associated with a settlement token.
   * @param settlementToken The address of the settlement token.
   */
  getMarketsBySettlmentToken: TypedContractMethod<
    [settlementToken: AddressLike],
    [string[]],
    "view"
  >;

  /**
   * The minimumMargin is used as the minimum value for the taker margin of a position      or as the minimum value for the maker margin of each bin.
   * Gets the minimum margin for a settlement token.
   * @param token The address of the settlement token.
   */
  getMinimumMargin: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  /**
   * Retrieves the properties of an oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  getOracleProviderProperties: TypedContractMethod<
    [oracleProvider: AddressLike],
    [OracleProviderPropertiesStructOutput],
    "view"
  >;

  /**
   * Gets the oracle provider address for a settlement token.
   * @param token The address of the settlement token.
   */
  getSettlementTokenOracleProvider: TypedContractMethod<
    [token: AddressLike],
    [string],
    "view"
  >;

  /**
   * Gets the Uniswap fee tier for a settlement token.
   * @param token The address of the settlement token.
   */
  getUniswapFeeTier: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  /**
   * Checks if a market is registered.
   * @param market The address of the market.
   */
  isRegisteredMarket: TypedContractMethod<
    [market: AddressLike],
    [boolean],
    "view"
  >;

  /**
   * Checks if an oracle provider is registered.
   * @param oracleProvider The address of the oracle provider to check.
   */
  isRegisteredOracleProvider: TypedContractMethod<
    [oracleProvider: AddressLike],
    [boolean],
    "view"
  >;

  /**
   * Checks if a settlement token is registered.
   * @param token The address of the settlement token to check.
   */
  isRegisteredSettlementToken: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  /**
   * Returns the address of the keeper fee payer.
   */
  keeperFeePayer: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the address of the liquidator.
   */
  liquidator: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the address of the market settlement task.
   */
  marketSettlement: TypedContractMethod<[], [string], "view">;

  /**
   * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns protocolFeeRate The protocol fee rate of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
   * Get the parameters to be used in constructing the market, set transiently during market creation.
   */
  parameters: TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        oracleProvider: string;
        settlementToken: string;
        protocolFeeRate: bigint;
      }
    ],
    "view"
  >;

  registerOracleProvider: TypedContractMethod<
    [oracleProvider: AddressLike, properties: OracleProviderPropertiesStruct],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Registers a new settlement token.
   * @param earningDistributionThreshold The earning distribution threshold for the settlement token.
   * @param flashLoanFeeRate The flash loan fee rate for the settlement token.
   * @param interestRate The interest rate for the settlement token.
   * @param minimumMargin The minimum margin for the settlement token.
   * @param oracleProvider The oracle provider address for the settlement token.
   * @param token The address of the settlement token to register.
   * @param uniswapFeeTier The Uniswap fee tier for the settlement token.
   */
  registerSettlementToken: TypedContractMethod<
    [
      token: AddressLike,
      oracleProvider: AddressLike,
      minimumMargin: BigNumberish,
      interestRate: BigNumberish,
      flashLoanFeeRate: BigNumberish,
      earningDistributionThreshold: BigNumberish,
      uniswapFeeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Gets the registered oracle providers.
   */
  registeredOracleProviders: TypedContractMethod<[], [string[]], "view">;

  /**
   * Gets the list of registered settlement tokens.
   */
  registeredSettlementTokens: TypedContractMethod<[], [string[]], "view">;

  /**
   * This function can only be called by the DAO address.
   * Removes the last interest rate record for a settlement token.
   * @param token The address of the settlement token.
   */
  removeLastInterestRateRecord: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Sets the earning distribution threshold for a settlement token.
   * @param earningDistributionThreshold The new earning distribution threshold for the settlement token.
   * @param token The address of the settlement token.
   */
  setEarningDistributionThreshold: TypedContractMethod<
    [token: AddressLike, earningDistributionThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Sets the flash loan fee rate for a settlement token.
   * @param flashLoanFeeRate The new flash loan fee rate for the settlement token.
   * @param token The address of the settlement token.
   */
  setFlashLoanFeeRate: TypedContractMethod<
    [token: AddressLike, flashLoanFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Sets the minimum margin for a settlement token.
   * @param minimumMargin The new minimum margin for the settlement token.
   * @param token The address of the settlement token.
   */
  setMinimumMargin: TypedContractMethod<
    [token: AddressLike, minimumMargin: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Sets the oracle provider address for a settlement token.
   * @param oracleProvider The new oracle provider address for the settlement token.
   * @param token The address of the settlement token.
   */
  setSettlementTokenOracleProvider: TypedContractMethod<
    [token: AddressLike, oracleProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Sets the Uniswap fee tier for a settlement token.
   * @param token The address of the settlement token.
   * @param uniswapFeeTier The new Uniswap fee tier for the settlement token.
   */
  setUniswapFeeTier: TypedContractMethod<
    [token: AddressLike, uniswapFeeTier: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.      Throws an `AlreadySetVault` error if the vault address has already been set.
   * Sets the vault address.
   * @param _vault The vault address.
   */
  setVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  /**
   * Returns the address of the DAO treasury.
   */
  treasury: TypedContractMethod<[], [string], "view">;

  /**
   * This function can only be called by the DAO address.
   * Unregisters an oracle provider.
   * @param oracleProvider The address of the oracle provider to unregister.
   */
  unregisterOracleProvider: TypedContractMethod<
    [oracleProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Updates the DAO address.
   * @param _dao The new DAO address.
   */
  updateDao: TypedContractMethod<[_dao: AddressLike], [void], "nonpayable">;

  /**
   * This function can only be called by the DAO address.
   * Updates the default protocl fee rate.
   * @param _defaultProtocolFeeRate The new default protocol fee rate.
   */
  updateDefaultProtocolFeeRate: TypedContractMethod<
    [_defaultProtocolFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Updates the keeper fee payer address.
   * @param _keeperFeePayer The new keeper fee payer address.
   */
  updateKeeperFeePayer: TypedContractMethod<
    [_keeperFeePayer: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO and registered oracle providers.
   * Updates the leverage level of an oracle provider in the registry.
   * @param level The new leverage level to be set for the oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  updateLeverageLevel: TypedContractMethod<
    [oracleProvider: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Updates the liquidator address.
   * @param _liquidator The new liquidator address.
   */
  updateLiquidator: TypedContractMethod<
    [_liquidator: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Updates the market settlement task address.
   * @param _marketSettlement The new market settlement task address.
   */
  updateMarketSettlement: TypedContractMethod<
    [_marketSettlement: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO and registered oracle providers.
   * Updates the take-profit basis points range of an oracle provider.
   * @param maxTakeProfitBPS The new maximum take-profit basis points.
   * @param minTakeProfitBPS The new minimum take-profit basis points.
   * @param oracleProvider The address of the oracle provider.
   */
  updateTakeProfitBPSRange: TypedContractMethod<
    [
      oracleProvider: AddressLike,
      minTakeProfitBPS: BigNumberish,
      maxTakeProfitBPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the DAO address.
   * Updates the DAO treasury address.
   * @param _treasury The new DAO treasury address.
   */
  updateTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the address of the vault.
   */
  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "appendInterestRateRecord"
  ): TypedContractMethod<
    [
      token: AddressLike,
      annualRateBPS: BigNumberish,
      beginTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateInterest"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      from: BigNumberish,
      to: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createMarket"
  ): TypedContractMethod<
    [oracleProvider: AddressLike, settlementToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentInterestRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "dao"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultProtocolFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarningDistributionThreshold"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFlashLoanFeeRate"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInterestRateRecords"
  ): TypedContractMethod<
    [token: AddressLike],
    [InterestRate.RecordStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarket"
  ): TypedContractMethod<
    [oracleProvider: AddressLike, settlementToken: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMarkets"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMarketsBySettlmentToken"
  ): TypedContractMethod<[settlementToken: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMinimumMargin"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOracleProviderProperties"
  ): TypedContractMethod<
    [oracleProvider: AddressLike],
    [OracleProviderPropertiesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettlementTokenOracleProvider"
  ): TypedContractMethod<[token: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUniswapFeeTier"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegisteredMarket"
  ): TypedContractMethod<[market: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredOracleProvider"
  ): TypedContractMethod<[oracleProvider: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegisteredSettlementToken"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "keeperFeePayer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "liquidator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "marketSettlement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "parameters"
  ): TypedContractMethod<
    [],
    [
      [string, string, bigint] & {
        oracleProvider: string;
        settlementToken: string;
        protocolFeeRate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerOracleProvider"
  ): TypedContractMethod<
    [oracleProvider: AddressLike, properties: OracleProviderPropertiesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSettlementToken"
  ): TypedContractMethod<
    [
      token: AddressLike,
      oracleProvider: AddressLike,
      minimumMargin: BigNumberish,
      interestRate: BigNumberish,
      flashLoanFeeRate: BigNumberish,
      earningDistributionThreshold: BigNumberish,
      uniswapFeeTier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredOracleProviders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "registeredSettlementTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeLastInterestRateRecord"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEarningDistributionThreshold"
  ): TypedContractMethod<
    [token: AddressLike, earningDistributionThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFlashLoanFeeRate"
  ): TypedContractMethod<
    [token: AddressLike, flashLoanFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinimumMargin"
  ): TypedContractMethod<
    [token: AddressLike, minimumMargin: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSettlementTokenOracleProvider"
  ): TypedContractMethod<
    [token: AddressLike, oracleProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUniswapFeeTier"
  ): TypedContractMethod<
    [token: AddressLike, uniswapFeeTier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unregisterOracleProvider"
  ): TypedContractMethod<[oracleProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDao"
  ): TypedContractMethod<[_dao: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDefaultProtocolFeeRate"
  ): TypedContractMethod<
    [_defaultProtocolFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateKeeperFeePayer"
  ): TypedContractMethod<[_keeperFeePayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLeverageLevel"
  ): TypedContractMethod<
    [oracleProvider: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLiquidator"
  ): TypedContractMethod<[_liquidator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketSettlement"
  ): TypedContractMethod<
    [_marketSettlement: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTakeProfitBPSRange"
  ): TypedContractMethod<
    [
      oracleProvider: AddressLike,
      minTakeProfitBPS: BigNumberish,
      maxTakeProfitBPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DaoUpdated"
  ): TypedContractEvent<
    DaoUpdatedEvent.InputTuple,
    DaoUpdatedEvent.OutputTuple,
    DaoUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultProtocolFeeRateUpdated"
  ): TypedContractEvent<
    DefaultProtocolFeeRateUpdatedEvent.InputTuple,
    DefaultProtocolFeeRateUpdatedEvent.OutputTuple,
    DefaultProtocolFeeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "InterestRateRecordAppended"
  ): TypedContractEvent<
    InterestRateRecordAppendedEvent.InputTuple,
    InterestRateRecordAppendedEvent.OutputTuple,
    InterestRateRecordAppendedEvent.OutputObject
  >;
  getEvent(
    key: "KeeperFeePayerUpdated"
  ): TypedContractEvent<
    KeeperFeePayerUpdatedEvent.InputTuple,
    KeeperFeePayerUpdatedEvent.OutputTuple,
    KeeperFeePayerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LastInterestRateRecordRemoved"
  ): TypedContractEvent<
    LastInterestRateRecordRemovedEvent.InputTuple,
    LastInterestRateRecordRemovedEvent.OutputTuple,
    LastInterestRateRecordRemovedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidatorUpdated"
  ): TypedContractEvent<
    LiquidatorUpdatedEvent.InputTuple,
    LiquidatorUpdatedEvent.OutputTuple,
    LiquidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketCreated"
  ): TypedContractEvent<
    MarketCreatedEvent.InputTuple,
    MarketCreatedEvent.OutputTuple,
    MarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketSettlementUpdated"
  ): TypedContractEvent<
    MarketSettlementUpdatedEvent.InputTuple,
    MarketSettlementUpdatedEvent.OutputTuple,
    MarketSettlementUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OracleProviderRegistered"
  ): TypedContractEvent<
    OracleProviderRegisteredEvent.InputTuple,
    OracleProviderRegisteredEvent.OutputTuple,
    OracleProviderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OracleProviderUnregistered"
  ): TypedContractEvent<
    OracleProviderUnregisteredEvent.InputTuple,
    OracleProviderUnregisteredEvent.OutputTuple,
    OracleProviderUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "SetEarningDistributionThreshold"
  ): TypedContractEvent<
    SetEarningDistributionThresholdEvent.InputTuple,
    SetEarningDistributionThresholdEvent.OutputTuple,
    SetEarningDistributionThresholdEvent.OutputObject
  >;
  getEvent(
    key: "SetFlashLoanFeeRate"
  ): TypedContractEvent<
    SetFlashLoanFeeRateEvent.InputTuple,
    SetFlashLoanFeeRateEvent.OutputTuple,
    SetFlashLoanFeeRateEvent.OutputObject
  >;
  getEvent(
    key: "SetMinimumMargin"
  ): TypedContractEvent<
    SetMinimumMarginEvent.InputTuple,
    SetMinimumMarginEvent.OutputTuple,
    SetMinimumMarginEvent.OutputObject
  >;
  getEvent(
    key: "SetSettlementTokenOracleProvider"
  ): TypedContractEvent<
    SetSettlementTokenOracleProviderEvent.InputTuple,
    SetSettlementTokenOracleProviderEvent.OutputTuple,
    SetSettlementTokenOracleProviderEvent.OutputObject
  >;
  getEvent(
    key: "SetUniswapFeeTier"
  ): TypedContractEvent<
    SetUniswapFeeTierEvent.InputTuple,
    SetUniswapFeeTierEvent.OutputTuple,
    SetUniswapFeeTierEvent.OutputObject
  >;
  getEvent(
    key: "SettlementTokenRegistered"
  ): TypedContractEvent<
    SettlementTokenRegisteredEvent.InputTuple,
    SettlementTokenRegisteredEvent.OutputTuple,
    SettlementTokenRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLeverageLevel"
  ): TypedContractEvent<
    UpdateLeverageLevelEvent.InputTuple,
    UpdateLeverageLevelEvent.OutputTuple,
    UpdateLeverageLevelEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTakeProfitBPSRange"
  ): TypedContractEvent<
    UpdateTakeProfitBPSRangeEvent.InputTuple,
    UpdateTakeProfitBPSRangeEvent.OutputTuple,
    UpdateTakeProfitBPSRangeEvent.OutputObject
  >;
  getEvent(
    key: "VaultSet"
  ): TypedContractEvent<
    VaultSetEvent.InputTuple,
    VaultSetEvent.OutputTuple,
    VaultSetEvent.OutputObject
  >;

  filters: {
    "DaoUpdated(address,address)": TypedContractEvent<
      DaoUpdatedEvent.InputTuple,
      DaoUpdatedEvent.OutputTuple,
      DaoUpdatedEvent.OutputObject
    >;
    DaoUpdated: TypedContractEvent<
      DaoUpdatedEvent.InputTuple,
      DaoUpdatedEvent.OutputTuple,
      DaoUpdatedEvent.OutputObject
    >;

    "DefaultProtocolFeeRateUpdated(uint16,uint16)": TypedContractEvent<
      DefaultProtocolFeeRateUpdatedEvent.InputTuple,
      DefaultProtocolFeeRateUpdatedEvent.OutputTuple,
      DefaultProtocolFeeRateUpdatedEvent.OutputObject
    >;
    DefaultProtocolFeeRateUpdated: TypedContractEvent<
      DefaultProtocolFeeRateUpdatedEvent.InputTuple,
      DefaultProtocolFeeRateUpdatedEvent.OutputTuple,
      DefaultProtocolFeeRateUpdatedEvent.OutputObject
    >;

    "InterestRateRecordAppended(address,uint256,uint256)": TypedContractEvent<
      InterestRateRecordAppendedEvent.InputTuple,
      InterestRateRecordAppendedEvent.OutputTuple,
      InterestRateRecordAppendedEvent.OutputObject
    >;
    InterestRateRecordAppended: TypedContractEvent<
      InterestRateRecordAppendedEvent.InputTuple,
      InterestRateRecordAppendedEvent.OutputTuple,
      InterestRateRecordAppendedEvent.OutputObject
    >;

    "KeeperFeePayerUpdated(address,address)": TypedContractEvent<
      KeeperFeePayerUpdatedEvent.InputTuple,
      KeeperFeePayerUpdatedEvent.OutputTuple,
      KeeperFeePayerUpdatedEvent.OutputObject
    >;
    KeeperFeePayerUpdated: TypedContractEvent<
      KeeperFeePayerUpdatedEvent.InputTuple,
      KeeperFeePayerUpdatedEvent.OutputTuple,
      KeeperFeePayerUpdatedEvent.OutputObject
    >;

    "LastInterestRateRecordRemoved(address,uint256,uint256)": TypedContractEvent<
      LastInterestRateRecordRemovedEvent.InputTuple,
      LastInterestRateRecordRemovedEvent.OutputTuple,
      LastInterestRateRecordRemovedEvent.OutputObject
    >;
    LastInterestRateRecordRemoved: TypedContractEvent<
      LastInterestRateRecordRemovedEvent.InputTuple,
      LastInterestRateRecordRemovedEvent.OutputTuple,
      LastInterestRateRecordRemovedEvent.OutputObject
    >;

    "LiquidatorUpdated(address,address)": TypedContractEvent<
      LiquidatorUpdatedEvent.InputTuple,
      LiquidatorUpdatedEvent.OutputTuple,
      LiquidatorUpdatedEvent.OutputObject
    >;
    LiquidatorUpdated: TypedContractEvent<
      LiquidatorUpdatedEvent.InputTuple,
      LiquidatorUpdatedEvent.OutputTuple,
      LiquidatorUpdatedEvent.OutputObject
    >;

    "MarketCreated(address,address,address)": TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;
    MarketCreated: TypedContractEvent<
      MarketCreatedEvent.InputTuple,
      MarketCreatedEvent.OutputTuple,
      MarketCreatedEvent.OutputObject
    >;

    "MarketSettlementUpdated(address,address)": TypedContractEvent<
      MarketSettlementUpdatedEvent.InputTuple,
      MarketSettlementUpdatedEvent.OutputTuple,
      MarketSettlementUpdatedEvent.OutputObject
    >;
    MarketSettlementUpdated: TypedContractEvent<
      MarketSettlementUpdatedEvent.InputTuple,
      MarketSettlementUpdatedEvent.OutputTuple,
      MarketSettlementUpdatedEvent.OutputObject
    >;

    "OracleProviderRegistered(address,tuple)": TypedContractEvent<
      OracleProviderRegisteredEvent.InputTuple,
      OracleProviderRegisteredEvent.OutputTuple,
      OracleProviderRegisteredEvent.OutputObject
    >;
    OracleProviderRegistered: TypedContractEvent<
      OracleProviderRegisteredEvent.InputTuple,
      OracleProviderRegisteredEvent.OutputTuple,
      OracleProviderRegisteredEvent.OutputObject
    >;

    "OracleProviderUnregistered(address)": TypedContractEvent<
      OracleProviderUnregisteredEvent.InputTuple,
      OracleProviderUnregisteredEvent.OutputTuple,
      OracleProviderUnregisteredEvent.OutputObject
    >;
    OracleProviderUnregistered: TypedContractEvent<
      OracleProviderUnregisteredEvent.InputTuple,
      OracleProviderUnregisteredEvent.OutputTuple,
      OracleProviderUnregisteredEvent.OutputObject
    >;

    "SetEarningDistributionThreshold(address,uint256)": TypedContractEvent<
      SetEarningDistributionThresholdEvent.InputTuple,
      SetEarningDistributionThresholdEvent.OutputTuple,
      SetEarningDistributionThresholdEvent.OutputObject
    >;
    SetEarningDistributionThreshold: TypedContractEvent<
      SetEarningDistributionThresholdEvent.InputTuple,
      SetEarningDistributionThresholdEvent.OutputTuple,
      SetEarningDistributionThresholdEvent.OutputObject
    >;

    "SetFlashLoanFeeRate(address,uint256)": TypedContractEvent<
      SetFlashLoanFeeRateEvent.InputTuple,
      SetFlashLoanFeeRateEvent.OutputTuple,
      SetFlashLoanFeeRateEvent.OutputObject
    >;
    SetFlashLoanFeeRate: TypedContractEvent<
      SetFlashLoanFeeRateEvent.InputTuple,
      SetFlashLoanFeeRateEvent.OutputTuple,
      SetFlashLoanFeeRateEvent.OutputObject
    >;

    "SetMinimumMargin(address,uint256)": TypedContractEvent<
      SetMinimumMarginEvent.InputTuple,
      SetMinimumMarginEvent.OutputTuple,
      SetMinimumMarginEvent.OutputObject
    >;
    SetMinimumMargin: TypedContractEvent<
      SetMinimumMarginEvent.InputTuple,
      SetMinimumMarginEvent.OutputTuple,
      SetMinimumMarginEvent.OutputObject
    >;

    "SetSettlementTokenOracleProvider(address,address)": TypedContractEvent<
      SetSettlementTokenOracleProviderEvent.InputTuple,
      SetSettlementTokenOracleProviderEvent.OutputTuple,
      SetSettlementTokenOracleProviderEvent.OutputObject
    >;
    SetSettlementTokenOracleProvider: TypedContractEvent<
      SetSettlementTokenOracleProviderEvent.InputTuple,
      SetSettlementTokenOracleProviderEvent.OutputTuple,
      SetSettlementTokenOracleProviderEvent.OutputObject
    >;

    "SetUniswapFeeTier(address,uint24)": TypedContractEvent<
      SetUniswapFeeTierEvent.InputTuple,
      SetUniswapFeeTierEvent.OutputTuple,
      SetUniswapFeeTierEvent.OutputObject
    >;
    SetUniswapFeeTier: TypedContractEvent<
      SetUniswapFeeTierEvent.InputTuple,
      SetUniswapFeeTierEvent.OutputTuple,
      SetUniswapFeeTierEvent.OutputObject
    >;

    "SettlementTokenRegistered(address,address,uint256,uint256,uint256,uint256,uint24)": TypedContractEvent<
      SettlementTokenRegisteredEvent.InputTuple,
      SettlementTokenRegisteredEvent.OutputTuple,
      SettlementTokenRegisteredEvent.OutputObject
    >;
    SettlementTokenRegistered: TypedContractEvent<
      SettlementTokenRegisteredEvent.InputTuple,
      SettlementTokenRegisteredEvent.OutputTuple,
      SettlementTokenRegisteredEvent.OutputObject
    >;

    "TreasuryUpdated(address,address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "UpdateLeverageLevel(address,uint8)": TypedContractEvent<
      UpdateLeverageLevelEvent.InputTuple,
      UpdateLeverageLevelEvent.OutputTuple,
      UpdateLeverageLevelEvent.OutputObject
    >;
    UpdateLeverageLevel: TypedContractEvent<
      UpdateLeverageLevelEvent.InputTuple,
      UpdateLeverageLevelEvent.OutputTuple,
      UpdateLeverageLevelEvent.OutputObject
    >;

    "UpdateTakeProfitBPSRange(address,uint32,uint32)": TypedContractEvent<
      UpdateTakeProfitBPSRangeEvent.InputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputObject
    >;
    UpdateTakeProfitBPSRange: TypedContractEvent<
      UpdateTakeProfitBPSRangeEvent.InputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputObject
    >;

    "VaultSet(address)": TypedContractEvent<
      VaultSetEvent.InputTuple,
      VaultSetEvent.OutputTuple,
      VaultSetEvent.OutputObject
    >;
    VaultSet: TypedContractEvent<
      VaultSetEvent.InputTuple,
      VaultSetEvent.OutputTuple,
      VaultSetEvent.OutputObject
    >;
  };
}
