/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: AddressLike;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  id: bigint,
  oracleVersion: bigint,
  amount: bigint,
  recipient: string,
  action: bigint,
  tradingFeeRate: bigint
] & {
  id: bigint;
  oracleVersion: bigint;
  amount: bigint;
  recipient: string;
  action: bigint;
  tradingFeeRate: bigint;
};

export declare namespace IMarketLiquidity {
  export type ClaimableLiquidityStruct = {
    mintingTokenAmountRequested: BigNumberish;
    mintingCLBTokenAmount: BigNumberish;
    burningCLBTokenAmountRequested: BigNumberish;
    burningCLBTokenAmount: BigNumberish;
    burningTokenAmount: BigNumberish;
  };

  export type ClaimableLiquidityStructOutput = [
    mintingTokenAmountRequested: bigint,
    mintingCLBTokenAmount: bigint,
    burningCLBTokenAmountRequested: bigint,
    burningCLBTokenAmount: bigint,
    burningTokenAmount: bigint
  ] & {
    mintingTokenAmountRequested: bigint;
    mintingCLBTokenAmount: bigint;
    burningCLBTokenAmountRequested: bigint;
    burningCLBTokenAmount: bigint;
    burningTokenAmount: bigint;
  };

  export type LiquidityBinValueStruct = {
    binValue: BigNumberish;
    clbTokenTotalSupply: BigNumberish;
  };

  export type LiquidityBinValueStructOutput = [
    binValue: bigint,
    clbTokenTotalSupply: bigint
  ] & { binValue: bigint; clbTokenTotalSupply: bigint };

  export type LiquidityBinStatusStruct = {
    liquidity: BigNumberish;
    freeLiquidity: BigNumberish;
    binValue: BigNumberish;
    tradingFeeRate: BigNumberish;
  };

  export type LiquidityBinStatusStructOutput = [
    liquidity: bigint,
    freeLiquidity: bigint,
    binValue: bigint,
    tradingFeeRate: bigint
  ] & {
    liquidity: bigint;
    freeLiquidity: bigint;
    binValue: bigint;
    tradingFeeRate: bigint;
  };

  export type PendingLiquidityStruct = {
    oracleVersion: BigNumberish;
    mintingTokenAmountRequested: BigNumberish;
    burningCLBTokenAmountRequested: BigNumberish;
  };

  export type PendingLiquidityStructOutput = [
    oracleVersion: bigint,
    mintingTokenAmountRequested: bigint,
    burningCLBTokenAmountRequested: bigint
  ] & {
    oracleVersion: bigint;
    mintingTokenAmountRequested: bigint;
    burningCLBTokenAmountRequested: bigint;
  };
}

export interface MarketLiquidityLensFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimableLiquidity"
      | "claimableLiquidityBatch"
      | "getBinFreeLiquidity"
      | "getBinLiquidity"
      | "getBinValues"
      | "getBinValuesAt"
      | "getLpReceipt"
      | "getLpReceipts"
      | "liquidityBinStatuses"
      | "pendingLiquidity"
      | "pendingLiquidityBatch"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimableLiquidity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableLiquidityBatch",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinFreeLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinValues",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinValuesAt",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpReceipts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBinStatuses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingLiquidityBatch",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableLiquidityBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinFreeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinValuesAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBinStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingLiquidityBatch",
    data: BytesLike
  ): Result;
}

export interface MarketLiquidityLensFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MarketLiquidityLensFacet;
  waitForDeployment(): Promise<this>;

  interface: MarketLiquidityLensFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the associated LiquidityPool.
   * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
   */
  claimableLiquidity: TypedContractMethod<
    [tradingFeeRate: BigNumberish, oracleVersion: BigNumberish],
    [IMarketLiquidity.ClaimableLiquidityStructOutput],
    "view"
  >;

  /**
   * Retrieves the claimable liquidity information for multiple trading fee rates and a specific oracle version from the associated LiquidityPool.
   * @param oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the claimable liquidity.
   */
  claimableLiquidityBatch: TypedContractMethod<
    [tradingFeeRates: BigNumberish[], oracleVersion: BigNumberish],
    [IMarketLiquidity.ClaimableLiquidityStructOutput[]],
    "view"
  >;

  /**
   * Retrieves the available (free) liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the available liquidity amount.
   */
  getBinFreeLiquidity: TypedContractMethod<
    [tradingFeeRate: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * Retrieves the total liquidity amount for a specific trading fee rate in the liquidity pool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the liquidity amount.
   */
  getBinLiquidity: TypedContractMethod<
    [tradingFeeRate: BigNumberish],
    [bigint],
    "view"
  >;

  /**
   * Retrieves the values of a specific trading fee rate's bins in the liquidity pool.      The value of a bin represents the total valuation of the liquidity in the bin.
   * @param tradingFeeRates The list of trading fee rate for which to retrieve the bin value.
   */
  getBinValues: TypedContractMethod<
    [tradingFeeRates: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  /**
   * Retrieves the values of specific trading fee rates' bins in the liquidity pool at a specific oracle version.      The value of a bin represents the total valuation of the liquidity in the bin.
   * @param oracleVersion The oracle version for which to retrieve the bin values.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the bin values.
   */
  getBinValuesAt: TypedContractMethod<
    [oracleVersion: BigNumberish, tradingFeeRates: BigNumberish[]],
    [IMarketLiquidity.LiquidityBinValueStructOutput[]],
    "view"
  >;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
   * @param receiptId The ID of the liquidity receipt to retrieve.
   */
  getLpReceipt: TypedContractMethod<
    [receiptId: BigNumberish],
    [LpReceiptStructOutput],
    "view"
  >;

  /**
   * Throws a `NotExistLpReceipt` error if the liquidity receipt does not exist.
   * @param receiptIds The ID list of the liquidity receipt to retrieve.
   */
  getLpReceipts: TypedContractMethod<
    [receiptIds: BigNumberish[]],
    [LpReceiptStructOutput[]],
    "view"
  >;

  /**
   * Retrieves the liquidity bin statuses for the caller's liquidity pool.
   */
  liquidityBinStatuses: TypedContractMethod<
    [],
    [IMarketLiquidity.LiquidityBinStatusStructOutput[]],
    "view"
  >;

  /**
   * Retrieves the pending liquidity information for a specific trading fee rate from the associated LiquidityPool.
   * @param tradingFeeRate The trading fee rate for which to retrieve the pending liquidity.
   */
  pendingLiquidity: TypedContractMethod<
    [tradingFeeRate: BigNumberish],
    [IMarketLiquidity.PendingLiquidityStructOutput],
    "view"
  >;

  /**
   * Retrieves the pending liquidity information for multiple trading fee rates from the associated LiquidityPool.
   * @param tradingFeeRates The list of trading fee rates for which to retrieve the pending liquidity.
   */
  pendingLiquidityBatch: TypedContractMethod<
    [tradingFeeRates: BigNumberish[]],
    [IMarketLiquidity.PendingLiquidityStructOutput[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimableLiquidity"
  ): TypedContractMethod<
    [tradingFeeRate: BigNumberish, oracleVersion: BigNumberish],
    [IMarketLiquidity.ClaimableLiquidityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimableLiquidityBatch"
  ): TypedContractMethod<
    [tradingFeeRates: BigNumberish[], oracleVersion: BigNumberish],
    [IMarketLiquidity.ClaimableLiquidityStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBinFreeLiquidity"
  ): TypedContractMethod<[tradingFeeRate: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBinLiquidity"
  ): TypedContractMethod<[tradingFeeRate: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBinValues"
  ): TypedContractMethod<[tradingFeeRates: BigNumberish[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBinValuesAt"
  ): TypedContractMethod<
    [oracleVersion: BigNumberish, tradingFeeRates: BigNumberish[]],
    [IMarketLiquidity.LiquidityBinValueStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLpReceipt"
  ): TypedContractMethod<
    [receiptId: BigNumberish],
    [LpReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLpReceipts"
  ): TypedContractMethod<
    [receiptIds: BigNumberish[]],
    [LpReceiptStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityBinStatuses"
  ): TypedContractMethod<
    [],
    [IMarketLiquidity.LiquidityBinStatusStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingLiquidity"
  ): TypedContractMethod<
    [tradingFeeRate: BigNumberish],
    [IMarketLiquidity.PendingLiquidityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pendingLiquidityBatch"
  ): TypedContractMethod<
    [tradingFeeRates: BigNumberish[]],
    [IMarketLiquidity.PendingLiquidityStructOutput[]],
    "view"
  >;

  filters: {};
}
