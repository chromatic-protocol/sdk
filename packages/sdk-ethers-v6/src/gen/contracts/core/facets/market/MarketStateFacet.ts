/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface MarketStateFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "clbToken"
      | "factory"
      | "oracleProvider"
      | "protocolFeeRate"
      | "setProtocolFeeRate"
      | "settlementToken"
      | "vault"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ProtocolFeeRateSet"): EventFragment;

  encodeFunctionData(functionFragment: "clbToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(functionFragment: "clbToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace ProtocolFeeRateSetEvent {
  export type InputTuple = [
    protocolFeeRateOld: BigNumberish,
    protocolFeeRateNew: BigNumberish
  ];
  export type OutputTuple = [
    protocolFeeRateOld: bigint,
    protocolFeeRateNew: bigint
  ];
  export interface OutputObject {
    protocolFeeRateOld: bigint;
    protocolFeeRateNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketStateFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MarketStateFacet;
  waitForDeployment(): Promise<this>;

  interface: MarketStateFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Returns the CLB token contract for the market.
   */
  clbToken: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the factory contract for the market.
   */
  factory: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the oracle provider contract for the market.
   */
  oracleProvider: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the protocol fee rate
   */
  protocolFeeRate: TypedContractMethod<[], [bigint], "view">;

  /**
   * Set the new protocol fee rate
   * @param _protocolFeeRate new protocol fee rate for the market
   */
  setProtocolFeeRate: TypedContractMethod<
    [_protocolFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Returns the settlement token of the market.
   */
  settlementToken: TypedContractMethod<[], [string], "view">;

  /**
   * Returns the vault contract for the market.
   */
  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clbToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "oracleProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setProtocolFeeRate"
  ): TypedContractMethod<
    [_protocolFeeRate: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ProtocolFeeRateSet"
  ): TypedContractEvent<
    ProtocolFeeRateSetEvent.InputTuple,
    ProtocolFeeRateSetEvent.OutputTuple,
    ProtocolFeeRateSetEvent.OutputObject
  >;

  filters: {
    "ProtocolFeeRateSet(uint16,uint16)": TypedContractEvent<
      ProtocolFeeRateSetEvent.InputTuple,
      ProtocolFeeRateSetEvent.OutputTuple,
      ProtocolFeeRateSetEvent.OutputObject
    >;
    ProtocolFeeRateSet: TypedContractEvent<
      ProtocolFeeRateSetEvent.InputTuple,
      ProtocolFeeRateSetEvent.OutputTuple,
      ProtocolFeeRateSetEvent.OutputObject
    >;
  };
}
