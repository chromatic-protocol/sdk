/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: AddressLike;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  id: bigint,
  oracleVersion: bigint,
  amount: bigint,
  recipient: string,
  action: bigint,
  tradingFeeRate: bigint
] & {
  id: bigint;
  oracleVersion: bigint;
  amount: bigint;
  recipient: string;
  action: bigint;
  tradingFeeRate: bigint;
};

export type BinMarginStruct = {
  tradingFeeRate: BigNumberish;
  amount: BigNumberish;
};

export type BinMarginStructOutput = [tradingFeeRate: bigint, amount: bigint] & {
  tradingFeeRate: bigint;
  amount: bigint;
};

export type PositionStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  closeVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  closeTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  owner: AddressLike;
  liquidator: AddressLike;
  _protocolFeeRate: BigNumberish;
  _binMargins: BinMarginStruct[];
};

export type PositionStructOutput = [
  id: bigint,
  openVersion: bigint,
  closeVersion: bigint,
  qty: bigint,
  openTimestamp: bigint,
  closeTimestamp: bigint,
  takerMargin: bigint,
  owner: string,
  liquidator: string,
  _protocolFeeRate: bigint,
  _binMargins: BinMarginStructOutput[]
] & {
  id: bigint;
  openVersion: bigint;
  closeVersion: bigint;
  qty: bigint;
  openTimestamp: bigint;
  closeTimestamp: bigint;
  takerMargin: bigint;
  owner: string;
  liquidator: string;
  _protocolFeeRate: bigint;
  _binMargins: BinMarginStructOutput[];
};

export type ClosePositionInfoStruct = {
  id: BigNumberish;
  closeVersion: BigNumberish;
  closeTimestamp: BigNumberish;
};

export type ClosePositionInfoStructOutput = [
  id: bigint,
  closeVersion: bigint,
  closeTimestamp: bigint
] & { id: bigint; closeVersion: bigint; closeTimestamp: bigint };

export interface MarketTradeClosePositionFacetInterface extends Interface {
  getFunction(
    nameOrSignature: "claimPosition" | "closePosition"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddLiquidity"
      | "AddLiquidityBatch"
      | "ClaimLiquidity"
      | "ClaimLiquidityBatch"
      | "ClaimPosition"
      | "ClaimPositionByKeeper"
      | "ClosePosition"
      | "DisplayModeUpdated"
      | "Liquidate"
      | "LiquidityModeUpdated"
      | "OpenPosition"
      | "PositionModeUpdated"
      | "ProtocolFeeRateUpdated"
      | "RemoveLiquidity"
      | "RemoveLiquidityBatch"
      | "WithdrawLiquidity"
      | "WithdrawLiquidityBatch"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
}

export namespace AddLiquidityEvent {
  export type InputTuple = [receipt: LpReceiptStruct];
  export type OutputTuple = [receipt: LpReceiptStructOutput];
  export interface OutputObject {
    receipt: LpReceiptStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AddLiquidityBatchEvent {
  export type InputTuple = [receipts: LpReceiptStruct[]];
  export type OutputTuple = [receipts: LpReceiptStructOutput[]];
  export interface OutputObject {
    receipts: LpReceiptStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimLiquidityEvent {
  export type InputTuple = [
    receipt: LpReceiptStruct,
    clbTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    receipt: LpReceiptStructOutput,
    clbTokenAmount: bigint
  ];
  export interface OutputObject {
    receipt: LpReceiptStructOutput;
    clbTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimLiquidityBatchEvent {
  export type InputTuple = [
    receipts: LpReceiptStruct[],
    clbTokenAmounts: BigNumberish[]
  ];
  export type OutputTuple = [
    receipts: LpReceiptStructOutput[],
    clbTokenAmounts: bigint[]
  ];
  export interface OutputObject {
    receipts: LpReceiptStructOutput[];
    clbTokenAmounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPositionEvent {
  export type InputTuple = [
    account: AddressLike,
    pnl: BigNumberish,
    interest: BigNumberish,
    position: PositionStruct
  ];
  export type OutputTuple = [
    account: string,
    pnl: bigint,
    interest: bigint,
    position: PositionStructOutput
  ];
  export interface OutputObject {
    account: string;
    pnl: bigint;
    interest: bigint;
    position: PositionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPositionByKeeperEvent {
  export type InputTuple = [
    account: AddressLike,
    pnl: BigNumberish,
    interest: BigNumberish,
    usedKeeperFee: BigNumberish,
    position: PositionStruct
  ];
  export type OutputTuple = [
    account: string,
    pnl: bigint,
    interest: bigint,
    usedKeeperFee: bigint,
    position: PositionStructOutput
  ];
  export interface OutputObject {
    account: string;
    pnl: bigint;
    interest: bigint;
    usedKeeperFee: bigint;
    position: PositionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosePositionEvent {
  export type InputTuple = [account: AddressLike, position: PositionStruct];
  export type OutputTuple = [account: string, position: PositionStructOutput];
  export interface OutputObject {
    account: string;
    position: PositionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DisplayModeUpdatedEvent {
  export type InputTuple = [
    displayModeOld: BigNumberish,
    displayModeNew: BigNumberish
  ];
  export type OutputTuple = [displayModeOld: bigint, displayModeNew: bigint];
  export interface OutputObject {
    displayModeOld: bigint;
    displayModeNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateEvent {
  export type InputTuple = [
    account: AddressLike,
    pnl: BigNumberish,
    interest: BigNumberish,
    usedKeeperFee: BigNumberish,
    position: PositionStruct
  ];
  export type OutputTuple = [
    account: string,
    pnl: bigint,
    interest: bigint,
    usedKeeperFee: bigint,
    position: PositionStructOutput
  ];
  export interface OutputObject {
    account: string;
    pnl: bigint;
    interest: bigint;
    usedKeeperFee: bigint;
    position: PositionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityModeUpdatedEvent {
  export type InputTuple = [
    liquidityModeOld: BigNumberish,
    liquidityModeNew: BigNumberish
  ];
  export type OutputTuple = [
    liquidityModeOld: bigint,
    liquidityModeNew: bigint
  ];
  export interface OutputObject {
    liquidityModeOld: bigint;
    liquidityModeNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenPositionEvent {
  export type InputTuple = [account: AddressLike, position: PositionStruct];
  export type OutputTuple = [account: string, position: PositionStructOutput];
  export interface OutputObject {
    account: string;
    position: PositionStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionModeUpdatedEvent {
  export type InputTuple = [
    positionModeOld: BigNumberish,
    positionModeNew: BigNumberish
  ];
  export type OutputTuple = [positionModeOld: bigint, positionModeNew: bigint];
  export interface OutputObject {
    positionModeOld: bigint;
    positionModeNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeRateUpdatedEvent {
  export type InputTuple = [
    protocolFeeRateOld: BigNumberish,
    protocolFeeRateNew: BigNumberish
  ];
  export type OutputTuple = [
    protocolFeeRateOld: bigint,
    protocolFeeRateNew: bigint
  ];
  export interface OutputObject {
    protocolFeeRateOld: bigint;
    protocolFeeRateNew: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityEvent {
  export type InputTuple = [receipt: LpReceiptStruct];
  export type OutputTuple = [receipt: LpReceiptStructOutput];
  export interface OutputObject {
    receipt: LpReceiptStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoveLiquidityBatchEvent {
  export type InputTuple = [receipts: LpReceiptStruct[]];
  export type OutputTuple = [receipts: LpReceiptStructOutput[]];
  export interface OutputObject {
    receipts: LpReceiptStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawLiquidityEvent {
  export type InputTuple = [
    receipt: LpReceiptStruct,
    amount: BigNumberish,
    burnedCLBTokenAmount: BigNumberish
  ];
  export type OutputTuple = [
    receipt: LpReceiptStructOutput,
    amount: bigint,
    burnedCLBTokenAmount: bigint
  ];
  export interface OutputObject {
    receipt: LpReceiptStructOutput;
    amount: bigint;
    burnedCLBTokenAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawLiquidityBatchEvent {
  export type InputTuple = [
    receipts: LpReceiptStruct[],
    amounts: BigNumberish[],
    burnedCLBTokenAmounts: BigNumberish[]
  ];
  export type OutputTuple = [
    receipts: LpReceiptStructOutput[],
    amounts: bigint[],
    burnedCLBTokenAmounts: bigint[]
  ];
  export interface OutputObject {
    receipts: LpReceiptStructOutput[];
    amounts: bigint[];
    burnedCLBTokenAmounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketTradeClosePositionFacet extends BaseContract {
  connect(runner?: ContractRunner | null): MarketTradeClosePositionFacet;
  waitForDeployment(): Promise<this>;

  interface: MarketTradeClosePositionFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Claims the position by transferring the available funds to the recipient.      The caller must be the owner of the position.      The position must be eligible for claim in the current oracle version.      The claimed amount is determined based on the position's profit and loss (pnl).      Throws a `NotExistPosition` error if the requested position does not exist.      Throws a `NotPermitted` error if the caller is not permitted to perform the action as they are not the owner of the position.      Throws a `NotClaimablePosition` error if the position cannot be claimed as it is not eligible for claim in the current oracle version.      Throws a `ClaimPositionCallbackError` error if an error occurred during the claim position callback.
   * @param data Additional data for the claim callback.
   * @param positionId The ID of the position to claim.
   * @param recipient The address of the recipient of the claimed position.
   */
  claimPosition: TypedContractMethod<
    [positionId: BigNumberish, recipient: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function allows the owner of the position to close it. The position must exist, be owned by the caller,      and not have already been closed. Upon successful closure, the position is settled, and a `ClosePosition` event is emitted.      If the position is closed in a different oracle version than the open version, a claim position task is created by the liquidator.      Otherwise, the position is immediately claimed, and a `ClaimPosition` event is emitted.      Throws a `NotExistPosition` error if the specified position does not exist.      Throws a `NotPermitted` error if the caller is not the owner of the position.      Throws an `AlreadyClosedPosition` error if the position has already been closed.      Throws a `ClaimPositionCallbackError` error if an error occurred during the claim position callback.
   * @param positionId The ID of the position to close.
   */
  closePosition: TypedContractMethod<
    [positionId: BigNumberish],
    [ClosePositionInfoStructOutput],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimPosition"
  ): TypedContractMethod<
    [positionId: BigNumberish, recipient: AddressLike, data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [ClosePositionInfoStructOutput],
    "nonpayable"
  >;

  getEvent(
    key: "AddLiquidity"
  ): TypedContractEvent<
    AddLiquidityEvent.InputTuple,
    AddLiquidityEvent.OutputTuple,
    AddLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "AddLiquidityBatch"
  ): TypedContractEvent<
    AddLiquidityBatchEvent.InputTuple,
    AddLiquidityBatchEvent.OutputTuple,
    AddLiquidityBatchEvent.OutputObject
  >;
  getEvent(
    key: "ClaimLiquidity"
  ): TypedContractEvent<
    ClaimLiquidityEvent.InputTuple,
    ClaimLiquidityEvent.OutputTuple,
    ClaimLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "ClaimLiquidityBatch"
  ): TypedContractEvent<
    ClaimLiquidityBatchEvent.InputTuple,
    ClaimLiquidityBatchEvent.OutputTuple,
    ClaimLiquidityBatchEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPosition"
  ): TypedContractEvent<
    ClaimPositionEvent.InputTuple,
    ClaimPositionEvent.OutputTuple,
    ClaimPositionEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPositionByKeeper"
  ): TypedContractEvent<
    ClaimPositionByKeeperEvent.InputTuple,
    ClaimPositionByKeeperEvent.OutputTuple,
    ClaimPositionByKeeperEvent.OutputObject
  >;
  getEvent(
    key: "ClosePosition"
  ): TypedContractEvent<
    ClosePositionEvent.InputTuple,
    ClosePositionEvent.OutputTuple,
    ClosePositionEvent.OutputObject
  >;
  getEvent(
    key: "DisplayModeUpdated"
  ): TypedContractEvent<
    DisplayModeUpdatedEvent.InputTuple,
    DisplayModeUpdatedEvent.OutputTuple,
    DisplayModeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidate"
  ): TypedContractEvent<
    LiquidateEvent.InputTuple,
    LiquidateEvent.OutputTuple,
    LiquidateEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityModeUpdated"
  ): TypedContractEvent<
    LiquidityModeUpdatedEvent.InputTuple,
    LiquidityModeUpdatedEvent.OutputTuple,
    LiquidityModeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OpenPosition"
  ): TypedContractEvent<
    OpenPositionEvent.InputTuple,
    OpenPositionEvent.OutputTuple,
    OpenPositionEvent.OutputObject
  >;
  getEvent(
    key: "PositionModeUpdated"
  ): TypedContractEvent<
    PositionModeUpdatedEvent.InputTuple,
    PositionModeUpdatedEvent.OutputTuple,
    PositionModeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeRateUpdated"
  ): TypedContractEvent<
    ProtocolFeeRateUpdatedEvent.InputTuple,
    ProtocolFeeRateUpdatedEvent.OutputTuple,
    ProtocolFeeRateUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidity"
  ): TypedContractEvent<
    RemoveLiquidityEvent.InputTuple,
    RemoveLiquidityEvent.OutputTuple,
    RemoveLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "RemoveLiquidityBatch"
  ): TypedContractEvent<
    RemoveLiquidityBatchEvent.InputTuple,
    RemoveLiquidityBatchEvent.OutputTuple,
    RemoveLiquidityBatchEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawLiquidity"
  ): TypedContractEvent<
    WithdrawLiquidityEvent.InputTuple,
    WithdrawLiquidityEvent.OutputTuple,
    WithdrawLiquidityEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawLiquidityBatch"
  ): TypedContractEvent<
    WithdrawLiquidityBatchEvent.InputTuple,
    WithdrawLiquidityBatchEvent.OutputTuple,
    WithdrawLiquidityBatchEvent.OutputObject
  >;

  filters: {
    "AddLiquidity(tuple)": TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;
    AddLiquidity: TypedContractEvent<
      AddLiquidityEvent.InputTuple,
      AddLiquidityEvent.OutputTuple,
      AddLiquidityEvent.OutputObject
    >;

    "AddLiquidityBatch(tuple[])": TypedContractEvent<
      AddLiquidityBatchEvent.InputTuple,
      AddLiquidityBatchEvent.OutputTuple,
      AddLiquidityBatchEvent.OutputObject
    >;
    AddLiquidityBatch: TypedContractEvent<
      AddLiquidityBatchEvent.InputTuple,
      AddLiquidityBatchEvent.OutputTuple,
      AddLiquidityBatchEvent.OutputObject
    >;

    "ClaimLiquidity(tuple,uint256)": TypedContractEvent<
      ClaimLiquidityEvent.InputTuple,
      ClaimLiquidityEvent.OutputTuple,
      ClaimLiquidityEvent.OutputObject
    >;
    ClaimLiquidity: TypedContractEvent<
      ClaimLiquidityEvent.InputTuple,
      ClaimLiquidityEvent.OutputTuple,
      ClaimLiquidityEvent.OutputObject
    >;

    "ClaimLiquidityBatch(tuple[],uint256[])": TypedContractEvent<
      ClaimLiquidityBatchEvent.InputTuple,
      ClaimLiquidityBatchEvent.OutputTuple,
      ClaimLiquidityBatchEvent.OutputObject
    >;
    ClaimLiquidityBatch: TypedContractEvent<
      ClaimLiquidityBatchEvent.InputTuple,
      ClaimLiquidityBatchEvent.OutputTuple,
      ClaimLiquidityBatchEvent.OutputObject
    >;

    "ClaimPosition(address,int256,uint256,tuple)": TypedContractEvent<
      ClaimPositionEvent.InputTuple,
      ClaimPositionEvent.OutputTuple,
      ClaimPositionEvent.OutputObject
    >;
    ClaimPosition: TypedContractEvent<
      ClaimPositionEvent.InputTuple,
      ClaimPositionEvent.OutputTuple,
      ClaimPositionEvent.OutputObject
    >;

    "ClaimPositionByKeeper(address,int256,uint256,uint256,tuple)": TypedContractEvent<
      ClaimPositionByKeeperEvent.InputTuple,
      ClaimPositionByKeeperEvent.OutputTuple,
      ClaimPositionByKeeperEvent.OutputObject
    >;
    ClaimPositionByKeeper: TypedContractEvent<
      ClaimPositionByKeeperEvent.InputTuple,
      ClaimPositionByKeeperEvent.OutputTuple,
      ClaimPositionByKeeperEvent.OutputObject
    >;

    "ClosePosition(address,tuple)": TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;
    ClosePosition: TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;

    "DisplayModeUpdated(uint8,uint8)": TypedContractEvent<
      DisplayModeUpdatedEvent.InputTuple,
      DisplayModeUpdatedEvent.OutputTuple,
      DisplayModeUpdatedEvent.OutputObject
    >;
    DisplayModeUpdated: TypedContractEvent<
      DisplayModeUpdatedEvent.InputTuple,
      DisplayModeUpdatedEvent.OutputTuple,
      DisplayModeUpdatedEvent.OutputObject
    >;

    "Liquidate(address,int256,uint256,uint256,tuple)": TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;
    Liquidate: TypedContractEvent<
      LiquidateEvent.InputTuple,
      LiquidateEvent.OutputTuple,
      LiquidateEvent.OutputObject
    >;

    "LiquidityModeUpdated(uint8,uint8)": TypedContractEvent<
      LiquidityModeUpdatedEvent.InputTuple,
      LiquidityModeUpdatedEvent.OutputTuple,
      LiquidityModeUpdatedEvent.OutputObject
    >;
    LiquidityModeUpdated: TypedContractEvent<
      LiquidityModeUpdatedEvent.InputTuple,
      LiquidityModeUpdatedEvent.OutputTuple,
      LiquidityModeUpdatedEvent.OutputObject
    >;

    "OpenPosition(address,tuple)": TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;
    OpenPosition: TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;

    "PositionModeUpdated(uint8,uint8)": TypedContractEvent<
      PositionModeUpdatedEvent.InputTuple,
      PositionModeUpdatedEvent.OutputTuple,
      PositionModeUpdatedEvent.OutputObject
    >;
    PositionModeUpdated: TypedContractEvent<
      PositionModeUpdatedEvent.InputTuple,
      PositionModeUpdatedEvent.OutputTuple,
      PositionModeUpdatedEvent.OutputObject
    >;

    "ProtocolFeeRateUpdated(uint16,uint16)": TypedContractEvent<
      ProtocolFeeRateUpdatedEvent.InputTuple,
      ProtocolFeeRateUpdatedEvent.OutputTuple,
      ProtocolFeeRateUpdatedEvent.OutputObject
    >;
    ProtocolFeeRateUpdated: TypedContractEvent<
      ProtocolFeeRateUpdatedEvent.InputTuple,
      ProtocolFeeRateUpdatedEvent.OutputTuple,
      ProtocolFeeRateUpdatedEvent.OutputObject
    >;

    "RemoveLiquidity(tuple)": TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;
    RemoveLiquidity: TypedContractEvent<
      RemoveLiquidityEvent.InputTuple,
      RemoveLiquidityEvent.OutputTuple,
      RemoveLiquidityEvent.OutputObject
    >;

    "RemoveLiquidityBatch(tuple[])": TypedContractEvent<
      RemoveLiquidityBatchEvent.InputTuple,
      RemoveLiquidityBatchEvent.OutputTuple,
      RemoveLiquidityBatchEvent.OutputObject
    >;
    RemoveLiquidityBatch: TypedContractEvent<
      RemoveLiquidityBatchEvent.InputTuple,
      RemoveLiquidityBatchEvent.OutputTuple,
      RemoveLiquidityBatchEvent.OutputObject
    >;

    "WithdrawLiquidity(tuple,uint256,uint256)": TypedContractEvent<
      WithdrawLiquidityEvent.InputTuple,
      WithdrawLiquidityEvent.OutputTuple,
      WithdrawLiquidityEvent.OutputObject
    >;
    WithdrawLiquidity: TypedContractEvent<
      WithdrawLiquidityEvent.InputTuple,
      WithdrawLiquidityEvent.OutputTuple,
      WithdrawLiquidityEvent.OutputObject
    >;

    "WithdrawLiquidityBatch(tuple[],uint256[],uint256[])": TypedContractEvent<
      WithdrawLiquidityBatchEvent.InputTuple,
      WithdrawLiquidityBatchEvent.OutputTuple,
      WithdrawLiquidityBatchEvent.OutputObject
    >;
    WithdrawLiquidityBatch: TypedContractEvent<
      WithdrawLiquidityBatchEvent.InputTuple,
      WithdrawLiquidityBatchEvent.OutputTuple,
      WithdrawLiquidityBatchEvent.OutputObject
    >;
  };
}
