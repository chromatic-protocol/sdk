/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export declare namespace IOracleProviderRegistry {
  export type OracleProviderPropertiesStruct = {
    minTakeProfitBPS: BigNumberish;
    maxTakeProfitBPS: BigNumberish;
    leverageLevel: BigNumberish;
  };

  export type OracleProviderPropertiesStructOutput = [
    minTakeProfitBPS: bigint,
    maxTakeProfitBPS: bigint,
    leverageLevel: bigint
  ] & {
    minTakeProfitBPS: bigint;
    maxTakeProfitBPS: bigint;
    leverageLevel: bigint;
  };
}

export interface IOracleProviderRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getOracleProviderProperties"
      | "isRegisteredOracleProvider"
      | "registerOracleProvider"
      | "registeredOracleProviders"
      | "unregisterOracleProvider"
      | "updateLeverageLevel"
      | "updateTakeProfitBPSRange"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OracleProviderRegistered"
      | "OracleProviderUnregistered"
      | "UpdateLeverageLevel"
      | "UpdateTakeProfitBPSRange"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getOracleProviderProperties",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOracleProvider",
    values: [
      AddressLike,
      IOracleProviderRegistry.OracleProviderPropertiesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredOracleProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterOracleProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLeverageLevel",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTakeProfitBPSRange",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getOracleProviderProperties",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredOracleProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLeverageLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTakeProfitBPSRange",
    data: BytesLike
  ): Result;
}

export namespace OracleProviderRegisteredEvent {
  export type InputTuple = [
    oracleProvider: AddressLike,
    properties: IOracleProviderRegistry.OracleProviderPropertiesStruct
  ];
  export type OutputTuple = [
    oracleProvider: string,
    properties: IOracleProviderRegistry.OracleProviderPropertiesStructOutput
  ];
  export interface OutputObject {
    oracleProvider: string;
    properties: IOracleProviderRegistry.OracleProviderPropertiesStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleProviderUnregisteredEvent {
  export type InputTuple = [oracleProvider: AddressLike];
  export type OutputTuple = [oracleProvider: string];
  export interface OutputObject {
    oracleProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLeverageLevelEvent {
  export type InputTuple = [oracleProvider: AddressLike, level: BigNumberish];
  export type OutputTuple = [oracleProvider: string, level: bigint];
  export interface OutputObject {
    oracleProvider: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTakeProfitBPSRangeEvent {
  export type InputTuple = [
    oracleProvider: AddressLike,
    minTakeProfitBPS: BigNumberish,
    maxTakeProfitBPS: BigNumberish
  ];
  export type OutputTuple = [
    oracleProvider: string,
    minTakeProfitBPS: bigint,
    maxTakeProfitBPS: bigint
  ];
  export interface OutputObject {
    oracleProvider: string;
    minTakeProfitBPS: bigint;
    maxTakeProfitBPS: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOracleProviderRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IOracleProviderRegistry;
  waitForDeployment(): Promise<this>;

  interface: IOracleProviderRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Retrieves the properties of an oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  getOracleProviderProperties: TypedContractMethod<
    [oracleProvider: AddressLike],
    [IOracleProviderRegistry.OracleProviderPropertiesStructOutput],
    "view"
  >;

  /**
   * Checks if an oracle provider is registered.
   * @param oracleProvider The address of the oracle provider to check.
   */
  isRegisteredOracleProvider: TypedContractMethod<
    [oracleProvider: AddressLike],
    [boolean],
    "view"
  >;

  registerOracleProvider: TypedContractMethod<
    [
      oracleProvider: AddressLike,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct
    ],
    [void],
    "nonpayable"
  >;

  /**
   * Gets the registered oracle providers.
   */
  registeredOracleProviders: TypedContractMethod<[], [string[]], "view">;

  /**
   * Unregisters an oracle provider.
   * @param oracleProvider The address of the oracle provider to unregister.
   */
  unregisterOracleProvider: TypedContractMethod<
    [oracleProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * The level must be either 0 or 1, and the max leverage must be x10 for level 0 or x20 for level 1.
   * Updates the leverage level of an oracle provider in the registry.
   * @param level The new leverage level to be set for the oracle provider.
   * @param oracleProvider The address of the oracle provider.
   */
  updateLeverageLevel: TypedContractMethod<
    [oracleProvider: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Updates the take-profit basis points range of an oracle provider.
   * @param maxTakeProfitBPS The new maximum take-profit basis points.
   * @param minTakeProfitBPS The new minimum take-profit basis points.
   * @param oracleProvider The address of the oracle provider.
   */
  updateTakeProfitBPSRange: TypedContractMethod<
    [
      oracleProvider: AddressLike,
      minTakeProfitBPS: BigNumberish,
      maxTakeProfitBPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getOracleProviderProperties"
  ): TypedContractMethod<
    [oracleProvider: AddressLike],
    [IOracleProviderRegistry.OracleProviderPropertiesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isRegisteredOracleProvider"
  ): TypedContractMethod<[oracleProvider: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerOracleProvider"
  ): TypedContractMethod<
    [
      oracleProvider: AddressLike,
      properties: IOracleProviderRegistry.OracleProviderPropertiesStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registeredOracleProviders"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "unregisterOracleProvider"
  ): TypedContractMethod<[oracleProvider: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLeverageLevel"
  ): TypedContractMethod<
    [oracleProvider: AddressLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTakeProfitBPSRange"
  ): TypedContractMethod<
    [
      oracleProvider: AddressLike,
      minTakeProfitBPS: BigNumberish,
      maxTakeProfitBPS: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OracleProviderRegistered"
  ): TypedContractEvent<
    OracleProviderRegisteredEvent.InputTuple,
    OracleProviderRegisteredEvent.OutputTuple,
    OracleProviderRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "OracleProviderUnregistered"
  ): TypedContractEvent<
    OracleProviderUnregisteredEvent.InputTuple,
    OracleProviderUnregisteredEvent.OutputTuple,
    OracleProviderUnregisteredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLeverageLevel"
  ): TypedContractEvent<
    UpdateLeverageLevelEvent.InputTuple,
    UpdateLeverageLevelEvent.OutputTuple,
    UpdateLeverageLevelEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTakeProfitBPSRange"
  ): TypedContractEvent<
    UpdateTakeProfitBPSRangeEvent.InputTuple,
    UpdateTakeProfitBPSRangeEvent.OutputTuple,
    UpdateTakeProfitBPSRangeEvent.OutputObject
  >;

  filters: {
    "OracleProviderRegistered(address,tuple)": TypedContractEvent<
      OracleProviderRegisteredEvent.InputTuple,
      OracleProviderRegisteredEvent.OutputTuple,
      OracleProviderRegisteredEvent.OutputObject
    >;
    OracleProviderRegistered: TypedContractEvent<
      OracleProviderRegisteredEvent.InputTuple,
      OracleProviderRegisteredEvent.OutputTuple,
      OracleProviderRegisteredEvent.OutputObject
    >;

    "OracleProviderUnregistered(address)": TypedContractEvent<
      OracleProviderUnregisteredEvent.InputTuple,
      OracleProviderUnregisteredEvent.OutputTuple,
      OracleProviderUnregisteredEvent.OutputObject
    >;
    OracleProviderUnregistered: TypedContractEvent<
      OracleProviderUnregisteredEvent.InputTuple,
      OracleProviderUnregisteredEvent.OutputTuple,
      OracleProviderUnregisteredEvent.OutputObject
    >;

    "UpdateLeverageLevel(address,uint8)": TypedContractEvent<
      UpdateLeverageLevelEvent.InputTuple,
      UpdateLeverageLevelEvent.OutputTuple,
      UpdateLeverageLevelEvent.OutputObject
    >;
    UpdateLeverageLevel: TypedContractEvent<
      UpdateLeverageLevelEvent.InputTuple,
      UpdateLeverageLevelEvent.OutputTuple,
      UpdateLeverageLevelEvent.OutputObject
    >;

    "UpdateTakeProfitBPSRange(address,uint32,uint32)": TypedContractEvent<
      UpdateTakeProfitBPSRangeEvent.InputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputObject
    >;
    UpdateTakeProfitBPSRange: TypedContractEvent<
      UpdateTakeProfitBPSRangeEvent.InputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputTuple,
      UpdateTakeProfitBPSRangeEvent.OutputObject
    >;
  };
}
