/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BinMarginStruct = {
  tradingFeeRate: BigNumberish;
  amount: BigNumberish;
};

export type BinMarginStructOutput = [tradingFeeRate: bigint, amount: bigint] & {
  tradingFeeRate: bigint;
  amount: bigint;
};

export type PositionStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  closeVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  closeTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  owner: AddressLike;
  liquidator: AddressLike;
  _protocolFeeRate: BigNumberish;
  _binMargins: BinMarginStruct[];
};

export type PositionStructOutput = [
  id: bigint,
  openVersion: bigint,
  closeVersion: bigint,
  qty: bigint,
  openTimestamp: bigint,
  closeTimestamp: bigint,
  takerMargin: bigint,
  owner: string,
  liquidator: string,
  _protocolFeeRate: bigint,
  _binMargins: BinMarginStructOutput[]
] & {
  id: bigint;
  openVersion: bigint;
  closeVersion: bigint;
  qty: bigint;
  openTimestamp: bigint;
  closeTimestamp: bigint;
  takerMargin: bigint;
  owner: string;
  liquidator: string;
  _protocolFeeRate: bigint;
  _binMargins: BinMarginStructOutput[];
};

export type ClaimPositionInfoStruct = {
  id: BigNumberish;
  entryPrice: BigNumberish;
  exitPrice: BigNumberish;
  realizedPnl: BigNumberish;
  interest: BigNumberish;
  cause: BytesLike;
};

export type ClaimPositionInfoStructOutput = [
  id: bigint,
  entryPrice: bigint,
  exitPrice: bigint,
  realizedPnl: bigint,
  interest: bigint,
  cause: string
] & {
  id: bigint;
  entryPrice: bigint;
  exitPrice: bigint;
  realizedPnl: bigint;
  interest: bigint;
  cause: string;
};

export type OpenPositionInfoStruct = {
  id: BigNumberish;
  openVersion: BigNumberish;
  qty: BigNumberish;
  openTimestamp: BigNumberish;
  takerMargin: BigNumberish;
  makerMargin: BigNumberish;
  tradingFee: BigNumberish;
};

export type OpenPositionInfoStructOutput = [
  id: bigint,
  openVersion: bigint,
  qty: bigint,
  openTimestamp: bigint,
  takerMargin: bigint,
  makerMargin: bigint,
  tradingFee: bigint
] & {
  id: bigint;
  openVersion: bigint;
  qty: bigint;
  openTimestamp: bigint;
  takerMargin: bigint;
  makerMargin: bigint;
  tradingFee: bigint;
};

export interface ChromaticAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balance"
      | "claimPosition"
      | "claimPositionCallback"
      | "closePosition"
      | "getPositionIds"
      | "hasPositionId"
      | "initialize"
      | "openPosition"
      | "openPositionCallback"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimPosition" | "ClosePosition" | "OpenPosition"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPositionCallback",
    values: [PositionStruct, ClaimPositionInfoStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionIds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPositionId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPositionCallback",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPositionCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPositionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPositionCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ClaimPositionEvent {
  export type InputTuple = [
    marketAddress: AddressLike,
    positionId: BigNumberish,
    entryPrice: BigNumberish,
    exitPrice: BigNumberish,
    realizedPnl: BigNumberish,
    interest: BigNumberish,
    cause: BytesLike
  ];
  export type OutputTuple = [
    marketAddress: string,
    positionId: bigint,
    entryPrice: bigint,
    exitPrice: bigint,
    realizedPnl: bigint,
    interest: bigint,
    cause: string
  ];
  export interface OutputObject {
    marketAddress: string;
    positionId: bigint;
    entryPrice: bigint;
    exitPrice: bigint;
    realizedPnl: bigint;
    interest: bigint;
    cause: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClosePositionEvent {
  export type InputTuple = [
    marketAddress: AddressLike,
    positionId: BigNumberish,
    closeVersion: BigNumberish,
    closeTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    marketAddress: string,
    positionId: bigint,
    closeVersion: bigint,
    closeTimestamp: bigint
  ];
  export interface OutputObject {
    marketAddress: string;
    positionId: bigint;
    closeVersion: bigint;
    closeTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OpenPositionEvent {
  export type InputTuple = [
    marketAddress: AddressLike,
    positionId: BigNumberish,
    openVersion: BigNumberish,
    qty: BigNumberish,
    openTimestamp: BigNumberish,
    takerMargin: BigNumberish,
    makerMargin: BigNumberish,
    tradingFee: BigNumberish
  ];
  export type OutputTuple = [
    marketAddress: string,
    positionId: bigint,
    openVersion: bigint,
    qty: bigint,
    openTimestamp: bigint,
    takerMargin: bigint,
    makerMargin: bigint,
    tradingFee: bigint
  ];
  export interface OutputObject {
    marketAddress: string;
    positionId: bigint;
    openVersion: bigint;
    qty: bigint;
    openTimestamp: bigint;
    takerMargin: bigint;
    makerMargin: bigint;
    tradingFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChromaticAccount extends BaseContract {
  connect(runner?: ContractRunner | null): ChromaticAccount;
  waitForDeployment(): Promise<this>;

  interface: ChromaticAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Returns the balance of the specified token for the account.
   * @param token The address of the token.
   */
  balance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  /**
   * This function can only be called by the chromatic router contract.      Throws a `NotExistPosition` error if the position does not exist.
   * Claims the specified position in the specified market.
   * @param marketAddress The address of the market.
   * @param positionId The ID of the position to claim.
   */
  claimPosition: TypedContractMethod<
    [marketAddress: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimPositionCallback: TypedContractMethod<
    [
      position: PositionStruct,
      claimInfo: ClaimPositionInfoStruct,
      arg2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the chromatic router contract.      Throws a `NotExistPosition` error if the position does not exist.
   * Closes the specified position in the specified market.
   * @param marketAddress The address of the market.
   * @param positionId The ID of the position to close.
   */
  closePosition: TypedContractMethod<
    [marketAddress: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Retrieves an array of position IDs owned by this account for the specified market.
   * @param marketAddress The address of the market.
   */
  getPositionIds: TypedContractMethod<
    [market: AddressLike],
    [bigint[]],
    "view"
  >;

  /**
   * Checks if the specified market has the specified position ID.
   * @param marketAddress The address of the market.
   * @param positionId The ID of the position.
   */
  hasPositionId: TypedContractMethod<
    [market: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;

  /**
   * Throws an `AlreadyInitialized` error if the account has already been initialized.
   * Initializes the account with the specified owner, router, and market factory addresses.
   * @param _marketFactory The address of the market factory contract.
   * @param _owner The address of the account owner.
   * @param _router The address of the router contract.
   */
  initialize: TypedContractMethod<
    [_owner: AddressLike, _router: AddressLike, _marketFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by the chromatic router contract.
   * Opens a new position in the specified market.
   * @param makerMargin The margin required for the maker.
   * @param marketAddress The address of the market.
   * @param maxAllowableTradingFee The maximum allowable trading fee.
   * @param qty The quantity of the position.
   * @param takerMargin The margin required for the taker.
   */
  openPosition: TypedContractMethod<
    [
      marketAddress: AddressLike,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish
    ],
    [OpenPositionInfoStructOutput],
    "nonpayable"
  >;

  /**
   * Transfers the required margin from the account to the specified vault.      Throws a `NotEnoughBalance` error if the account does not have enough balance of the settlement token.
   * Callback function called after opening a position.
   * @param data Additional data related to the callback.
   * @param marginRequired The amount of margin required for the position.
   * @param settlementToken The address of the settlement token used in the position.
   * @param vault The address of the vault contract.
   */
  openPositionCallback: TypedContractMethod<
    [
      settlementToken: AddressLike,
      vault: AddressLike,
      marginRequired: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  /**
   * This function can only be called by owner.      Throws a `NotEnoughBalance` error if the account does not have enough balance of the specified token.
   * Withdraws the specified amount of tokens from the account.
   * @param amount The amount of tokens to withdraw.
   * @param token The address of the token to withdraw.
   */
  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimPosition"
  ): TypedContractMethod<
    [marketAddress: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimPositionCallback"
  ): TypedContractMethod<
    [
      position: PositionStruct,
      claimInfo: ClaimPositionInfoStruct,
      arg2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "closePosition"
  ): TypedContractMethod<
    [marketAddress: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPositionIds"
  ): TypedContractMethod<[market: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasPositionId"
  ): TypedContractMethod<
    [market: AddressLike, id: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _router: AddressLike, _marketFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openPosition"
  ): TypedContractMethod<
    [
      marketAddress: AddressLike,
      qty: BigNumberish,
      takerMargin: BigNumberish,
      makerMargin: BigNumberish,
      maxAllowableTradingFee: BigNumberish
    ],
    [OpenPositionInfoStructOutput],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "openPositionCallback"
  ): TypedContractMethod<
    [
      settlementToken: AddressLike,
      vault: AddressLike,
      marginRequired: BigNumberish,
      arg3: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimPosition"
  ): TypedContractEvent<
    ClaimPositionEvent.InputTuple,
    ClaimPositionEvent.OutputTuple,
    ClaimPositionEvent.OutputObject
  >;
  getEvent(
    key: "ClosePosition"
  ): TypedContractEvent<
    ClosePositionEvent.InputTuple,
    ClosePositionEvent.OutputTuple,
    ClosePositionEvent.OutputObject
  >;
  getEvent(
    key: "OpenPosition"
  ): TypedContractEvent<
    OpenPositionEvent.InputTuple,
    OpenPositionEvent.OutputTuple,
    OpenPositionEvent.OutputObject
  >;

  filters: {
    "ClaimPosition(address,uint256,uint256,uint256,int256,uint256,bytes4)": TypedContractEvent<
      ClaimPositionEvent.InputTuple,
      ClaimPositionEvent.OutputTuple,
      ClaimPositionEvent.OutputObject
    >;
    ClaimPosition: TypedContractEvent<
      ClaimPositionEvent.InputTuple,
      ClaimPositionEvent.OutputTuple,
      ClaimPositionEvent.OutputObject
    >;

    "ClosePosition(address,uint256,uint256,uint256)": TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;
    ClosePosition: TypedContractEvent<
      ClosePositionEvent.InputTuple,
      ClosePositionEvent.OutputTuple,
      ClosePositionEvent.OutputObject
    >;

    "OpenPosition(address,uint256,uint256,int256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;
    OpenPosition: TypedContractEvent<
      OpenPositionEvent.InputTuple,
      OpenPositionEvent.OutputTuple,
      OpenPositionEvent.OutputObject
    >;
  };
}
