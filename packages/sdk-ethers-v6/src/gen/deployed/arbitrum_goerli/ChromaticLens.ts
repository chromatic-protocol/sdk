/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type LpReceiptStruct = {
  id: BigNumberish;
  oracleVersion: BigNumberish;
  amount: BigNumberish;
  recipient: AddressLike;
  action: BigNumberish;
  tradingFeeRate: BigNumberish;
};

export type LpReceiptStructOutput = [
  id: bigint,
  oracleVersion: bigint,
  amount: bigint,
  recipient: string,
  action: bigint,
  tradingFeeRate: bigint
] & {
  id: bigint;
  oracleVersion: bigint;
  amount: bigint;
  recipient: string;
  action: bigint;
  tradingFeeRate: bigint;
};

export declare namespace IMarketLiquidity {
  export type ClaimableLiquidityStruct = {
    mintingTokenAmountRequested: BigNumberish;
    mintingCLBTokenAmount: BigNumberish;
    burningCLBTokenAmountRequested: BigNumberish;
    burningCLBTokenAmount: BigNumberish;
    burningTokenAmount: BigNumberish;
  };

  export type ClaimableLiquidityStructOutput = [
    mintingTokenAmountRequested: bigint,
    mintingCLBTokenAmount: bigint,
    burningCLBTokenAmountRequested: bigint,
    burningCLBTokenAmount: bigint,
    burningTokenAmount: bigint
  ] & {
    mintingTokenAmountRequested: bigint;
    mintingCLBTokenAmount: bigint;
    burningCLBTokenAmountRequested: bigint;
    burningCLBTokenAmount: bigint;
    burningTokenAmount: bigint;
  };

  export type LiquidityBinStatusStruct = {
    liquidity: BigNumberish;
    freeLiquidity: BigNumberish;
    binValue: BigNumberish;
    tradingFeeRate: BigNumberish;
  };

  export type LiquidityBinStatusStructOutput = [
    liquidity: bigint,
    freeLiquidity: bigint,
    binValue: bigint,
    tradingFeeRate: bigint
  ] & {
    liquidity: bigint;
    freeLiquidity: bigint;
    binValue: bigint;
    tradingFeeRate: bigint;
  };
}

export declare namespace ChromaticLens {
  export type CLBBalanceStruct = {
    tokenId: BigNumberish;
    balance: BigNumberish;
    totalSupply: BigNumberish;
    binValue: BigNumberish;
  };

  export type CLBBalanceStructOutput = [
    tokenId: bigint,
    balance: bigint,
    totalSupply: bigint,
    binValue: bigint
  ] & {
    tokenId: bigint;
    balance: bigint;
    totalSupply: bigint;
    binValue: bigint;
  };
}

export declare namespace IOracleProvider {
  export type OracleVersionStruct = {
    version: BigNumberish;
    timestamp: BigNumberish;
    price: BigNumberish;
  };

  export type OracleVersionStructOutput = [
    version: bigint,
    timestamp: bigint,
    price: bigint
  ] & { version: bigint; timestamp: bigint; price: bigint };
}

export interface ChromaticLensInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimableLiquidity"
      | "clbBalanceOf"
      | "liquidityBinStatuses"
      | "lpReceipts"
      | "multicall"
      | "oracleVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimableLiquidity",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clbBalanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBinStatuses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpReceipts",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleVersion",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimableLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clbBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBinStatuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpReceipts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleVersion",
    data: BytesLike
  ): Result;
}

export interface ChromaticLens extends BaseContract {
  connect(runner?: ContractRunner | null): ChromaticLens;
  waitForDeployment(): Promise<this>;

  interface: ChromaticLensInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  /**
   * Retrieves the claimable liquidity information for a specific trading fee rate and oracle version from the given Chromatic Market.
   * @param _oracleVersion The oracle version for which to retrieve the claimable liquidity.
   * @param market The Chromatic Market from which to retrieve the claimable liquidity information.
   * @param tradingFeeRate The trading fee rate for which to retrieve the claimable liquidity.
   */
  claimableLiquidity: TypedContractMethod<
    [
      market: AddressLike,
      tradingFeeRate: BigNumberish,
      _oracleVersion: BigNumberish
    ],
    [IMarketLiquidity.ClaimableLiquidityStructOutput],
    "view"
  >;

  /**
   * Retrieves the CLB token balances for the specified owner in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param owner The address of the CLB token owner.
   */
  clbBalanceOf: TypedContractMethod<
    [market: AddressLike, owner: AddressLike],
    [ChromaticLens.CLBBalanceStructOutput[]],
    "view"
  >;

  /**
   * Retrieves the liquidity bin statuses for the specified Chromatic Market.
   * @param market The Chromatic Market contract for which liquidity bin statuses are retrieved.
   */
  liquidityBinStatuses: TypedContractMethod<
    [market: AddressLike],
    [IMarketLiquidity.LiquidityBinStatusStructOutput[]],
    "view"
  >;

  /**
   * Retrieves the LP receipts for the specified owner in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param owner The address of the LP token owner.
   */
  lpReceipts: TypedContractMethod<
    [market: AddressLike, owner: AddressLike],
    [LpReceiptStructOutput[]],
    "view"
  >;

  multicall: TypedContractMethod<[data: BytesLike[]], [string[]], "view">;

  /**
   * Retrieves the OracleVersion for the specified oracle version in the given Chromatic market.
   * @param market The address of the Chromatic market contract.
   * @param version An oracle versions.
   */
  oracleVersion: TypedContractMethod<
    [market: AddressLike, version: BigNumberish],
    [IOracleProvider.OracleVersionStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimableLiquidity"
  ): TypedContractMethod<
    [
      market: AddressLike,
      tradingFeeRate: BigNumberish,
      _oracleVersion: BigNumberish
    ],
    [IMarketLiquidity.ClaimableLiquidityStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "clbBalanceOf"
  ): TypedContractMethod<
    [market: AddressLike, owner: AddressLike],
    [ChromaticLens.CLBBalanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityBinStatuses"
  ): TypedContractMethod<
    [market: AddressLike],
    [IMarketLiquidity.LiquidityBinStatusStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "lpReceipts"
  ): TypedContractMethod<
    [market: AddressLike, owner: AddressLike],
    [LpReceiptStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "multicall"
  ): TypedContractMethod<[data: BytesLike[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "oracleVersion"
  ): TypedContractMethod<
    [market: AddressLike, version: BigNumberish],
    [IOracleProvider.OracleVersionStructOutput],
    "view"
  >;

  filters: {};
}
