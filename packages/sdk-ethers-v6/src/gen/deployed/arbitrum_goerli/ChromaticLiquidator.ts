/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ChromaticLiquidatorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "automate"
      | "cancelClaimPositionTask"
      | "cancelLiquidationTask"
      | "claimInterval"
      | "claimPosition"
      | "createClaimPositionTask"
      | "createLiquidationTask"
      | "dedicatedMsgSender"
      | "getClaimPositionTaskId"
      | "getLiquidationTaskId"
      | "liquidate"
      | "liquidationInterval"
      | "resolveClaimPosition"
      | "resolveLiquidation"
      | "updateClaimInterval"
      | "updateLiquidationInterval"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "UpdateClaimInterval" | "UpdateLiquidationInterval"
  ): EventFragment;

  encodeFunctionData(functionFragment: "automate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelClaimPositionTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLiquidationTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaimPositionTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLiquidationTask",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dedicatedMsgSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimPositionTaskId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationTaskId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resolveClaimPosition",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveLiquidation",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationInterval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "automate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelClaimPositionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLiquidationTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaimPositionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLiquidationTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dedicatedMsgSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimPositionTaskId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationTaskId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveClaimPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveLiquidation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationInterval",
    data: BytesLike
  ): Result;
}

export namespace UpdateClaimIntervalEvent {
  export type InputTuple = [interval: BigNumberish];
  export type OutputTuple = [interval: bigint];
  export interface OutputObject {
    interval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLiquidationIntervalEvent {
  export type InputTuple = [interval: BigNumberish];
  export type OutputTuple = [interval: bigint];
  export interface OutputObject {
    interval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChromaticLiquidator extends BaseContract {
  connect(runner?: ContractRunner | null): ChromaticLiquidator;
  waitForDeployment(): Promise<this>;

  interface: ChromaticLiquidatorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  automate: TypedContractMethod<[], [string], "view">;

  /**
   * Can only be called by a registered market.
   * Cancels a claim position task for a given position.
   * @param positionId The ID of the position for which to cancel the claim position task.
   */
  cancelClaimPositionTask: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by a registered market.
   * Cancels a liquidation task for a given position.
   * @param positionId The ID of the position for which to cancel the liquidation task.
   */
  cancelLiquidationTask: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimInterval: TypedContractMethod<[], [bigint], "view">;

  /**
   * Claims a position in a market.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be claimed.
   */
  claimPosition: TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by a registered market.
   * Creates a claim position task for a given position.
   * @param positionId The ID of the position to be claimed.
   */
  createClaimPositionTask: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by a registered market.
   * Creates a liquidation task for a given position.
   * @param positionId The ID of the position to be liquidated.
   */
  createLiquidationTask: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  dedicatedMsgSender: TypedContractMethod<[], [string], "view">;

  getClaimPositionTaskId: TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [string],
    "view"
  >;

  getLiquidationTaskId: TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [string],
    "view"
  >;

  /**
   * Liquidates a position in a market.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be liquidated.
   */
  liquidate: TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  liquidationInterval: TypedContractMethod<[], [bigint], "view">;

  /**
   * This function is called by the Gelato automation system.
   * Resolves the claim of a position.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be claimed.
   */
  resolveClaimPosition: TypedContractMethod<
    [_market: AddressLike, positionId: BigNumberish],
    [[boolean, string] & { canExec: boolean; execPayload: string }],
    "view"
  >;

  /**
   * This function is called by the Gelato automation system.
   * Resolves the liquidation of a position.
   * @param market The address of the market contract.
   * @param positionId The ID of the position to be liquidated.
   */
  resolveLiquidation: TypedContractMethod<
    [_market: AddressLike, positionId: BigNumberish],
    [[boolean, string] & { canExec: boolean; execPayload: string }],
    "view"
  >;

  /**
   * Can only be called by the DAO
   * Updates the claim task interval.
   * @param interval The new claim task interval.
   */
  updateClaimInterval: TypedContractMethod<
    [interval: BigNumberish],
    [void],
    "nonpayable"
  >;

  /**
   * Can only be called by the DAO
   * Updates the liquidation task interval.
   * @param interval The new liquidation task interval.
   */
  updateLiquidationInterval: TypedContractMethod<
    [interval: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "automate"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cancelClaimPositionTask"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelLiquidationTask"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimPosition"
  ): TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createClaimPositionTask"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLiquidationTask"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dedicatedMsgSender"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getClaimPositionTaskId"
  ): TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationTaskId"
  ): TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [market: AddressLike, positionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidationInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resolveClaimPosition"
  ): TypedContractMethod<
    [_market: AddressLike, positionId: BigNumberish],
    [[boolean, string] & { canExec: boolean; execPayload: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "resolveLiquidation"
  ): TypedContractMethod<
    [_market: AddressLike, positionId: BigNumberish],
    [[boolean, string] & { canExec: boolean; execPayload: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateClaimInterval"
  ): TypedContractMethod<[interval: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLiquidationInterval"
  ): TypedContractMethod<[interval: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "UpdateClaimInterval"
  ): TypedContractEvent<
    UpdateClaimIntervalEvent.InputTuple,
    UpdateClaimIntervalEvent.OutputTuple,
    UpdateClaimIntervalEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLiquidationInterval"
  ): TypedContractEvent<
    UpdateLiquidationIntervalEvent.InputTuple,
    UpdateLiquidationIntervalEvent.OutputTuple,
    UpdateLiquidationIntervalEvent.OutputObject
  >;

  filters: {
    "UpdateClaimInterval(uint256)": TypedContractEvent<
      UpdateClaimIntervalEvent.InputTuple,
      UpdateClaimIntervalEvent.OutputTuple,
      UpdateClaimIntervalEvent.OutputObject
    >;
    UpdateClaimInterval: TypedContractEvent<
      UpdateClaimIntervalEvent.InputTuple,
      UpdateClaimIntervalEvent.OutputTuple,
      UpdateClaimIntervalEvent.OutputObject
    >;

    "UpdateLiquidationInterval(uint256)": TypedContractEvent<
      UpdateLiquidationIntervalEvent.InputTuple,
      UpdateLiquidationIntervalEvent.OutputTuple,
      UpdateLiquidationIntervalEvent.OutputObject
    >;
    UpdateLiquidationInterval: TypedContractEvent<
      UpdateLiquidationIntervalEvent.InputTuple,
      UpdateLiquidationIntervalEvent.OutputTuple,
      UpdateLiquidationIntervalEvent.OutputObject
    >;
  };
}
