/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ChromaticLens,
  ChromaticLensInterface,
} from "../../../deployed/arbitrum_goerli/ChromaticLens";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IChromaticRouter",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "int16",
        name: "tradingFeeRate",
        type: "int16",
      },
      {
        internalType: "uint256",
        name: "_oracleVersion",
        type: "uint256",
      },
    ],
    name: "claimableLiquidity",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "mintingTokenAmountRequested",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mintingCLBTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningCLBTokenAmountRequested",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningCLBTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "burningTokenAmount",
            type: "uint256",
          },
        ],
        internalType: "struct IMarketLiquidity.ClaimableLiquidity",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "clbBalanceOf",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalSupply",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "binValue",
            type: "uint256",
          },
        ],
        internalType: "struct ChromaticLens.CLBBalance[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
    ],
    name: "liquidityBinStatuses",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "liquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "freeLiquidity",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "binValue",
            type: "uint256",
          },
          {
            internalType: "int16",
            name: "tradingFeeRate",
            type: "int16",
          },
        ],
        internalType: "struct IMarketLiquidity.LiquidityBinStatus[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "lpReceipts",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oracleVersion",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "enum LpAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "int16",
            name: "tradingFeeRate",
            type: "int16",
          },
        ],
        internalType: "struct LpReceipt[]",
        name: "result",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IChromaticMarket",
        name: "market",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "oracleVersion",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "Fixed18",
            name: "price",
            type: "int256",
          },
        ],
        internalType: "struct IOracleProvider.OracleVersion",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051611dcc380380611dcc83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b611d39806100936000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063ac9650d811610050578063ac9650d81461012a578063ad35f0261461014a578063e1928af01461016a57600080fd5b8063585bc52914610077578063676c6ce9146100a05780639b2fa372146100d5575b600080fd5b61008a6100853660046112d9565b61018a565b6040516100979190611312565b60405180910390f35b6100b36100ae366004611376565b610830565b6040805182518152602080840151908201529181015190820152606001610097565b6100e86100e33660046113b1565b610945565b6040516100979190600060a082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015292915050565b61013d6101383660046113f2565b610a18565b60405161009791906114d5565b61015d610158366004611555565b610b02565b6040516100979190611572565b61017d6101783660046112d9565b610b95565b60405161009791906115fe565b60606000610196610d7c565b90506000815167ffffffffffffffff8111156101b4576101b46116c9565b6040519080825280602002602001820160405280156101dd578160200160208202803683370190505b50905060005b815181101561022c57848282815181106101ff576101ff6116f8565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526001016101e3565b5060008573ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190611727565b73ffffffffffffffffffffffffffffffffffffffff16634e1273f483856040518363ffffffff1660e01b81526004016102d792919061177f565b600060405180830381865afa1580156102f4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261033a919081019061187e565b90506000805b82518110156103795782818151811061035b5761035b6116f8565b6020026020010151600014610371576001909101905b600101610340565b5060008167ffffffffffffffff811115610395576103956116c9565b6040519080825280602002602001820160405280156103be578160200160208202803683370190505b50905060008267ffffffffffffffff8111156103dc576103dc6116c9565b604051908082528060200260200182016040528015610405578160200160208202803683370190505b50905060008367ffffffffffffffff811115610423576104236116c9565b60405190808252806020026020018201604052801561044c578160200160208202803683370190505b5090506000805b865181101561053f5786818151811061046e5761046e6116f8565b60200260200101516000146105375786818151811061048f5761048f6116f8565b60200260200101518583815181106104a9576104a96116f8565b6020026020010181815250508881815181106104c7576104c76116f8565b60200260200101518483815181106104e1576104e16116f8565b60200260200101818152505061050f898281518110610502576105026116f8565b6020026020010151610e77565b838381518110610521576105216116f8565b600192830b602091820292909201015291909101905b600101610453565b5060008b73ffffffffffffffffffffffffffffffffffffffff166264041d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b09190611727565b73ffffffffffffffffffffffffffffffffffffffff166377954ac2856040518263ffffffff1660e01b81526004016105e89190611914565b600060405180830381865afa158015610605573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261064b919081019061187e565b905060008c73ffffffffffffffffffffffffffffffffffffffff1663faf07bf3856040518263ffffffff1660e01b81526004016106889190611927565b600060405180830381865afa1580156106a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526106eb919081019061187e565b905060008767ffffffffffffffff811115610708576107086116c9565b60405190808252806020026020018201604052801561076457816020015b6107516040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816107265790505b50905060005b8881101561081c57604051806080016040528088838151811061078f5761078f6116f8565b602002602001015181526020018983815181106107ae576107ae6116f8565b602002602001015181526020018583815181106107cd576107cd6116f8565b602002602001015181526020018483815181106107ec576107ec6116f8565b6020026020010151815250828281518110610809576108096116f8565b602090810291909101015260010161076a565b509a50505050505050505050505b92915050565b61085460405180606001604052806000815260200160008152602001600081525090565b8273ffffffffffffffffffffffffffffffffffffffff16630aa7d2f96040518163ffffffff1660e01b8152600401602060405180830381865afa15801561089f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c39190611727565b73ffffffffffffffffffffffffffffffffffffffff16637ece075d836040518263ffffffff1660e01b81526004016108fd91815260200190565b606060405180830381865afa15801561091a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093e919061196e565b9392505050565b6109776040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040517f5cefa9fb000000000000000000000000000000000000000000000000000000008152600184900b60048201526024810183905273ffffffffffffffffffffffffffffffffffffffff851690635cefa9fb9060440160a060405180830381865afa1580156109ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1091906119ca565b949350505050565b60608167ffffffffffffffff811115610a3357610a336116c9565b604051908082528060200260200182016040528015610a6657816020015b6060815260200190600190039081610a515790505b50905060005b82811015610afb57610ad630858584818110610a8a57610a8a6116f8565b9050602002810190610a9c9190611a3a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610eae92505050565b828281518110610ae857610ae86116f8565b6020908102919091010152600101610a6c565b5092915050565b60608173ffffffffffffffffffffffffffffffffffffffff166338085c3d6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261082a9190810190611aa6565b600080546040517f067681e800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152848116602483015260609392169063067681e890604401600060405180830381865afa158015610c10573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610c56919081019061187e565b9050805167ffffffffffffffff811115610c7257610c726116c9565b604051908082528060200260200182016040528015610cab57816020015b610c98611238565b815260200190600190039081610c905790505b50915060005b8151811015610d74578473ffffffffffffffffffffffffffffffffffffffff1663b79711e1838381518110610ce857610ce86116f8565b60200260200101516040518263ffffffff1660e01b8152600401610d0e91815260200190565b60c060405180830381865afa158015610d2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4f9190611b6f565b838281518110610d6157610d616116f8565b6020908102919091010152600101610cb1565b505092915050565b60606000610d88610ed3565b90506000610d9860246002611c34565b67ffffffffffffffff811115610db057610db06116c9565b604051908082528060200260200182016040528015610dd9578160200160208202803683370190505b50905060005b6024811015610afb57610e09838260248110610dfd57610dfd6116f8565b6020020151600161100f565b828281518110610e1b57610e1b6116f8565b602002602001018181525050610e48838260248110610e3c57610e3c6116f8565b6020020151600061100f565b82610e54602484611c4b565b81518110610e6457610e646116f8565b6020908102919091010152600101610ddf565b60006402540be4008210610ea557610e9c610e976402540be40084611c5e565b611037565b61082a90611c71565b61082a82611037565b606061093e8383604051806060016040528060258152602001611cdf602591396110d4565b610edb611295565b50604080516104808101825260018152600260208201526003918101919091526004606082015260056080820152600660a0820152600760c0820152600860e08201526009610100820152600a6101208201526014610140820152601e610160820152602861018082015260326101a0820152603c6101c082015260466101e08201526050610200820152605a610220820152606461024082015260c861026082015261012c6102808201526101906102a08201526101f46102c08201526102586102e08201526102bc610300820152610320808201526103846103408201526103e86103608201526105dc6103808201526107d06103a08201526109c46103c0820152610bb86103e0820152610dac610400820152610fa061042082015261119461044082015261138861046082015290565b60008161102e576110296402540be40061ffff8516611c4b565b61093e565b505061ffff1690565b600061ffff8211156110d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f362062697473000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5090565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516110fe9190611caf565b600060405180830381855afa9150503d8060008114611139576040519150601f19603f3d011682016040523d82523d6000602084013e61113e565b606091505b509150915061114f86838387611159565b9695505050505050565b606083156111ef5782516000036111e85773ffffffffffffffffffffffffffffffffffffffff85163b6111e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016110c7565b5081610a10565b610a1083838151156112045781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c79190611ccb565b6040518060c00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006001811115611288576112886115cf565b8152600060209091015290565b6040518061048001604052806024906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff811681146112d657600080fd5b50565b600080604083850312156112ec57600080fd5b82356112f7816112b4565b91506020830135611307816112b4565b809150509250929050565b602080825282518282018190526000919060409081850190868401855b828110156113695781518051855286810151878601528581015186860152606090810151908501526080909301929085019060010161132f565b5091979650505050505050565b6000806040838503121561138957600080fd5b8235611394816112b4565b946020939093013593505050565b8060010b81146112d657600080fd5b6000806000606084860312156113c657600080fd5b83356113d1816112b4565b925060208401356113e1816113a2565b929592945050506040919091013590565b6000806020838503121561140557600080fd5b823567ffffffffffffffff8082111561141d57600080fd5b818501915085601f83011261143157600080fd5b81358181111561144057600080fd5b8660208260051b850101111561145557600080fd5b60209290920196919550909350505050565b60005b8381101561148257818101518382015260200161146a565b50506000910152565b600081518084526114a3816020860160208601611467565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611548577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261153685835161148b565b945092850192908501906001016114fc565b5092979650505050505050565b60006020828403121561156757600080fd5b813561093e816112b4565b602080825282518282018190526000919060409081850190868401855b828110156113695781518051855286810151878601528581015186860152606090810151600190810b91860191909152608090940193918601910161158f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156116bb578251805186528781015188870152868101518787015260608082015173ffffffffffffffffffffffffffffffffffffffff169087015260808082015160028110611695577f4e487b710000000000000000000000000000000000000000000000000000000085526021600452602485fd5b9087015260a090810151600190810b9187019190915260c090950194928701920161161c565b509298975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561173957600080fd5b815161093e816112b4565b600081518084526020808501945080840160005b8381101561177457815187529582019590820190600101611758565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156117ce57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161179c565b5050508381038285015261114f8186611744565b6040516080810167ffffffffffffffff81118282101715611805576118056116c9565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611852576118526116c9565b604052919050565b600067ffffffffffffffff821115611874576118746116c9565b5060051b60200190565b6000602080838503121561189157600080fd5b825167ffffffffffffffff8111156118a857600080fd5b8301601f810185136118b957600080fd5b80516118cc6118c78261185a565b61180b565b81815260059190911b820183019083810190878311156118eb57600080fd5b928401925b82841015611909578351825292840192908401906118f0565b979650505050505050565b60208152600061093e6020830184611744565b6020808252825182820181905260009190848201906040850190845b81811015611962578351600190810b8452938501939285019201611943565b50909695505050505050565b60006060828403121561198057600080fd5b6040516060810181811067ffffffffffffffff821117156119a3576119a36116c9565b80604052508251815260208301516020820152604083015160408201528091505092915050565b600060a082840312156119dc57600080fd5b60405160a0810181811067ffffffffffffffff821117156119ff576119ff6116c9565b806040525082518152602083015160208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112611a6f57600080fd5b83018035915067ffffffffffffffff821115611a8a57600080fd5b602001915036819003821315611a9f57600080fd5b9250929050565b60006020808385031215611ab957600080fd5b825167ffffffffffffffff811115611ad057600080fd5b8301601f81018513611ae157600080fd5b8051611aef6118c78261185a565b81815260079190911b82018301908381019087831115611b0e57600080fd5b928401925b828410156119095760808489031215611b2c5760008081fd5b611b346117e2565b84518152858501518682015260408086015190820152606080860151611b59816113a2565b9082015282526080939093019290840190611b13565b600060c08284031215611b8157600080fd5b60405160c0810181811067ffffffffffffffff82111715611ba457611ba46116c9565b80604052508251815260208301516020820152604083015160408201526060830151611bcf816112b4565b6060820152608083015160028110611be657600080fd5b608082015260a0830151611bf9816113a2565b60a08201529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761082a5761082a611c05565b8082018082111561082a5761082a611c05565b8181038181111561082a5761082a611c05565b60008160010b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80008103611ca657611ca6611c05565b60000392915050565b60008251611cc1818460208701611467565b9190910192915050565b60208152600061093e602083018461148b56fe416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564a26469706673582212208e4ab630ca30105987e5bf7e435d703b7fd657dc0d87d80e4ce41ad328adc91664736f6c63430008130033";

type ChromaticLensConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChromaticLensConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChromaticLens__factory extends ContractFactory {
  constructor(...args: ChromaticLensConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_router, overrides || {});
  }
  override deploy(
    _router: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_router, overrides || {}) as Promise<
      ChromaticLens & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ChromaticLens__factory {
    return super.connect(runner) as ChromaticLens__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChromaticLensInterface {
    return new Interface(_abi) as ChromaticLensInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ChromaticLens {
    return new Contract(address, _abi, runner) as unknown as ChromaticLens;
  }
}
