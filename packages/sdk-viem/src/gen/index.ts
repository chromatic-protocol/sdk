// Generated by @wagmi/cli@1.3.0 on 1/30/2024 at 4:27:26 AM

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CLBToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const clbTokenABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'OnlyAccessableByMarket' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'burn',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'exists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'image',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'market',
    outputs: [{ name: '', internalType: 'contract IChromaticMarket', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'totalSupplyBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChromaticMarketFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const chromaticMarketFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_marketDiamondCutFacet', internalType: 'address', type: 'address' },
      { name: '_marketLoupeFacet', internalType: 'address', type: 'address' },
      { name: '_marketStateFacet', internalType: 'address', type: 'address' },
      { name: '_marketLiquidityFacet', internalType: 'address', type: 'address' },
      { name: '_marketLiquidityLensFacet', internalType: 'address', type: 'address' },
      { name: '_marketTradeFacet', internalType: 'address', type: 'address' },
      { name: '_marketLiquidateFacet', internalType: 'address', type: 'address' },
      { name: '_marketSettleFacet', internalType: 'address', type: 'address' }
    ]
  },
  { type: 'error', inputs: [], name: 'AlreadySetVault' },
  { type: 'error', inputs: [], name: 'ExistMarket' },
  { type: 'error', inputs: [], name: 'NotRegisteredOracleProvider' },
  { type: 'error', inputs: [], name: 'NotRegisteredSettlementToken' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'daoOld', internalType: 'address', type: 'address', indexed: true },
      { name: 'daoNew', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'DaoUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'defaultProtocolFeeRateOld', internalType: 'uint16', type: 'uint16', indexed: true },
      { name: 'defaultProtocolFeeRateNew', internalType: 'uint16', type: 'uint16', indexed: true }
    ],
    name: 'DefaultProtocolFeeRateUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'annualRateBPS', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'beginTimestamp', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'InterestRateRecordAppended'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'keeperFeePayerOld', internalType: 'address', type: 'address', indexed: true },
      { name: 'keeperFeePayerNew', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'KeeperFeePayerUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'annualRateBPS', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'beginTimestamp', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'LastInterestRateRecordRemoved'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'liquidatorOld', internalType: 'address', type: 'address', indexed: true },
      { name: 'liquidatorNew', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'LiquidatorUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'settlementToken', internalType: 'address', type: 'address', indexed: true },
      { name: 'market', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'MarketCreated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketSettlementOld', internalType: 'address', type: 'address', indexed: true },
      { name: 'marketSettlementNew', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'MarketSettlementUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'properties',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ],
        indexed: false
      }
    ],
    name: 'OracleProviderRegistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true }],
    name: 'OracleProviderUnregistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'earningDistributionThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true
      }
    ],
    name: 'SetEarningDistributionThreshold'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'flashLoanFeeRate', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SetFlashLoanFeeRate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'minimumMargin', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'SetMinimumMargin'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'SetSettlementTokenOracleProvider'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'uniswapFeeTier', internalType: 'uint24', type: 'uint24', indexed: true }
    ],
    name: 'SetUniswapFeeTier'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'minimumMargin', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'interestRate', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'flashLoanFeeRate', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'earningDistributionThreshold',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false
      },
      { name: 'uniswapFeeTier', internalType: 'uint24', type: 'uint24', indexed: false }
    ],
    name: 'SettlementTokenRegistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'treasuryOld', internalType: 'address', type: 'address', indexed: true },
      { name: 'treasuryNew', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'TreasuryUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'level', internalType: 'uint8', type: 'uint8', indexed: true }
    ],
    name: 'UpdateLeverageLevel'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32', indexed: true }
    ],
    name: 'UpdateTakeProfitBPSRange'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'vault', internalType: 'address', type: 'address', indexed: true }],
    name: 'VaultSet'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'annualRateBPS', internalType: 'uint256', type: 'uint256' },
      { name: 'beginTimestamp', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'appendInterestRateRecord',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'from', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'calculateInterest',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'settlementToken', internalType: 'address', type: 'address' }
    ],
    name: 'createMarket',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'currentInterestRate',
    outputs: [{ name: 'annualRateBPS', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dao',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultProtocolFeeRate',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getEarningDistributionThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getFlashLoanFeeRate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getInterestRateRecords',
    outputs: [
      {
        name: '',
        internalType: 'struct InterestRate.Record[]',
        type: 'tuple[]',
        components: [
          { name: 'annualRateBPS', internalType: 'uint256', type: 'uint256' },
          { name: 'beginTimestamp', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'settlementToken', internalType: 'address', type: 'address' }
    ],
    name: 'getMarket',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMarkets',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'settlementToken', internalType: 'address', type: 'address' }],
    name: 'getMarketsBySettlmentToken',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getMinimumMargin',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'getOracleProviderProperties',
    outputs: [
      {
        name: '',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getSettlementTokenOracleProvider',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getUniswapFeeTier',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'isRegisteredMarket',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'isRegisteredOracleProvider',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'isRegisteredSettlementToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'keeperFeePayer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidator',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'marketSettlement',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'parameters',
    outputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'protocolFeeRate', internalType: 'uint16', type: 'uint16' }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      {
        name: 'properties',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ]
      }
    ],
    name: 'registerOracleProvider',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'minimumMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'interestRate', internalType: 'uint256', type: 'uint256' },
      { name: 'flashLoanFeeRate', internalType: 'uint256', type: 'uint256' },
      { name: 'earningDistributionThreshold', internalType: 'uint256', type: 'uint256' },
      { name: 'uniswapFeeTier', internalType: 'uint24', type: 'uint24' }
    ],
    name: 'registerSettlementToken',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registeredOracleProviders',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registeredSettlementTokens',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'removeLastInterestRateRecord',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'earningDistributionThreshold', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'setEarningDistributionThreshold',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'flashLoanFeeRate', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'setFlashLoanFeeRate',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'minimumMargin', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'setMinimumMargin',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'oracleProvider', internalType: 'address', type: 'address' }
    ],
    name: 'setSettlementTokenOracleProvider',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'uniswapFeeTier', internalType: 'uint24', type: 'uint24' }
    ],
    name: 'setUniswapFeeTier',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_vault', internalType: 'address', type: 'address' }],
    name: 'setVault',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'treasury',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'unregisterOracleProvider',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_dao', internalType: 'address', type: 'address' }],
    name: 'updateDao',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_defaultProtocolFeeRate', internalType: 'uint16', type: 'uint16' }],
    name: 'updateDefaultProtocolFeeRate',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_keeperFeePayer', internalType: 'address', type: 'address' }],
    name: 'updateKeeperFeePayer',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'level', internalType: 'uint8', type: 'uint8' }
    ],
    name: 'updateLeverageLevel',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_liquidator', internalType: 'address', type: 'address' }],
    name: 'updateLiquidator',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_marketSettlement', internalType: 'address', type: 'address' }],
    name: 'updateMarketSettlement',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
      { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' }
    ],
    name: 'updateTakeProfitBPSRange',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_treasury', internalType: 'address', type: 'address' }],
    name: 'updateTreasury',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  }
] as const

/**
 *
 */
export const chromaticMarketFactoryAddress = {
  31337: '0x7bc06c482DEAd17c0e297aFbC32f6e63d3846650',
  421614: '0xd012cA4Ac7E08819D2fD0a9cc3C569e48ffa8482'
} as const

/**
 *
 */
export const chromaticMarketFactoryConfig = {
  address: chromaticMarketFactoryAddress,
  abi: chromaticMarketFactoryABI
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChromaticVault
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const chromaticVaultABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factory', internalType: 'contract IChromaticMarketFactory', type: 'address' },
      {
        name: '_earningDistributor',
        internalType: 'contract IVaultEarningDistributor',
        type: 'address'
      }
    ]
  },
  { type: 'error', inputs: [], name: 'NotEnoughBalance' },
  { type: 'error', inputs: [], name: 'NotEnoughFeePaid' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByEarningDistributor' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByFactoryOrDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByMarket' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'paid', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'paidToTakerPool', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'paidToMakerPool', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'FlashLoan'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'earning', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'MakerEarningDistributed'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'earning', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MarketEarningAccumulated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'earning', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'marketBalance', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'MarketEarningDistributed'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'OnAddLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'settlementAmount', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OnClaimPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'tradingFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'protocolFee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OnOpenPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'pendingDeposit', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'pendingWithdrawal', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'OnSettlePendingLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'recipient', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OnWithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'TransferKeeperFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'fee', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'TransferKeeperFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'market', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'TransferProtocolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vaultEarningDistributor', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'oldVaultEarningDistributor',
        internalType: 'address',
        type: 'address',
        indexed: true
      }
    ],
    name: 'VaultEarningDistributorSet'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'cancelMakerEarningDistributionTask',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'cancelMarketEarningDistributionTask',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'createMakerEarningDistributionTask',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'createMarketEarningDistributionTask',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' }
    ],
    name: 'distributeMakerEarning',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' }
    ],
    name: 'distributeMarketEarning',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'earningDistributor',
    outputs: [{ name: '', internalType: 'contract IVaultEarningDistributor', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'contract IChromaticMarketFactory', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'flashLoan',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'binBalance', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'getPendingBinShare',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'makerBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'makerMarketBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'oldEarningDistributor',
        internalType: 'contract IVaultEarningDistributor',
        type: 'address'
      }
    ],
    name: 'migrateEarningDistributionTasks',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'onAddLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'settlementAmount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'onClaimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'tradingFee', internalType: 'uint256', type: 'uint256' },
      { name: 'protocolFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'onOpenPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'pendingDeposit', internalType: 'uint256', type: 'uint256' },
      { name: 'pendingWithdrawal', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'onSettlePendingLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'onWithdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingMakerEarnings',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingMarketEarnings',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'pendingWithdrawals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_earningDistributor', internalType: 'address', type: 'address' }],
    name: 'setVaultEarningDistributor',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'takerBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'takerMarketBalances',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'keeper', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
      { name: 'margin', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferKeeperFee',
    outputs: [{ name: 'usedFee', internalType: 'uint256', type: 'uint256' }]
  }
] as const

/**
 *
 */
export const chromaticVaultAddress = {
  31337: '0x162A433068F51e18b7d13932F27e66a3f99E6890',
  421614: '0xad146179F3c58053eAcE57C9fae334128cBA347F'
} as const

/**
 *
 */
export const chromaticVaultConfig = {
  address: chromaticVaultAddress,
  abi: chromaticVaultABI
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestSettlementToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testSettlementTokenABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
      { name: 'faucetAmount_', internalType: 'uint256', type: 'uint256' },
      { name: 'faucetMinInterval_', internalType: 'uint256', type: 'uint256' }
    ]
  },
  { type: 'error', inputs: [], name: 'AlreadyFaucetedInInterval' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'OwnershipTransferred'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'faucet', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'faucetAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'faucetMinInterval',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lastFaucetTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'mint',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'faucetAmount_', internalType: 'uint256', type: 'uint256' }],
    name: 'setFaucetAmount',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'faucetMinInterval_', internalType: 'uint256', type: 'uint256' }],
    name: 'setFaucetMinInterval',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'name_', internalType: 'string', type: 'string' }],
    name: 'setName',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'symbol_', internalType: 'string', type: 'string' }],
    name: 'setSymbol',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChromaticAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const chromaticAccountABI = [
  { type: 'error', inputs: [], name: 'AlreadyInitialized' },
  { type: 'error', inputs: [], name: 'NotEnoughBalance' },
  { type: 'error', inputs: [], name: 'NotExistPosition' },
  { type: 'error', inputs: [], name: 'NotMarket' },
  { type: 'error', inputs: [], name: 'NotOwner' },
  { type: 'error', inputs: [], name: 'NotRouter' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'entryPrice', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'exitPrice', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'realizedPnl', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'cause', internalType: 'bytes4', type: 'bytes4', indexed: false }
    ],
    name: 'ClaimPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'closeVersion', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'ClosePosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'openVersion', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'qty', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'openTimestamp', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'makerMargin', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'tradingFee', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OpenPosition'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'balance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      },
      {
        name: 'claimInfo',
        internalType: 'struct ClaimPositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'entryPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'exitPrice', internalType: 'uint256', type: 'uint256' },
          { name: 'realizedPnl', internalType: 'int256', type: 'int256' },
          { name: 'interest', internalType: 'uint256', type: 'uint256' },
          { name: 'cause', internalType: 'bytes4', type: 'bytes4' }
        ]
      },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimPositionCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'closePosition',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'getPositionIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'hasPositionId',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owner', internalType: 'address', type: 'address' },
      { name: '_router', internalType: 'address', type: 'address' },
      { name: '_marketFactory', internalType: 'address', type: 'address' }
    ],
    name: 'initialize',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address' },
      { name: 'qty', internalType: 'int256', type: 'int256' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'maxAllowableTradingFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'openPosition',
    outputs: [
      {
        name: 'position',
        internalType: 'struct OpenPositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFee', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'marginRequired', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'openPositionCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'withdraw',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChromaticLens
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const chromaticLensABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_router', internalType: 'contract IChromaticRouter', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: '_oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct ClaimableLiquidity',
        type: 'tuple',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: '_oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct ClaimableLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' }
    ],
    name: 'clbBalanceOf',
    outputs: [
      {
        name: '',
        internalType: 'struct ChromaticLens.CLBBalance[]',
        type: 'tuple[]',
        components: [
          { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
          { name: 'balance', internalType: 'uint256', type: 'uint256' },
          { name: 'totalSupply', internalType: 'uint256', type: 'uint256' },
          { name: 'binValue', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'contract IChromaticMarket', type: 'address' }],
    name: 'liquidityBinStatuses',
    outputs: [
      {
        name: '',
        internalType: 'struct LiquidityBinStatus[]',
        type: 'tuple[]',
        components: [
          { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'freeLiquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'binValue', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' }
    ],
    name: 'lpReceipts',
    outputs: [
      {
        name: 'result',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'version', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'oracleVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
    ],
    name: 'pendingLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingLiquidity',
        type: 'tuple',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'contract IChromaticMarket', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }
    ],
    name: 'pendingLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  }
] as const

/**
 *
 */
export const chromaticLensAddress = {
  31337: '0x4C4a2f8c81640e47606d3fd77B353E87Ba015584',
  421614: '0xDB8b1FC60b45D8ae25b78531717DE71B6BECe728'
} as const

/**
 *
 */
export const chromaticLensConfig = { address: chromaticLensAddress, abi: chromaticLensABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChromaticRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const chromaticRouterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_marketFactory', internalType: 'address', type: 'address' }]
  },
  { type: 'error', inputs: [], name: 'NotMarket' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'owner', internalType: 'address', type: 'address', indexed: true }
    ],
    name: 'AccountCreated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'marketAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'trader', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'tradingFee', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'tradingFeeUSD', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'OpenPosition'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'accountBase',
    outputs: [{ name: '', internalType: 'contract ChromaticAccount', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'feeRate', internalType: 'int16', type: 'int16' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' }
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'feeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'addLiquidityBatch',
    outputs: [
      {
        name: 'lpReceipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidityBatchCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'settlementToken', internalType: 'address', type: 'address' },
      { name: 'vault', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidityCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: '_receiptIds', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'claimLiquidityBatch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'int16[]', type: 'int16[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidityBatchCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int16', type: 'int16' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidityCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'positionId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'closePosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'owner', internalType: 'address', type: 'address' }
    ],
    name: 'getLpReceiptIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'market', internalType: 'address', type: 'address' }],
    name: 'getLpReceiptIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'qty', internalType: 'int256', type: 'int256' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'maxAllowableTradingFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'openPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct OpenPositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFee', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'feeRate', internalType: 'int16', type: 'int16' },
      { name: 'clbTokenAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' }
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'feeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'clbTokenAmounts', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'removeLiquidityBatch',
    outputs: [
      {
        name: 'lpReceipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'clbToken', internalType: 'address', type: 'address' },
      { name: 'clbTokenIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidityBatchCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'clbToken', internalType: 'address', type: 'address' },
      { name: 'clbTokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidityCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'withdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'market', internalType: 'address', type: 'address' },
      { name: '_receiptIds', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'withdrawLiquidityBatch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'int16[]', type: 'int16[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidityBatchCallback',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'int16', type: 'int16' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidityCallback',
    outputs: []
  }
] as const

/**
 *
 */
export const chromaticRouterAddress = {
  31337: '0x04C89607413713Ec9775E14b954286519d836FEf',
  421614: '0xA52A0277295363C73A252052abFF2A171cD0a006'
} as const

/**
 *
 */
export const chromaticRouterConfig = {
  address: chromaticRouterAddress,
  abi: chromaticRouterABI
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IChromaticMarket
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iChromaticMarketABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'AddLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'AddLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'clbTokenAmount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'ClaimLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'clbTokenAmounts', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'ClaimLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClaimPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClaimPositionByKeeper'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClosePosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'displayModeOld', internalType: 'enum DisplayMode', type: 'uint8', indexed: false },
      { name: 'displayModeNew', internalType: 'enum DisplayMode', type: 'uint8', indexed: false }
    ],
    name: 'DisplayModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'Liquidate'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'liquidityModeOld',
        internalType: 'enum LiquidityMode',
        type: 'uint8',
        indexed: false
      },
      {
        name: 'liquidityModeNew',
        internalType: 'enum LiquidityMode',
        type: 'uint8',
        indexed: false
      }
    ],
    name: 'LiquidityModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'OpenPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'positionModeOld', internalType: 'enum PositionMode', type: 'uint8', indexed: false },
      { name: 'positionModeNew', internalType: 'enum PositionMode', type: 'uint8', indexed: false }
    ],
    name: 'PositionModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'protocolFeeRateOld', internalType: 'uint16', type: 'uint16', indexed: false },
      { name: 'protocolFeeRateNew', internalType: 'uint16', type: 'uint16', indexed: false }
    ],
    name: 'ProtocolFeeRateUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'RemoveLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'RemoveLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'TransferProtocolFee'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'burnedCLBTokenAmount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      {
        name: 'burnedCLBTokenAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'WithdrawLiquidityBatch'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'checkClaimPosition',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'oracleVersion',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ],
    name: 'checkLiquidationWithOracleVersion',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidityBatch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
      { name: 'keeperFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct ClaimableLiquidity',
        type: 'tuple',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct ClaimableLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clbToken',
    outputs: [{ name: '', internalType: 'contract ICLBToken', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'closePosition',
    outputs: [
      {
        name: '',
        internalType: 'struct ClosePositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'closingPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct ClosingPosition',
        type: 'tuple',
        components: [
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalEntryAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'closingPositionBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct ClosingPosition[]',
        type: 'tuple[]',
        components: [
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalEntryAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'displayMode',
    outputs: [{ name: '', internalType: 'enum DisplayMode', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'earning', internalType: 'uint256', type: 'uint256' },
      { name: 'marketBalance', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'distributeEarningToBins',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'contract IChromaticMarketFactory', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'getBinFreeLiquidity',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'getBinLiquidity',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'getBinValues',
    outputs: [{ name: 'values', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiptId', internalType: 'uint256', type: 'uint256' }],
    name: 'getLpReceipt',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'getLpReceipts',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'getPositions',
    outputs: [
      {
        name: 'positions',
        internalType: 'struct Position[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
      { name: 'keeperFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'liquidate',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBinStatuses',
    outputs: [
      {
        name: '',
        internalType: 'struct LiquidityBinStatus[]',
        type: 'tuple[]',
        components: [
          { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'freeLiquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'binValue', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityMode',
    outputs: [{ name: '', internalType: 'enum LiquidityMode', type: 'uint8' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'qty', internalType: 'int256', type: 'int256' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'maxAllowableTradingFee', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'openPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct OpenPositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFee', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleProvider',
    outputs: [{ name: '', internalType: 'contract IOracleProvider', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'pendingLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingLiquidity',
        type: 'tuple',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'pendingLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'pendingPosition',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingPosition',
        type: 'tuple',
        components: [
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'pendingPositionBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct PendingPosition[]',
        type: 'tuple[]',
        components: [
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'positionMode',
    outputs: [{ name: '', internalType: 'enum PositionMode', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolFeeRate',
    outputs: [{ name: '', internalType: 'uint16', type: 'uint16' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'clbTokenAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidityBatch',
    outputs: [
      {
        name: '',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'feeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'settle',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'settleAll', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settlementToken',
    outputs: [{ name: '', internalType: 'contract IERC20Metadata', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_displayMode', internalType: 'enum DisplayMode', type: 'uint8' }],
    name: 'updateDisplayMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_liquidityMode', internalType: 'enum LiquidityMode', type: 'uint8' }],
    name: 'updateLiquidityMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_positionMode', internalType: 'enum PositionMode', type: 'uint8' }],
    name: 'updatePositionMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' }],
    name: 'updateProtocolFeeRate',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '', internalType: 'contract IChromaticVault', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidityBatch',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOracleProvider
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOracleProviderABI = [
  { type: 'error', inputs: [], name: 'InvalidOracleRound' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'version', internalType: 'uint256', type: 'uint256' }],
    name: 'atVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'currentVersion',
    outputs: [
      {
        name: '',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleProviderName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'sync',
    outputs: [
      {
        name: '',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false }
    ],
    name: 'ApprovalForAll'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'TransferBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'TransferSingle'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'URI'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' }
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' }
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeBatchTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'safeTransferFrom',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' }
    ],
    name: 'setApprovalForAll',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketDiamondCutFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketDiamondCutFacetABI = [
  {
    type: 'error',
    inputs: [
      { name: '_initializationContractAddress', internalType: 'address', type: 'address' },
      { name: '_calldata', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'InitializationFunctionReverted'
  },
  { type: 'error', inputs: [], name: 'OnlyAccessableByFactoryOrDao' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_diamondCut',
        internalType: 'struct IDiamondCut.FacetCut[]',
        type: 'tuple[]',
        components: [
          { name: 'facetAddress', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum IDiamondCut.FacetCutAction', type: 'uint8' },
          { name: 'functionSelectors', internalType: 'bytes4[]', type: 'bytes4[]' }
        ],
        indexed: false
      },
      { name: '_init', internalType: 'address', type: 'address', indexed: false },
      { name: '_calldata', internalType: 'bytes', type: 'bytes', indexed: false }
    ],
    name: 'DiamondCut'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_cut',
        internalType: 'struct IDiamondCut.FacetCut[]',
        type: 'tuple[]',
        components: [
          { name: 'facetAddress', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum IDiamondCut.FacetCutAction', type: 'uint8' },
          { name: 'functionSelectors', internalType: 'bytes4[]', type: 'bytes4[]' }
        ]
      },
      { name: '_init', internalType: 'address', type: 'address' },
      { name: '_calldata', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'diamondCut',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketFacetBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketFacetBaseABI = [
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketLensFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketLensFacetABI = [
  { type: 'error', inputs: [], name: 'ClaimPositionCallbackError' },
  { type: 'error', inputs: [], name: 'NotExistLpReceipt' },
  { type: 'error', inputs: [], name: 'NotExistPosition' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidity',
    outputs: [
      {
        name: 'liquidity',
        internalType: 'struct ClaimableLiquidity',
        type: 'tuple',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimableLiquidityBatch',
    outputs: [
      {
        name: 'liquidities',
        internalType: 'struct ClaimableLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'burningTokenAmount', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'closingPosition',
    outputs: [
      {
        name: 'position',
        internalType: 'struct ClosingPosition',
        type: 'tuple',
        components: [
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalEntryAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'closingPositionBatch',
    outputs: [
      {
        name: 'positions',
        internalType: 'struct ClosingPosition[]',
        type: 'tuple[]',
        components: [
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalEntryAmount', internalType: 'uint256', type: 'uint256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'getBinFreeLiquidity',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'getBinLiquidity',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'getBinValues',
    outputs: [{ name: 'values', internalType: 'uint256[]', type: 'uint256[]' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiptId', internalType: 'uint256', type: 'uint256' }],
    name: 'getLpReceipt',
    outputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'getLpReceipts',
    outputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getPosition',
    outputs: [
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionIds', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'getPositions',
    outputs: [
      {
        name: 'positions',
        internalType: 'struct Position[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityBinStatuses',
    outputs: [
      {
        name: 'statuses',
        internalType: 'struct LiquidityBinStatus[]',
        type: 'tuple[]',
        components: [
          { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'freeLiquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'binValue', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'pendingLiquidity',
    outputs: [
      {
        name: 'liquidity',
        internalType: 'struct PendingLiquidity',
        type: 'tuple',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'pendingLiquidityBatch',
    outputs: [
      {
        name: 'liquidities',
        internalType: 'struct PendingLiquidity[]',
        type: 'tuple[]',
        components: [
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'mintingTokenAmountRequested', internalType: 'uint256', type: 'uint256' },
          { name: 'burningCLBTokenAmountRequested', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }],
    name: 'pendingPosition',
    outputs: [
      {
        name: 'position',
        internalType: 'struct PendingPosition',
        type: 'tuple',
        components: [
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'pendingPositionBatch',
    outputs: [
      {
        name: 'positions',
        internalType: 'struct PendingPosition[]',
        type: 'tuple[]',
        components: [
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'totalQty', internalType: 'int256', type: 'int256' },
          { name: 'totalMakerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'totalTakerMargin', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketLiquidateFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketLiquidateFacetABI = [
  { type: 'error', inputs: [], name: 'AlreadyClosedPosition' },
  { type: 'error', inputs: [], name: 'ClaimPositionCallbackError' },
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'NotClaimablePosition' },
  { type: 'error', inputs: [], name: 'NotExistPosition' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClaimPositionByKeeper'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'usedKeeperFee', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'Liquidate'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'checkClaimPosition',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'checkLiquidation',
    outputs: [{ name: '_liquidate', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      {
        name: 'oracleVersion',
        internalType: 'struct IOracleProvider.OracleVersion',
        type: 'tuple',
        components: [
          { name: 'version', internalType: 'uint256', type: 'uint256' },
          { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'price', internalType: 'int256', type: 'int256' }
        ]
      }
    ],
    name: 'checkLiquidationWithOracleVersion',
    outputs: [{ name: '_liquidate', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
      { name: 'keeperFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'keeper', internalType: 'address', type: 'address' },
      { name: 'keeperFee', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'liquidate',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketLiquidityFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketLiquidityFacetABI = [
  { type: 'error', inputs: [], name: 'AddLiquidityDisabled' },
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'InvalidLpReceiptAction' },
  { type: 'error', inputs: [], name: 'InvalidTransferredTokenAmount' },
  { type: 'error', inputs: [], name: 'NotClaimableLpReceipt' },
  { type: 'error', inputs: [], name: 'NotExistLpReceipt' },
  { type: 'error', inputs: [], name: 'NotWithdrawableLpReceipt' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
  { type: 'error', inputs: [], name: 'RemoveLiquidityDisabled' },
  { type: 'error', inputs: [], name: 'TooSmallAmount' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'AddLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'AddLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'clbTokenAmount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'ClaimLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'clbTokenAmounts', internalType: 'uint256[]', type: 'uint256[]', indexed: false }
    ],
    name: 'ClaimLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'RemoveLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      }
    ],
    name: 'RemoveLiquidityBatch'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'burnedCLBTokenAmount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'WithdrawLiquidity'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ],
        indexed: false
      },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      {
        name: 'burnedCLBTokenAmounts',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false
      }
    ],
    name: 'WithdrawLiquidityBatch'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidity',
    outputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'addLiquidityBatch',
    outputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimLiquidityBatch',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'earning', internalType: 'uint256', type: 'uint256' },
      { name: 'marketBalance', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'distributeEarningToBins',
    outputs: []
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidity',
    outputs: [
      {
        name: 'receipt',
        internalType: 'struct LpReceipt',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tradingFeeRates', internalType: 'int16[]', type: 'int16[]' },
      { name: 'clbTokenAmounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'removeLiquidityBatch',
    outputs: [
      {
        name: 'receipts',
        internalType: 'struct LpReceipt[]',
        type: 'tuple[]',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'oracleVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'amount', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'action', internalType: 'enum LpAction', type: 'uint8' },
          { name: 'tradingFeeRate', internalType: 'int16', type: 'int16' }
        ]
      }
    ]
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'interfaceID', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidity',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'receiptIds', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'withdrawLiquidityBatch',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketLiquidityFacetBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketLiquidityFacetBaseABI = [
  { type: 'error', inputs: [], name: 'NotExistLpReceipt' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketSettleFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketSettleFacetABI = [
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'feeRates', internalType: 'int16[]', type: 'int16[]' }],
    name: 'settle',
    outputs: []
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'settleAll', outputs: [] }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketStateFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketStateFacetABI = [
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'displayModeOld', internalType: 'enum DisplayMode', type: 'uint8', indexed: false },
      { name: 'displayModeNew', internalType: 'enum DisplayMode', type: 'uint8', indexed: false }
    ],
    name: 'DisplayModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'liquidityModeOld',
        internalType: 'enum LiquidityMode',
        type: 'uint8',
        indexed: false
      },
      {
        name: 'liquidityModeNew',
        internalType: 'enum LiquidityMode',
        type: 'uint8',
        indexed: false
      }
    ],
    name: 'LiquidityModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'positionModeOld', internalType: 'enum PositionMode', type: 'uint8', indexed: false },
      { name: 'positionModeNew', internalType: 'enum PositionMode', type: 'uint8', indexed: false }
    ],
    name: 'PositionModeUpdated'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'protocolFeeRateOld', internalType: 'uint16', type: 'uint16', indexed: false },
      { name: 'protocolFeeRateNew', internalType: 'uint16', type: 'uint16', indexed: false }
    ],
    name: 'ProtocolFeeRateUpdated'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'clbToken',
    outputs: [{ name: '_token', internalType: 'contract ICLBToken', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'displayMode',
    outputs: [{ name: '_displayMode', internalType: 'enum DisplayMode', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [
      { name: '_factory', internalType: 'contract IChromaticMarketFactory', type: 'address' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityMode',
    outputs: [{ name: '_liquidityMode', internalType: 'enum LiquidityMode', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'oracleProvider',
    outputs: [{ name: '_provider', internalType: 'contract IOracleProvider', type: 'address' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'positionMode',
    outputs: [{ name: '_positionMode', internalType: 'enum PositionMode', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolFeeRate',
    outputs: [{ name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'settlementToken',
    outputs: [{ name: '_token', internalType: 'contract IERC20Metadata', type: 'address' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_displayMode', internalType: 'enum DisplayMode', type: 'uint8' }],
    name: 'updateDisplayMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_liquidityMode', internalType: 'enum LiquidityMode', type: 'uint8' }],
    name: 'updateLiquidityMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_positionMode', internalType: 'enum PositionMode', type: 'uint8' }],
    name: 'updatePositionMode',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' }],
    name: 'updateProtocolFeeRate',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vault',
    outputs: [{ name: '_vault', internalType: 'contract IChromaticVault', type: 'address' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketTradeFacet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketTradeFacetABI = [
  { type: 'error', inputs: [], name: 'AlreadyClosedPosition' },
  { type: 'error', inputs: [], name: 'ClaimPositionCallbackError' },
  { type: 'error', inputs: [], name: 'ClosePositionDisabled' },
  { type: 'error', inputs: [], name: 'Empty' },
  { type: 'error', inputs: [], name: 'ExceedMaxAllowableLeverage' },
  { type: 'error', inputs: [], name: 'ExceedMaxAllowableTradingFee' },
  { type: 'error', inputs: [], name: 'NotAllowableMakerMargin' },
  { type: 'error', inputs: [], name: 'NotClaimablePosition' },
  { type: 'error', inputs: [], name: 'NotEnoughMarginTransferred' },
  { type: 'error', inputs: [], name: 'NotExistPosition' },
  { type: 'error', inputs: [], name: 'NotPermitted' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' },
  { type: 'error', inputs: [], name: 'OpenPositionDisabled' },
  { type: 'error', inputs: [], name: 'OutOfBounds' },
  { type: 'error', inputs: [], name: 'TooSmallTakerMargin' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'pnl', internalType: 'int256', type: 'int256', indexed: true },
      { name: 'interest', internalType: 'uint256', type: 'uint256', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClaimPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'ClosePosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'position',
        internalType: 'struct Position',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'owner', internalType: 'address', type: 'address' },
          { name: 'liquidator', internalType: 'address', type: 'address' },
          { name: '_protocolFeeRate', internalType: 'uint16', type: 'uint16' },
          {
            name: '_binMargins',
            internalType: 'struct BinMargin[]',
            type: 'tuple[]',
            components: [
              { name: 'tradingFeeRate', internalType: 'uint16', type: 'uint16' },
              { name: 'amount', internalType: 'uint256', type: 'uint256' }
            ]
          }
        ],
        indexed: false
      }
    ],
    name: 'OpenPosition'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: true }
    ],
    name: 'TransferProtocolFee'
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'positionId', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'claimPosition',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'positionId', internalType: 'uint256', type: 'uint256' }],
    name: 'closePosition',
    outputs: [
      {
        name: 'closed',
        internalType: 'struct ClosePositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'closeVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'closeTimestamp', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'qty', internalType: 'int256', type: 'int256' },
      { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
      { name: 'maxAllowableTradingFee', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' }
    ],
    name: 'openPosition',
    outputs: [
      {
        name: 'positionInfo',
        internalType: 'struct OpenPositionInfo',
        type: 'tuple',
        components: [
          { name: 'id', internalType: 'uint256', type: 'uint256' },
          { name: 'openVersion', internalType: 'uint256', type: 'uint256' },
          { name: 'qty', internalType: 'int256', type: 'int256' },
          { name: 'openTimestamp', internalType: 'uint256', type: 'uint256' },
          { name: 'takerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'makerMargin', internalType: 'uint256', type: 'uint256' },
          { name: 'tradingFee', internalType: 'uint256', type: 'uint256' }
        ]
      }
    ]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketTradeFacetBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketTradeFacetBaseABI = [
  { type: 'error', inputs: [], name: 'ClaimPositionCallbackError' },
  { type: 'error', inputs: [], name: 'NotExistPosition' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByDao' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByLiquidator' },
  { type: 'error', inputs: [], name: 'OnlyAccessableByVault' }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOracleProviderRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOracleProviderRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'properties',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ],
        indexed: false
      }
    ],
    name: 'OracleProviderRegistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true }],
    name: 'OracleProviderUnregistered'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'level', internalType: 'uint8', type: 'uint8', indexed: true }
    ],
    name: 'UpdateLeverageLevel'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address', indexed: true },
      { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32', indexed: true },
      { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32', indexed: true }
    ],
    name: 'UpdateTakeProfitBPSRange'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'getOracleProviderProperties',
    outputs: [
      {
        name: '',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ]
      }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'isRegisteredOracleProvider',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      {
        name: 'properties',
        internalType: 'struct OracleProviderProperties',
        type: 'tuple',
        components: [
          { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
          { name: 'leverageLevel', internalType: 'uint8', type: 'uint8' }
        ]
      }
    ],
    name: 'registerOracleProvider',
    outputs: []
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registeredOracleProviders',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'oracleProvider', internalType: 'address', type: 'address' }],
    name: 'unregisterOracleProvider',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'level', internalType: 'uint8', type: 'uint8' }
    ],
    name: 'updateLeverageLevel',
    outputs: []
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'oracleProvider', internalType: 'address', type: 'address' },
      { name: 'minTakeProfitBPS', internalType: 'uint32', type: 'uint32' },
      { name: 'maxTakeProfitBPS', internalType: 'uint32', type: 'uint32' }
    ],
    name: 'updateTakeProfitBPSRange',
    outputs: []
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AggregatorV3Interface
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const aggregatorV3InterfaceABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'description',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_roundId', internalType: 'uint80', type: 'uint80' }],
    name: 'getRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'latestRoundData',
    outputs: [
      { name: 'roundId', internalType: 'uint80', type: 'uint80' },
      { name: 'answer', internalType: 'int256', type: 'int256' },
      { name: 'startedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'updatedAt', internalType: 'uint256', type: 'uint256' },
      { name: 'answeredInRound', internalType: 'uint80', type: 'uint80' }
    ]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  }
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Approval'
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }
    ],
    name: 'Transfer'
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' }
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }]
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' }
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }]
  }
] as const
