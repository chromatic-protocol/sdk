/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace InterestRate {
  export type RecordStruct = {
    annualRateBPS: PromiseOrValue<BigNumberish>;
    beginTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type RecordStructOutput = [BigNumber, BigNumber] & {
    annualRateBPS: BigNumber;
    beginTimestamp: BigNumber;
  };
}

export interface ChromaticMarketFactoryInterface extends utils.Interface {
  functions: {
    "appendInterestRateRecord(address,uint256,uint256)": FunctionFragment;
    "calculateInterest(address,uint256,uint256,uint256)": FunctionFragment;
    "cancelMakerEarningDistributionTask(address)": FunctionFragment;
    "cancelMarketEarningDistributionTask(address)": FunctionFragment;
    "createMakerEarningDistributionTask(address)": FunctionFragment;
    "createMarket(address,address)": FunctionFragment;
    "createMarketEarningDistributionTask(address)": FunctionFragment;
    "currentInterestRate(address)": FunctionFragment;
    "dao()": FunctionFragment;
    "getEarningDistributionThreshold(address)": FunctionFragment;
    "getFlashLoanFeeRate(address)": FunctionFragment;
    "getInterestRateRecords(address)": FunctionFragment;
    "getMarket(address,address)": FunctionFragment;
    "getMarkets()": FunctionFragment;
    "getMarketsBySettlmentToken(address)": FunctionFragment;
    "getMinimumTakerMargin(address)": FunctionFragment;
    "getUniswapFeeTier(address)": FunctionFragment;
    "isRegisteredMarket(address)": FunctionFragment;
    "isRegisteredOracleProvider(address)": FunctionFragment;
    "isRegisteredSettlementToken(address)": FunctionFragment;
    "keeperFeePayer()": FunctionFragment;
    "liquidator()": FunctionFragment;
    "parameters()": FunctionFragment;
    "registerOracleProvider(address)": FunctionFragment;
    "registerSettlementToken(address,uint256,uint256,uint256,uint256,uint24)": FunctionFragment;
    "registeredOracleProviders()": FunctionFragment;
    "registeredSettlementTokens()": FunctionFragment;
    "removeLastInterestRateRecord(address)": FunctionFragment;
    "setEarningDistributionThreshold(address,uint256)": FunctionFragment;
    "setFlashLoanFeeRate(address,uint256)": FunctionFragment;
    "setKeeperFeePayer(address)": FunctionFragment;
    "setLiquidator(address)": FunctionFragment;
    "setMinimumTakerMargin(address,uint256)": FunctionFragment;
    "setUniswapFeeTier(address,uint24)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "unregisterOracleProvider(address)": FunctionFragment;
    "updateDao(address)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "appendInterestRateRecord"
      | "calculateInterest"
      | "cancelMakerEarningDistributionTask"
      | "cancelMarketEarningDistributionTask"
      | "createMakerEarningDistributionTask"
      | "createMarket"
      | "createMarketEarningDistributionTask"
      | "currentInterestRate"
      | "dao"
      | "getEarningDistributionThreshold"
      | "getFlashLoanFeeRate"
      | "getInterestRateRecords"
      | "getMarket"
      | "getMarkets"
      | "getMarketsBySettlmentToken"
      | "getMinimumTakerMargin"
      | "getUniswapFeeTier"
      | "isRegisteredMarket"
      | "isRegisteredOracleProvider"
      | "isRegisteredSettlementToken"
      | "keeperFeePayer"
      | "liquidator"
      | "parameters"
      | "registerOracleProvider"
      | "registerSettlementToken"
      | "registeredOracleProviders"
      | "registeredSettlementTokens"
      | "removeLastInterestRateRecord"
      | "setEarningDistributionThreshold"
      | "setFlashLoanFeeRate"
      | "setKeeperFeePayer"
      | "setLiquidator"
      | "setMinimumTakerMargin"
      | "setUniswapFeeTier"
      | "setVault"
      | "treasury"
      | "unregisterOracleProvider"
      | "updateDao"
      | "updateTreasury"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "appendInterestRateRecord",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMakerEarningDistributionTask",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelMarketEarningDistributionTask",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMakerEarningDistributionTask",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketEarningDistributionTask",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentInterestRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEarningDistributionThreshold",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFeeRate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getInterestRateRecords",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketsBySettlmentToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumTakerMargin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniswapFeeTier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegisteredSettlementToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "keeperFeePayer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSettlementToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredOracleProviders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredSettlementTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLastInterestRateRecord",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEarningDistributionThreshold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFeeRate",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeperFeePayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimumTakerMargin",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUniswapFeeTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterOracleProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDao",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "appendInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMakerEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelMarketEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMakerEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketEarningDistributionTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInterestRateRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketsBySettlmentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumTakerMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegisteredSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "parameters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredOracleProviders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredSettlementTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLastInterestRateRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEarningDistributionThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKeeperFeePayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimumTakerMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUniswapFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterOracleProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateDao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "InterestRateRecordAppended(address,uint256,uint256)": EventFragment;
    "LastInterestRateRecordRemoved(address,uint256,uint256)": EventFragment;
    "MarketCreated(address,address,address)": EventFragment;
    "OracleProviderRegistered(address)": EventFragment;
    "OracleProviderUnregistered(address)": EventFragment;
    "SetEarningDistributionThreshold(address,uint256)": EventFragment;
    "SetFlashLoanFeeRate(address,uint256)": EventFragment;
    "SetKeeperFeePayer(address)": EventFragment;
    "SetLiquidator(address)": EventFragment;
    "SetMinimumTakerMargin(address,uint256)": EventFragment;
    "SetUniswapFeeTier(address,uint24)": EventFragment;
    "SetVault(address)": EventFragment;
    "SettlementTokenRegistered(address,uint256,uint256,uint256,uint256,uint24)": EventFragment;
    "UpdateDao(address)": EventFragment;
    "UpdateTreasury(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InterestRateRecordAppended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LastInterestRateRecordRemoved"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleProviderRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OracleProviderUnregistered"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetEarningDistributionThreshold"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFlashLoanFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetKeeperFeePayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinimumTakerMargin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUniswapFeeTier"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SettlementTokenRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDao"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateTreasury"): EventFragment;
}

export interface InterestRateRecordAppendedEventObject {
  token: string;
  annualRateBPS: BigNumber;
  beginTimestamp: BigNumber;
}
export type InterestRateRecordAppendedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  InterestRateRecordAppendedEventObject
>;

export type InterestRateRecordAppendedEventFilter =
  TypedEventFilter<InterestRateRecordAppendedEvent>;

export interface LastInterestRateRecordRemovedEventObject {
  token: string;
  annualRateBPS: BigNumber;
  beginTimestamp: BigNumber;
}
export type LastInterestRateRecordRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LastInterestRateRecordRemovedEventObject
>;

export type LastInterestRateRecordRemovedEventFilter =
  TypedEventFilter<LastInterestRateRecordRemovedEvent>;

export interface MarketCreatedEventObject {
  oracleProvider: string;
  settlementToken: string;
  market: string;
}
export type MarketCreatedEvent = TypedEvent<
  [string, string, string],
  MarketCreatedEventObject
>;

export type MarketCreatedEventFilter = TypedEventFilter<MarketCreatedEvent>;

export interface OracleProviderRegisteredEventObject {
  oracleProvider: string;
}
export type OracleProviderRegisteredEvent = TypedEvent<
  [string],
  OracleProviderRegisteredEventObject
>;

export type OracleProviderRegisteredEventFilter =
  TypedEventFilter<OracleProviderRegisteredEvent>;

export interface OracleProviderUnregisteredEventObject {
  oracleProvider: string;
}
export type OracleProviderUnregisteredEvent = TypedEvent<
  [string],
  OracleProviderUnregisteredEventObject
>;

export type OracleProviderUnregisteredEventFilter =
  TypedEventFilter<OracleProviderUnregisteredEvent>;

export interface SetEarningDistributionThresholdEventObject {
  token: string;
  earningDistributionThreshold: BigNumber;
}
export type SetEarningDistributionThresholdEvent = TypedEvent<
  [string, BigNumber],
  SetEarningDistributionThresholdEventObject
>;

export type SetEarningDistributionThresholdEventFilter =
  TypedEventFilter<SetEarningDistributionThresholdEvent>;

export interface SetFlashLoanFeeRateEventObject {
  token: string;
  flashLoanFeeRate: BigNumber;
}
export type SetFlashLoanFeeRateEvent = TypedEvent<
  [string, BigNumber],
  SetFlashLoanFeeRateEventObject
>;

export type SetFlashLoanFeeRateEventFilter =
  TypedEventFilter<SetFlashLoanFeeRateEvent>;

export interface SetKeeperFeePayerEventObject {
  keeperFeePayer: string;
}
export type SetKeeperFeePayerEvent = TypedEvent<
  [string],
  SetKeeperFeePayerEventObject
>;

export type SetKeeperFeePayerEventFilter =
  TypedEventFilter<SetKeeperFeePayerEvent>;

export interface SetLiquidatorEventObject {
  liquidator: string;
}
export type SetLiquidatorEvent = TypedEvent<[string], SetLiquidatorEventObject>;

export type SetLiquidatorEventFilter = TypedEventFilter<SetLiquidatorEvent>;

export interface SetMinimumTakerMarginEventObject {
  token: string;
  minimumTakerMargin: BigNumber;
}
export type SetMinimumTakerMarginEvent = TypedEvent<
  [string, BigNumber],
  SetMinimumTakerMarginEventObject
>;

export type SetMinimumTakerMarginEventFilter =
  TypedEventFilter<SetMinimumTakerMarginEvent>;

export interface SetUniswapFeeTierEventObject {
  token: string;
  uniswapFeeTier: number;
}
export type SetUniswapFeeTierEvent = TypedEvent<
  [string, number],
  SetUniswapFeeTierEventObject
>;

export type SetUniswapFeeTierEventFilter =
  TypedEventFilter<SetUniswapFeeTierEvent>;

export interface SetVaultEventObject {
  vault: string;
}
export type SetVaultEvent = TypedEvent<[string], SetVaultEventObject>;

export type SetVaultEventFilter = TypedEventFilter<SetVaultEvent>;

export interface SettlementTokenRegisteredEventObject {
  token: string;
  minimumTakerMargin: BigNumber;
  interestRate: BigNumber;
  flashLoanFeeRate: BigNumber;
  earningDistributionThreshold: BigNumber;
  uniswapFeeTier: number;
}
export type SettlementTokenRegisteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, number],
  SettlementTokenRegisteredEventObject
>;

export type SettlementTokenRegisteredEventFilter =
  TypedEventFilter<SettlementTokenRegisteredEvent>;

export interface UpdateDaoEventObject {
  dao: string;
}
export type UpdateDaoEvent = TypedEvent<[string], UpdateDaoEventObject>;

export type UpdateDaoEventFilter = TypedEventFilter<UpdateDaoEvent>;

export interface UpdateTreasuryEventObject {
  treasury: string;
}
export type UpdateTreasuryEvent = TypedEvent<
  [string],
  UpdateTreasuryEventObject
>;

export type UpdateTreasuryEventFilter = TypedEventFilter<UpdateTreasuryEvent>;

export interface ChromaticMarketFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChromaticMarketFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { annualRateBPS: BigNumber }>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[InterestRate.RecordStructOutput[]]>;

    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getMinimumTakerMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeperFeePayer(overrides?: CallOverrides): Promise<[string]>;

    liquidator(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { oracleProvider: string; settlementToken: string }
    >;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredOracleProviders(overrides?: CallOverrides): Promise<[string[]]>;

    registeredSettlementTokens(overrides?: CallOverrides): Promise<[string[]]>;

    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinimumTakerMargin(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * @param _dao new DAO address to set
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  appendInterestRateRecord(
    token: PromiseOrValue<string>,
    annualRateBPS: PromiseOrValue<BigNumberish>,
    beginTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateInterest(
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelMakerEarningDistributionTask(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelMarketEarningDistributionTask(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMakerEarningDistributionTask(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    oracleProvider: PromiseOrValue<string>,
    settlementToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarketEarningDistributionTask(
    market: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentInterestRate(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dao(overrides?: CallOverrides): Promise<string>;

  getEarningDistributionThreshold(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFlashLoanFeeRate(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInterestRateRecords(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<InterestRate.RecordStructOutput[]>;

  getMarket(
    oracleProvider: PromiseOrValue<string>,
    settlementToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarkets(overrides?: CallOverrides): Promise<string[]>;

  getMarketsBySettlmentToken(
    settlementToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMinimumTakerMargin(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniswapFeeTier(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  isRegisteredMarket(
    market: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRegisteredSettlementToken(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  keeperFeePayer(overrides?: CallOverrides): Promise<string>;

  liquidator(overrides?: CallOverrides): Promise<string>;

  /**
   * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
   * Get the parameters to be used in constructing the market, set transiently during market creation.
   */
  parameters(
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { oracleProvider: string; settlementToken: string }
  >;

  registerOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSettlementToken(
    token: PromiseOrValue<string>,
    minimumTakerMargin: PromiseOrValue<BigNumberish>,
    interestRate: PromiseOrValue<BigNumberish>,
    flashLoanFeeRate: PromiseOrValue<BigNumberish>,
    earningDistributionThreshold: PromiseOrValue<BigNumberish>,
    uniswapFeeTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

  registeredSettlementTokens(overrides?: CallOverrides): Promise<string[]>;

  removeLastInterestRateRecord(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEarningDistributionThreshold(
    token: PromiseOrValue<string>,
    earningDistributionThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFlashLoanFeeRate(
    token: PromiseOrValue<string>,
    flashLoanFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeperFeePayer(
    _keeperFeePayer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidator(
    _liquidator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinimumTakerMargin(
    token: PromiseOrValue<string>,
    minimumTakerMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUniswapFeeTier(
    token: PromiseOrValue<string>,
    uniswapFeeTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  unregisterOracleProvider(
    oracleProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * @param _dao new DAO address to set
   */
  updateDao(
    _dao: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<string>;

    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<InterestRate.RecordStructOutput[]>;

    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarkets(overrides?: CallOverrides): Promise<string[]>;

    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMinimumTakerMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeperFeePayer(overrides?: CallOverrides): Promise<string>;

    liquidator(overrides?: CallOverrides): Promise<string>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { oracleProvider: string; settlementToken: string }
    >;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredOracleProviders(overrides?: CallOverrides): Promise<string[]>;

    registeredSettlementTokens(overrides?: CallOverrides): Promise<string[]>;

    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinimumTakerMargin(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @param _dao new DAO address to set
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "InterestRateRecordAppended(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): InterestRateRecordAppendedEventFilter;
    InterestRateRecordAppended(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): InterestRateRecordAppendedEventFilter;

    "LastInterestRateRecordRemoved(address,uint256,uint256)"(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): LastInterestRateRecordRemovedEventFilter;
    LastInterestRateRecordRemoved(
      token?: PromiseOrValue<string> | null,
      annualRateBPS?: PromiseOrValue<BigNumberish> | null,
      beginTimestamp?: PromiseOrValue<BigNumberish> | null
    ): LastInterestRateRecordRemovedEventFilter;

    "MarketCreated(address,address,address)"(
      oracleProvider?: PromiseOrValue<string> | null,
      settlementToken?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null
    ): MarketCreatedEventFilter;
    MarketCreated(
      oracleProvider?: PromiseOrValue<string> | null,
      settlementToken?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null
    ): MarketCreatedEventFilter;

    "OracleProviderRegistered(address)"(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderRegisteredEventFilter;
    OracleProviderRegistered(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderRegisteredEventFilter;

    "OracleProviderUnregistered(address)"(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;
    OracleProviderUnregistered(
      oracleProvider?: PromiseOrValue<string> | null
    ): OracleProviderUnregisteredEventFilter;

    "SetEarningDistributionThreshold(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      earningDistributionThreshold?: PromiseOrValue<BigNumberish> | null
    ): SetEarningDistributionThresholdEventFilter;
    SetEarningDistributionThreshold(
      token?: PromiseOrValue<string> | null,
      earningDistributionThreshold?: PromiseOrValue<BigNumberish> | null
    ): SetEarningDistributionThresholdEventFilter;

    "SetFlashLoanFeeRate(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      flashLoanFeeRate?: PromiseOrValue<BigNumberish> | null
    ): SetFlashLoanFeeRateEventFilter;
    SetFlashLoanFeeRate(
      token?: PromiseOrValue<string> | null,
      flashLoanFeeRate?: PromiseOrValue<BigNumberish> | null
    ): SetFlashLoanFeeRateEventFilter;

    "SetKeeperFeePayer(address)"(
      keeperFeePayer?: PromiseOrValue<string> | null
    ): SetKeeperFeePayerEventFilter;
    SetKeeperFeePayer(
      keeperFeePayer?: PromiseOrValue<string> | null
    ): SetKeeperFeePayerEventFilter;

    "SetLiquidator(address)"(
      liquidator?: PromiseOrValue<string> | null
    ): SetLiquidatorEventFilter;
    SetLiquidator(
      liquidator?: PromiseOrValue<string> | null
    ): SetLiquidatorEventFilter;

    "SetMinimumTakerMargin(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      minimumTakerMargin?: PromiseOrValue<BigNumberish> | null
    ): SetMinimumTakerMarginEventFilter;
    SetMinimumTakerMargin(
      token?: PromiseOrValue<string> | null,
      minimumTakerMargin?: PromiseOrValue<BigNumberish> | null
    ): SetMinimumTakerMarginEventFilter;

    "SetUniswapFeeTier(address,uint24)"(
      token?: PromiseOrValue<string> | null,
      uniswapFeeTier?: PromiseOrValue<BigNumberish> | null
    ): SetUniswapFeeTierEventFilter;
    SetUniswapFeeTier(
      token?: PromiseOrValue<string> | null,
      uniswapFeeTier?: PromiseOrValue<BigNumberish> | null
    ): SetUniswapFeeTierEventFilter;

    "SetVault(address)"(
      vault?: PromiseOrValue<string> | null
    ): SetVaultEventFilter;
    SetVault(vault?: PromiseOrValue<string> | null): SetVaultEventFilter;

    "SettlementTokenRegistered(address,uint256,uint256,uint256,uint256,uint24)"(
      token?: PromiseOrValue<string> | null,
      minimumTakerMargin?: PromiseOrValue<BigNumberish> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null,
      flashLoanFeeRate?: null,
      earningDistributionThreshold?: null,
      uniswapFeeTier?: null
    ): SettlementTokenRegisteredEventFilter;
    SettlementTokenRegistered(
      token?: PromiseOrValue<string> | null,
      minimumTakerMargin?: PromiseOrValue<BigNumberish> | null,
      interestRate?: PromiseOrValue<BigNumberish> | null,
      flashLoanFeeRate?: null,
      earningDistributionThreshold?: null,
      uniswapFeeTier?: null
    ): SettlementTokenRegisteredEventFilter;

    "UpdateDao(address)"(
      dao?: PromiseOrValue<string> | null
    ): UpdateDaoEventFilter;
    UpdateDao(dao?: PromiseOrValue<string> | null): UpdateDaoEventFilter;

    "UpdateTreasury(address)"(
      treasury?: PromiseOrValue<string> | null
    ): UpdateTreasuryEventFilter;
    UpdateTreasury(
      treasury?: PromiseOrValue<string> | null
    ): UpdateTreasuryEventFilter;
  };

  estimateGas: {
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumTakerMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeperFeePayer(overrides?: CallOverrides): Promise<BigNumber>;

    liquidator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(overrides?: CallOverrides): Promise<BigNumber>;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredOracleProviders(overrides?: CallOverrides): Promise<BigNumber>;

    registeredSettlementTokens(overrides?: CallOverrides): Promise<BigNumber>;

    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinimumTakerMargin(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * @param _dao new DAO address to set
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    appendInterestRateRecord(
      token: PromiseOrValue<string>,
      annualRateBPS: PromiseOrValue<BigNumberish>,
      beginTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateInterest(
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMakerEarningDistributionTask(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarketEarningDistributionTask(
      market: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentInterestRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInterestRateRecords(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      oracleProvider: PromiseOrValue<string>,
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarketsBySettlmentToken(
      settlementToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumTakerMargin(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniswapFeeTier(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredMarket(
      market: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRegisteredSettlementToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeperFeePayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Called by the market constructor to fetch the parameters of the market Returns underlyingAsset The underlying asset of the market Returns settlementToken The settlement token of the market Returns vPoolCapacity Capacity of virtual future pool Returns vPoolA Amplification coefficient of virtual future pool, precise value
     * Get the parameters to be used in constructing the market, set transiently during market creation.
     */
    parameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSettlementToken(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredOracleProviders(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registeredSettlementTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLastInterestRateRecord(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEarningDistributionThreshold(
      token: PromiseOrValue<string>,
      earningDistributionThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFlashLoanFeeRate(
      token: PromiseOrValue<string>,
      flashLoanFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeperFeePayer(
      _keeperFeePayer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidator(
      _liquidator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinimumTakerMargin(
      token: PromiseOrValue<string>,
      minimumTakerMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUniswapFeeTier(
      token: PromiseOrValue<string>,
      uniswapFeeTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unregisterOracleProvider(
      oracleProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * @param _dao new DAO address to set
     */
    updateDao(
      _dao: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
