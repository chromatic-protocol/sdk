/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ChainlinkFeedOracle,
  ChainlinkFeedOracleInterface,
} from "../../../deployed/arbitrum_goerli/ChainlinkFeedOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "ChainlinkAggregator",
        name: "aggregator_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidOracleRound",
    type: "error",
  },
  {
    inputs: [],
    name: "UnableToSyncError",
    type: "error",
  },
  {
    inputs: [],
    name: "aggregator",
    outputs: [
      {
        internalType: "ChainlinkAggregator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "version",
        type: "uint256",
      },
    ],
    name: "atVersion",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "Fixed18",
            name: "price",
            type: "int256",
          },
        ],
        internalType: "struct IOracleProvider.OracleVersion",
        name: "oracleVersion",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentVersion",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "Fixed18",
            name: "price",
            type: "int256",
          },
        ],
        internalType: "struct IOracleProvider.OracleVersion",
        name: "oracleVersion",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "sync",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "version",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "Fixed18",
            name: "price",
            type: "int256",
          },
        ],
        internalType: "struct IOracleProvider.OracleVersion",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162001248380380620012488339810160408190526200003491620002f5565b6001600160a01b03811660808190526200006690620000539062000154565b6200006090600a6200043a565b620001c1565b60a05260805160009062000083906001600160a01b031662000234565b90505b600054604080830151901c61ffff161115620000f257604080518082019091526000808252602082018181528154600181018355918052915191516001600160801b03908116600160801b02921691909117600080516020620012288339815191529091015562000086565b60408051808201825260008082529290910180516001600160801b0390811660208401908152845460018181018755958052935190518216600160801b02911617600080516020620012288339815191529092019190915551905550620004e2565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000195573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001bb91906200044b565b92915050565b60006001600160ff1b03821115620002305760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b606482015260840160405180910390fd5b5090565b6200025960405180606001604052806000815260200160008152602001600081525090565b6000806000846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156200029d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002c391906200048d565b506040805160608101825291825260208201939093526001600160501b03909316918301919091525095945050505050565b6000602082840312156200030857600080fd5b81516001600160a01b03811681146200032057600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156200037e57816000190482111562000362576200036262000327565b808516156200037057918102915b93841c939080029062000342565b509250929050565b6000826200039757506001620001bb565b81620003a657506000620001bb565b8160018114620003bf5760028114620003ca57620003ea565b6001915050620001bb565b60ff841115620003de57620003de62000327565b50506001821b620001bb565b5060208310610133831016604e8410600b84101617156200040f575081810a620001bb565b6200041b83836200033d565b806000190482111562000432576200043262000327565b029392505050565b60006200032060ff84168362000386565b6000602082840312156200045e57600080fd5b815160ff811681146200032057600080fd5b80516001600160501b03811681146200048857600080fd5b919050565b600080600080600060a08688031215620004a657600080fd5b620004b18662000470565b9450602086015193506040860151925060608601519150620004d66080870162000470565b90509295509295909350565b60805160a051610cff62000529600039600061052501526000818160610152818160fe015281816101a8015281816101ea0152818161022b01526103210152610cff6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063245a7bfc1461005c5780637284e416146100a05780637ece075d146100b55780639d888e86146100ea578063fff6cae9146100f2575b600080fd5b6100837f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a86100fa565b6040516100979190610a37565b6100c86100c3366004610a6a565b610187565b6040805182518152602080840151908201529181015190820152606001610097565b6100c86101da565b6100c861021c565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637284e4166040518163ffffffff1660e01b8152600401600060405180830381865afa15801561015a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101829190810190610a99565b905090565b61018f6109f2565b6101d46101ce61019e8461040a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690610450565b83610511565b92915050565b6101e26109f2565b6101826102177f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661056a565b610627565b6102246109f2565b60006102587f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661056a565b9050806040015167ffffffffffffffff166000036102895760405163148d1d5560e21b815260040160405180910390fd5b60016102936106ba565b6040838101516102a492911c610b5c565b61ffff1611156102c7576040516368e7727f60e01b815260040160405180910390fd5b6102cf6106ba565b61ffff166102e282604090810151901c90565b61ffff1611156103f35760008061036160006102fc6106ba565b61ffff168154811061031057610310610b7e565b6000918252602090912001546001547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031691600160801b90046001600160801b031690866106ca565b9150915060006040518060400160405280600061037c6106ba565b61ffff168154811061039057610390610b7e565b6000918252602090912001546103af906001600160801b031686610b94565b6001600160801b0390811682529384166020918201528254600181018455600093845292819020825192909101518416600160801b029190931617910155506102c7565b604081015160015561040481610627565b91505090565b600080610416836108f0565b905080600001516001600160801b03168382602001516001600160801b031661043f9190610bb4565b6104499190610bc7565b9392505050565b61047460405180606001604052806000815260200160008152602001600081525090565b604051639a6fc8f560e01b81526001600160501b038316600482015260009081906001600160a01b03861690639a6fc8f59060240160a060405180830381865afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190610bf6565b50604080516060810182529182526020820193909352918201969096529695505050505050565b6105196109f2565b600061054984602001517f00000000000000000000000000000000000000000000000000000000000000006109d3565b60408051606081018252948552945160208501529383019390935250919050565b61058e60405180606001604052806000815260200160008152602001600081525090565b6000806000846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156105d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f59190610bf6565b506040805160608101825291825260208201939093526001600160501b03909316918301919091525095945050505050565b61062f6109f2565b60008061064184604090810151901c90565b61ffff168154811061065557610655610b7e565b6000918252602080832060408051808201825293909101546001600160801b03808216808652600160801b9092041692840183905290870151929450909161069c91610bb4565b6106a69190610bc7565b90506106b28482610511565b949350505050565b6000805461018290600190610bc7565b600080856001600160a01b038116639a6fc8f56106e8876001610bb4565b6040516001600160e01b031960e084901b1681526001600160501b03909116600482015260240160a060405180830381865afa925050508015610748575060408051601f3d908101601f1916820190925261074591810190610bf6565b60015b156107a6576001600160501b0385161580610761575081155b6107a05788518210156107a0576107818b6001600160501b038716610bc7565b61078c906001610bb4565b8960400151975097505050505050506108e7565b50505050505b604051639a6fc8f560e01b81526001600160501b03861660048201526000906001600160a01b03831690639a6fc8f59060240160a060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190610bf6565b5060408901518951909750909450925050505b8181106108bf578361083e81610c46565b604051639a6fc8f560e01b81526001600160501b03821660048201529095506001600160a01b0385169150639a6fc8f59060240160a060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190610bf6565b50935061082d92505050565b6108c98888610bc7565b6108d4906001610bb4565b6108df856001610bb4565b945094505050505b94509492505050565b6040805180820190915260008082526020820152600061090e6106ba565b61ffff1690506000818154811061092757610927610b7e565b6000918252602091829020604080518082019091529101546001600160801b038082168352600160801b909104169181019190915291505b81516001600160801b03168310156109cd578061097b81610c46565b9150506000818154811061099157610991610b7e565b6000918252602091829020604080518082019091529101546001600160801b038082168352600160801b9091041691810191909152915061095f565b50919050565b6000816109e8670de0b6b3a764000085610c5d565b6104499190610c8d565b60405180606001604052806000815260200160008152602001600081525090565b60005b83811015610a2e578181015183820152602001610a16565b50506000910152565b6020815260008251806020840152610a56816040850160208701610a13565b601f01601f19169190910160400192915050565b600060208284031215610a7c57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610aab57600080fd5b815167ffffffffffffffff80821115610ac357600080fd5b818401915084601f830112610ad757600080fd5b815181811115610ae957610ae9610a83565b604051601f8201601f19908116603f01168101908382118183101715610b1157610b11610a83565b81604052828152876020848701011115610b2a57600080fd5b610b3b836020830160208801610a13565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b61ffff828116828216039080821115610b7757610b77610b46565b5092915050565b634e487b7160e01b600052603260045260246000fd5b6001600160801b03818116838216019080821115610b7757610b77610b46565b808201808211156101d4576101d4610b46565b818103818111156101d4576101d4610b46565b80516001600160501b0381168114610bf157600080fd5b919050565b600080600080600060a08688031215610c0e57600080fd5b610c1786610bda565b9450602086015193506040860151925060608601519150610c3a60808701610bda565b90509295509295909350565b600081610c5557610c55610b46565b506000190190565b80820260008212600160ff1b84141615610c7957610c79610b46565b81810583148215176101d4576101d4610b46565b600082610caa57634e487b7160e01b600052601260045260246000fd5b600160ff1b821460001984141615610cc457610cc4610b46565b50059056fea26469706673582212208e7d5e974616ee59d561701dc05f3c04718e1a8b5da6a6ac498019ecc4bf8ccd64736f6c63430008130033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563";

type ChainlinkFeedOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainlinkFeedOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainlinkFeedOracle__factory extends ContractFactory {
  constructor(...args: ChainlinkFeedOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aggregator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ChainlinkFeedOracle> {
    return super.deploy(
      aggregator_,
      overrides || {}
    ) as Promise<ChainlinkFeedOracle>;
  }
  override getDeployTransaction(
    aggregator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(aggregator_, overrides || {});
  }
  override attach(address: string): ChainlinkFeedOracle {
    return super.attach(address) as ChainlinkFeedOracle;
  }
  override connect(signer: Signer): ChainlinkFeedOracle__factory {
    return super.connect(signer) as ChainlinkFeedOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainlinkFeedOracleInterface {
    return new utils.Interface(_abi) as ChainlinkFeedOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkFeedOracle {
    return new Contract(address, _abi, signerOrProvider) as ChainlinkFeedOracle;
  }
}
